<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shallwe|code</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shallwe.ga/"/>
  <updated>2017-05-24T22:55:03.626Z</updated>
  <id>http://shallwe.ga/</id>
  
  <author>
    <name>shallwe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【SDOI 2017】Round2离队滚粗记</title>
    <link href="http://shallwe.ga/sdoi2017r2/"/>
    <id>http://shallwe.ga/sdoi2017r2/</id>
    <published>2017-05-28T16:00:00.000Z</published>
    <updated>2017-05-24T22:55:03.626Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>两天省选真是让我体会到了人生无常(呵呵呵~~)。</p>
<p>有的时候说什么“谋事在人，成事在天”， 也是很有道理的， 有些事情真的是把握不住的。</p>
<p>该死的二轮省选对我的小心脏造成了1ww点的打击哈。。</p>
</blockquote>
<a id="more"></a>
<h3 id="day--1">Day -1</h3>
<p>从帝都昏昏碌碌地滚回了DY。</p>
<p>作为一个CTSC、APIO炸成狗的选手，在SLYZ的某体育组(?)接受了一波帝国主义的面试培训。</p>
<del>
(为我进不了面试做了一波铺垫?)
</del>
<p>培训上就是各种婊XYM大爷？ 挺XYM大爷怒婊高考真是带劲！</p>
<blockquote>
<p>我感觉你们现在的这些初高中老师不行的， 看我来做个榜样让你们学习一下什么叫做素质教育！ ——XYM</p>
</blockquote>
<p>真是带劲， 估计只有这样霸气侧漏的选手才可以进入省队吧。</p>
<p>回家发现妈妈狼吞虎咽了给我买的晚饭（pizza！）， 据说是自己减肥没吃晚饭结果忍不住了？？？</p>
<h3 id="day-0">Day 0</h3>
<p>12:00在学校食堂门口出发的， 再次成为一群文化课大佬围观的动物园集装箱。</p>
<p>路上打了波WY， 反正就是各种掉分， 各种掉段， 各种掉线。。。</p>
<p>到了济南时间还很早，（好像是走高速的功劳）， 拉着马胖去吃了一波米线（？！） 没错就是在四大火炉-济南，吃了一碗巨烫巨烫的鸡汤米线， 流汗.jpg。</p>
<p>然后李老师又灌了一波鸡汤， 大体是“你们都有光明的未来”之类的。</p>
<p>强行洗波澡疯狂复习唐老师数学题和什么3D计算几何大模板？</p>
<p>听说你是出题人， 你放屁我都信！</p>
<h3 id="day-1">Day 1</h3>
<p>上午8:00准时开考， 题目读了一遍， 没什么会做的， 就先写了三个暴力(5+30+10?)。</p>
<p>发现第三题链的情况似乎比较easy。。 必然是什么分块|线段树云云的， 先放下一会写。</p>
<p>咦， 第一题这个部分分是不是留给我这个大常数垃圾精度FFT选手的啊？ 一会写一波！</p>
<p>咦这个第二题我怎么没什么想法啊， 应该也有可得的部分分吧， 我想想啊！（时间一分一秒地过去， 大概想了2:00？）, 艹， 我怎么走神了， 看来这个题应该弃疗啊！</p>
<p>还有一个小时了啊， 才45分怎么办。 看第三题好像链上部分常数超小？复杂度算出来<span class="math inline">\(10^9\)</span>但全是异或操作可以跑跑看？ 如果能跑过那线段树就只多10分啦， 那我才不想写呢。。（我也不知道哪里出现这么傲娇的想法啊！）</p>
<p>那我就码个T1部分分！ 一波倍增+FFT20分钟写完调完还有15分钟， 测速测精度T1 貌似有60了， 但是T3 貌似常数没那么优越？ 完蛋20分部分分没了。</p>
<p>最后60+30+10=100？ day1rk 9-12? 总排名<span class="math inline">\(10 \rightarrow 9\)</span>, 好吧还是卡着线。</p>
<p>ISA day1rk2 瞬间翻到rk4 ？不愧是双金选手就是吊啊！</p>
<p>下午睡睡 + 2K一波波 + 继续复习数学题+3D计算几何 ？</p>
<p>还看了一波BIG BANG。 难道这就是死亡FLAG ？？</p>
<h3 id="day-2">Day 2</h3>
<p>咦这个T1我会25啊， 我spfa强行一波！咦， 应该用入边记录状态呀， 如果<span class="math inline">\(k\)</span>很小那好多入边的状态不就一样了？ 那我用点和字符串的标号hash一波状态? 能快一点？（简直在扯淡！！）。</p>
<p>咦这个T2好坑啊， 这个方案明明是唯一的样子为什么要字典序最小啊， 我不会证啊， 写个对拍看看？ 好像没反例？ <span class="math inline">\(n^2\)</span>一波！（得到自己唯一的50分）。这怎么还有20分是五边形数啊， 前两天刚写的我怎么想不起来了呢。。完了蛋了。。</p>
<p>这个T3是不是奇怪的后缀家族题啊？ 我YY一波（1.5h passed), 不会啊， hash来个暴力吧， 自然溢出会不会被卡啊？ 好害怕啊， 我再加个mod来个双hash ? (有病！！)</p>
<p>好像25+50+30 ? 应该比较稳？</p>
<p>吃饭的时候莫名其妙的心情不好。。</p>
<p>看榜0+50+0 = 50 ? rk 25?</p>
<p>听说你本来就卡spfa 我又用hash加了一个常数？</p>
<p>听说你标算是自然溢出的单hash所以只要取模全部T ?</p>
<p>听说。。。 总rk 跌到15 没进面试？</p>
<p>大体上就是无比的生气， 真是气死气死了。</p>
<p>我的rk曲线是11 -&gt; 10 -&gt; 9 -&gt; 15 .　最后这场day2可以说毁了我的OI生涯。</p>
<p>算了一下自己是学了9年OI, 虽然7年都是文化课选手， 但是日久情深， 你用暴力还卡常的做法恶心我， 我真是很难过。真的是难过极了， 难过到自己已经接近退役都没察觉了。。</p>
<p>申请了一波cd, 老师说基本没问题， 但感觉d类歧视也挺难受的， c类又巨贵好气。</p>
<p>心里恨出题人咬牙切齿， 哭都哭不出来， 就是恨透了出题人了。好好出题卡什么常数啊， 我就老老实实地打个暴力你卡什么啊。</p>
<p>生气， 难受！</p>
<p>9年OI一场空， D2卡常见祖宗！ SD你出题搞这样， 金钱交易搞那样， 你迟早药丸的我跟你说！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;两天省选真是让我体会到了人生无常(呵呵呵~~)。&lt;/p&gt;
&lt;p&gt;有的时候说什么“谋事在人，成事在天”， 也是很有道理的， 有些事情真的是把握不住的。&lt;/p&gt;
&lt;p&gt;该死的二轮省选对我的小心脏造成了1ww点的打击哈。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="奇怪向" scheme="http://shallwe.ga/categories/%E5%A5%87%E6%80%AA%E5%90%91/"/>
    
    
      <category term="奇怪向" scheme="http://shallwe.ga/tags/%E5%A5%87%E6%80%AA%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>【pkusc 2017】签下卖身契</title>
    <link href="http://shallwe.ga/pkusc2017/"/>
    <id>http://shallwe.ga/pkusc2017/</id>
    <published>2017-05-28T16:00:00.000Z</published>
    <updated>2017-05-25T00:30:35.339Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>SDOI 2017 R2 滚出队的我， THU已经是不给机会了。</p>
<p>但是PKU还是挺有人情味的，没让我这个9年OI直接退役。</p>
<p>就跟着<span class="math inline">\(A队*2+B队*1\)</span> 大爷们去PKU签卖身契了。</p>
<p>可以有学上？</p>
</blockquote>
<a id="more"></a>
<h3 id="day-0">Day 0</h3>
<p>整个人还沉浸在R2爆炸的悲怆中， 感觉已经在心里用各种奇怪的姿势骂了出题人，也没啥新姿势了， 就先把这悲惨的一页翻过去了。。</p>
<p>没回家就从JN做高铁到帝都去了， 一路上真是平稳极了， 所以就全程2K的颓样。</p>
<p>然后下了高铁就转一个subway， 大体剧情就是我和yveh、lzr在前面走着， 上了车发现后面的人都不见了？</p>
<p>据说他们没挤上了？我们也没挤，　就被熙熙攘攘的人流带上了地铁。</p>
<p>反正就在中关村站等了他们一波，　话说高铁３分钟一波是真快。</p>
<p>然后就开始往宾馆走，　本来我和yveh在前面带路， 但是走了一些安全通道之类的奇怪路线， 回头发现lx丢掉了。。 老师把自己弄丢了怎么搞， 在线等， 挺急的。。</p>
<p>然后打电话， lx说去starbucks集合， 但是我们一行人在starbucks等了一波， 两边都说到了， 但没有互相看见。。 据说大城市方圆100米能有好几个starbucks?</p>
<p>然后就各自往宾馆方向走了。 路上买了杯西瓜汁。。第二杯半价感觉划算极了（我就交了第二杯的钱。。）。</p>
<p>在宾馆放下东西就赶着Lx去PKU报道， 先到西南门， 门卫：“我不知道你们这个活动”， 然后是西门？ “我不知道你们这个活动”， 然后是北门， 终于能进了。</p>
<p>已经热成狗了。</p>
<p>而且饥渴难耐。</p>
<p>难受。</p>
<p>报道还排了一个巨长的队， 他们一群人在旁边坐着， 就atp 和 我、yveh排着， 过了一会全过来插了队。。</p>
<blockquote>
<p>这里是PKU, 你们因为插队被捕了。</p>
</blockquote>
<p>然后去吉野家吃了个饭（中间lx带着我们迷路的故事省掉吧， 太惨了）。</p>
<p>lzr, charge， 你们怎么和我要一样的啊？ 什么？ 你就看到了牛肉饭？？？</p>
<p>晚上看前两年的数学题， 挺简单（？！）。。</p>
<h3 id="day-1">　Day 1</h3>
<p>9:00考数学。</p>
<p>第一题暴力展开多项式+系数对比一波？</p>
<p>第二题咦这个式子怎么因式分解啊？</p>
<p>第三题咦这个三次根式怎么有理化啊？</p>
<p>第四题咦这个<span class="math inline">\(300*\log _{10} ^{5}\)</span> 是多少啊？</p>
<p>第五题？ 又一个多项式不会因式分解？</p>
<p>第六题这个排列组合基础啊， md终于有我会的了！ 先把ABC同构除掉， 找一下回文再去掉正反同构， 巨简单送波分啊。</p>
<p>第七题证明<span class="math inline">\(\sin 10\)</span>是个无理数？ 这个不是课本例题么！ 但是怎么做来着， 我把它化成<span class="math inline">\(\sin 30\)</span>看一波？ 咦， 好像是<span class="math inline">\(8x^3+6x+1=0\)</span>的根？ 我偷个懒就说他没有有理数根就好了？（然后我强行写成了无实数根， excuse me ?)</p>
<p>实际上再反证一波<span class="math inline">\(\frac{p}{q}\)</span>这类的很容易的， 但我太智障了啊。</p>
<p>第八题我直接举了一个例子。。</p>
<p>第九题我直接看底面， 然后三角函数推了一波？</p>
<p>第十题花了个反例？ （结果忘抄到答题纸上了）。</p>
<p>怎么今年数学题这么狗啊？</p>
<hr>
<p>然后参观一波实验室， 得到一波结论： 没有理论基础谈个毛实践。</p>
<p>下午去机试， 去晚了(exm &gt;_&lt;) 。</p>
<p>进去的时候已经要开考了， 先配置gvim， 咦， 我的这个编译命令怎么无效了？ 不可能啊， 我一只这么写啊。</p>
<p>这岂不是完蛋？那么就只能用那个什么devc++4.9? 这是个什么玩意。。</p>
<p>散了做题吧， 汉语题太智障了。。直接A掉了（梦回巅峰！）</p>
<p>然后这个A题是个字符串模拟题， gets()读入一波， 然后拆了一下单词和多余字符， 然后循环一波，然后提交， 然后wa？</p>
<p>什么鬼， 我干瞪眼查错一波， 咦， 好像如果句子开头是标点我就挂了， 改， A.</p>
<p>然后看standing. BeiYu好像抢了F的2A? 这个很兹瓷啊，我也冲一波。</p>
<p>就是个树形DP？A了没啥好说了（梦回巅峰！）。</p>
<p>然后读了一波D题， 感觉可以最小割搞搞？ 但是题目意思是可以多个联通块还是一个联通块啊？ 我英死早，GG了半个小时就结束了。</p>
<hr>
<p>晚上继续考。。</p>
<p>汉语题这个整数划分这么僵硬直接交 ？ WA？　没关文件？　罚时＋＋。</p>
<p>看Ａ，这好像又是一个模拟啊， 咦我怎么WA了， 哦，无解条件好像是所有都不满足才无解， 我好想有一个不满足就退出了。</p>
<p>看B, 这不是一个数据结构裸题么， 我强行维护最大最小， 左最大最小， 右最大最小， 再特判一波不能全取， 就A了。</p>
<p>看E, 这个是个博弈啊， 我区间博弈一波， T了， 复杂度好像是<span class="math inline">\(O(n^4)\)</span>, 卡不过去弃了。</p>
<p>出来听说E题XYM直接卡过去了？</p>
<p>怪不得人家是A队， 就是常数优越啊。。</p>
<p>晚上2K一波+复习计算几何（为什么考试前一定要复习计算几何啊？）</p>
<h3 id="day-2">Day 2</h3>
<p>Day 1 好长， 终于到Day 2 了。</p>
<p>今天上午是个五个小时的场， 有点没数怎么办。</p>
<p>还是先看了汉语题， 煞笔背包， A.</p>
<p>咦， 怎么这么多人先做T1啊， 我也没记住是什么题， 反正就直接A了。</p>
<p>看HXY大爷A了E, 计算几何？ 半平面交？ 直接板子一波。</p>
<p>怎么过不了样例 ？我画一波样例？　这个怎么是逆时针啊，题目不是说什么<del>counter</del>clockwise, 什么counter是相反的意思？ 我英死早。</p>
<p>交， A.</p>
<p>然后看D， 这是一个超级稀疏图的哈密顿回路， 我直接跑一波试试， T了， 先弃掉吧。</p>
<p>这个B题是个煞笔模拟呀， A 了。</p>
<p>这个F题好玄学呀， 我写个暴力？ T了， 啊， 这么多人A， 应该暴力可以过啊， 我好难过啊， 我再减减枝， 咦， A了！ 这个ACM赛制感觉真是不一样啊。</p>
<p>还有半个消失了， 可以D缩一下链再暴力一波， 但是C过的人好多， 我看眼C吧。</p>
<p>这好像是个题目巨长的开车主题模拟题？ 好吧读完提还有10分钟， D锁链写惨了炸飞了。。</p>
<hr>
<p>然后只有11题？排名15-30, 那我必须好好面试， 客客气气的， 老老实实的才行啊。</p>
<p>面试官A ：</p>
<p>A: 咱们不谈智商相关的，来点情商题？</p>
<p>S: 好啊， 好啊。</p>
<p>A: 你是家长带着来的还是自己来的。</p>
<p>S: 老师带着来的（还把自己弄丢了）。</p>
<p>A: 特朗普当选对中国是利大于弊还是弊大于利。</p>
<p>S:（我天天看知乎， 你问我这个？妙！） …特朗普是个精明的商人…希拉里是个老辣的政客…既是机遇又是挑战… 双方加深合作…把中美关系…</p>
<p>A: 你怎么评价明朝是中国历史上最后一个汉人执政的朝代？</p>
<p>S:（我学理前天天历史第一我不怕！） … 生于忧患， 死于安乐… 压迫导致抗争… 环境造就性格… 努力通向成功…</p>
<p>（超级熟练）</p>
<p>A: 两个词评论一波自己？</p>
<p>S: 我啥都会， 我巨屌， 我是一个“全面”的人（exm?)</p>
<p>S: 我敢于挑战权威， 我充满批判精神。</p>
<p>A: 你有光明的未来! (???)</p>
<hr>
<p>面试官B（超凶）：</p>
<p>B: 东营？ 这是什么地方？</p>
<p>S: 胜利油田黄河入海口云云。</p>
<p>B: 大学毕业后有什么想法？</p>
<p>S: 我想出国深造， 因为…(被打断)</p>
<p>B: 你为什么会想“出国”深造？</p>
<p>S: 学习先进技术balabala… 国内也会先进balabala…（内心充满波动）</p>
<p>B: 你了解Google公司么？</p>
<p>S: (突然兴奋)我天天用他的搜索引擎！</p>
<p>B: (突然打断)你怎么能用他的搜索引擎！</p>
<p>S:(貌似干了一下违法违规的事情)我…</p>
<p>B: (超凶)你是不是翻墙了！</p>
<p>S:昂昂昂。。。(满脸对不起党对不起人民)</p>
<p>B: 对比评价一下百度和谷歌公司</p>
<p>S: 百度恶性竞争， 谋财害命…</p>
<p>B: （直接打断），你能不能从产品角度分析？</p>
<p>S: 百度全是广告。。。谷歌超好。</p>
<p>B: 你有什么优点么？</p>
<p>S: 我优点超多， （准备开吹）</p>
<p>B: （突然打断）看来没什么张口而出的优点， 那有什么缺点？</p>
<p>S:（exm?)…</p>
<p>被凶了一年看来没学上了。。</p>
<hr>
<p>面试官C:</p>
<p>C: 简单介绍一下自己。</p>
<p>S: 我十年OI一场空。</p>
<p>C: 你学过这么多年OI! 你一定会好多编程语言吧！</p>
<p>S: 。 不会。</p>
<p>C: 平常读什么书。</p>
<p>S: 《哈利波特怒怼伏地魔》</p>
<p>C: … 时间到了，你走吧。</p>
<p>没学上了++。</p>
<hr>
<p>晚上随便吃点然后2K2K2K2K……</p>
<h3 id="day-3">Day 3</h3>
<p>终于day 3了， 前面过得好慢啊。</p>
<p>淋了一路的雨+ 鞋子完全湿透 + 穿着短裤犯彪 ——&gt; 浑身难受。</p>
<p>在礼堂没有座位了，就一屁股坐在地上。。 然后听讲提+看晚会回放。</p>
<p>什么井冈山打虎好好笑！</p>
<p>然后发协议， 无条件60， 前100一本？ 比想到的好得多？</p>
<p>好像是数学和面试加了不少分， 总成绩17、18？ 然后因为没有D类歧视，所以就有约了？</p>
<p>有学上了， 心情好了点， 但是还要花钱才能有学上， 心情又很难受。</p>
<p>为什么SD省队这么容不下我， SDOI 我RNMB .</p>
<p>然后就会家了， 一个月没在家里待几天，吃了顿pizza, 感觉挺不错。</p>
<p>要为决赛奋斗一波了！为D类选手正名！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;SDOI 2017 R2 滚出队的我， THU已经是不给机会了。&lt;/p&gt;
&lt;p&gt;但是PKU还是挺有人情味的，没让我这个9年OI直接退役。&lt;/p&gt;
&lt;p&gt;就跟着&lt;span class=&quot;math inline&quot;&gt;\(A队*2+B队*1\)&lt;/span&gt; 大爷们去PKU签卖身契了。&lt;/p&gt;
&lt;p&gt;可以有学上？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="奇怪向" scheme="http://shallwe.ga/categories/%E5%A5%87%E6%80%AA%E5%90%91/"/>
    
    
      <category term="奇怪向" scheme="http://shallwe.ga/tags/%E5%A5%87%E6%80%AA%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 2716】[Violet 3]天使玩偶</title>
    <link href="http://shallwe.ga/bzoj2716/"/>
    <id>http://shallwe.ga/bzoj2716/</id>
    <published>2017-05-24T12:31:10.000Z</published>
    <updated>2017-05-24T12:35:38.571Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>模板题？ 没有想出如果不会kd-tree该怎么做， 但是有了kd-tree确实是模板题哎。</p>
<p>有时候科技的力量真是耐人寻味。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2716" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>支持两个操作：</p>
<ol style="list-style-type: decimal">
<li>插入一个点</li>
<li>询问最近点</li>
</ol>
<h1 id="解题报告">解题报告</h1>
<p>KD-tree 模板题。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500010</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>; </div><div class="line"></div><div class="line"><span class="keyword">bool</span> D; <span class="keyword">int</span> n,m,rt,as; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">KDT</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> d[<span class="number">2</span>],sn[<span class="number">2</span>],mn[<span class="number">2</span>],mx[<span class="number">2</span>]; </div><div class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> KDT &amp;a) <span class="keyword">const</span> &#123; <span class="keyword">return</span> d[D]&lt;a.d[D];&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; xep(i,<span class="number">2</span>) mn[i]=mx[i]=d[i];&#125; </div><div class="line">&#125; v[N&lt;&lt;<span class="number">1</span>],qy; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; <span class="keyword">char</span> c=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>;c=getchar()) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:f; </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>; c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>;c=getchar()) x=x*<span class="number">10</span>+c<span class="number">-48</span>; </div><div class="line">	x*=f; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmax</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=a&gt;x?a:x; &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=a&lt;x?a:x; &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x&gt;y?x:y; &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x&lt;y?x:y; &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">abs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> (x&gt;=<span class="number">0</span>)?x:-x; &#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; xep(i,<span class="number">2</span>) <span class="keyword">if</span> (v[x].sn[i]) &#123; <span class="keyword">int</span> y=v[x].sn[i]; </div><div class="line">	xep(j,<span class="number">2</span>) cmin(v[x].mn[j],v[y].mn[j]),cmax(v[x].mx[j],v[y].mx[j]); </div><div class="line">&#125; &#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l=<span class="number">1</span>, <span class="keyword">int</span> r=n, <span class="keyword">bool</span> d=<span class="number">0</span>)</span> </span>&#123; D=d; <span class="keyword">int</span> md=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">	nth_element(v+l,v+md,v+r+<span class="number">1</span>); v[md].init(); </div><div class="line">	<span class="keyword">if</span> (l!=md) v[md].sn[<span class="number">0</span>]=build(l,md<span class="number">-1</span>,!d); </div><div class="line">	<span class="keyword">if</span> (r!=md) v[md].sn[<span class="number">1</span>]=build(md+<span class="number">1</span>,r,!d);</div><div class="line">	up(md); <span class="keyword">return</span> md; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, KDT p)</span> </span>&#123; <span class="keyword">int</span> rc=<span class="number">0</span>; xep(i,<span class="number">2</span>) </div><div class="line">	rc+=max(<span class="number">0</span>,v[x].mn[i]-p.d[i])+max(<span class="number">0</span>,p.d[i]-v[x].mx[i]);</div><div class="line">	<span class="keyword">return</span> rc; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x=rt, <span class="keyword">bool</span> d=<span class="number">0</span>)</span> </span>&#123; <span class="keyword">bool</span> fg=v[n].d[d]&gt;v[x].d[d]; </div><div class="line">	<span class="keyword">if</span> (v[x].sn[fg]) insert(v[x].sn[fg], !d); </div><div class="line">	<span class="keyword">else</span> v[x].sn[fg]=n; up(x); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dis</span><span class="params">(KDT a, KDT b)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">abs</span>(a.d[<span class="number">0</span>]-b.d[<span class="number">0</span>])+<span class="built_in">abs</span>(a.d[<span class="number">1</span>]-b.d[<span class="number">1</span>]);&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x=rt,<span class="keyword">bool</span> d=<span class="number">0</span>)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> ds=dis(v[x],qy), dl=inf, dr=inf; cmin(as,ds); </div><div class="line">	<span class="keyword">if</span> (v[x].sn[<span class="number">0</span>]) dl = ask(v[x].sn[<span class="number">0</span>],qy); </div><div class="line">	<span class="keyword">if</span> (v[x].sn[<span class="number">1</span>]) dr = ask(v[x].sn[<span class="number">1</span>],qy); </div><div class="line">	<span class="keyword">if</span> (dl&lt;dr) &#123;  <span class="keyword">if</span> (dl&lt;as) query(v[x].sn[<span class="number">0</span>],!d); <span class="keyword">if</span> (dr&lt;as) query(v[x].sn[<span class="number">1</span>],!d);&#125; </div><div class="line">	<span class="keyword">else</span> &#123; <span class="keyword">if</span> (dr&lt;as) query(v[x].sn[<span class="number">1</span>],!d); <span class="keyword">if</span> (dl&lt;as) query(v[x].sn[<span class="number">0</span>],!d);&#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; 	</div><div class="line">	in(n), in(m); rep(i,<span class="number">1</span>,n) in(v[i].d[<span class="number">0</span>]), in(v[i].d[<span class="number">1</span>]); <span class="keyword">int</span> t;</div><div class="line">	<span class="keyword">for</span> (rt=build(); m; --m) &#123; in(t), as=inf; </div><div class="line">		<span class="keyword">if</span> (t==<span class="number">1</span>) in(v[++n].d[<span class="number">0</span>]),in(v[n].d[<span class="number">1</span>]),v[n].init(),insert(); </div><div class="line">		<span class="keyword">else</span> in(qy.d[<span class="number">0</span>]),in(qy.d[<span class="number">1</span>]),query(),<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,as);</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;模板题？ 没有想出如果不会kd-tree该怎么做， 但是有了kd-tree确实是模板题哎。&lt;/p&gt;
&lt;p&gt;有时候科技的力量真是耐人寻味。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://shallwe.ga/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="KD树" scheme="http://shallwe.ga/tags/KD%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 4773】负环</title>
    <link href="http://shallwe.ga/bzoj4773/"/>
    <id>http://shallwe.ga/bzoj4773/</id>
    <published>2017-05-24T12:20:39.000Z</published>
    <updated>2017-05-24T12:26:05.182Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这个是一个板子题哎， 就是倍增然后floyed跑一下。</p>
<p>但是时间限制是30s, 相对比较宽松的， 所以可以直接<span class="math inline">\(O(n^4)\)</span>的跑。</p>
<p>不过还是没有偷这个小懒。。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4773" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>求一个点数最少的负环， 输出点数。</p>
<h1 id="解题报告">解题报告</h1>
<p>记<span class="math inline">\(f[i][j][k]\)</span>表示<span class="math inline">\(i\)</span>到<span class="math inline">\(j\)</span>经过<span class="math inline">\(k\)</span>个点的最短路。</p>
<p>枚举<span class="math inline">\(k\)</span>和<span class="math inline">\(i\)</span>, 如果存在<span class="math inline">\(f[i][j][k]\)</span>是负数， 那么就是一个负环。</p>
<p>可以发现这个<span class="math inline">\(k\)</span>不需要枚举，满足二分的性质，实际上进行倍增是非常科学的。</p>
<p>复杂度是<span class="math inline">\((n^3\log n)\)</span>的。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">310</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> lg=<span class="number">10</span>; </div><div class="line"></div><div class="line"><span class="keyword">int</span> n,m,f[lg][N][N],g[N][N],h[N][N],as;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=a&lt;x?a:x; &#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m); <span class="keyword">int</span> u,v,w,l; </div><div class="line">	<span class="built_in">memset</span>(h,<span class="number">127</span>/<span class="number">3</span>,<span class="keyword">sizeof</span>(h)); </div><div class="line">	<span class="built_in">memset</span>(f,<span class="number">127</span>/<span class="number">3</span>,<span class="keyword">sizeof</span>(f)); </div><div class="line">	rep(i,<span class="number">1</span>,n) f[<span class="number">0</span>][i][i]=h[i][i]=<span class="number">0</span>; </div><div class="line">	rep(i,<span class="number">1</span>,m) <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w),f[<span class="number">0</span>][u][v]=w; </div><div class="line">	<span class="keyword">for</span> (l=<span class="number">1</span>;l&lt;=<span class="number">9</span>;++l) &#123; <span class="keyword">bool</span> flag=<span class="number">0</span>; </div><div class="line">		rep(k,<span class="number">1</span>,n) rep(i,<span class="number">1</span>,n) rep(j,<span class="number">1</span>,n) </div><div class="line">			cmin(f[l][i][j],f[l<span class="number">-1</span>][i][k]+f[l<span class="number">-1</span>][k][j]); </div><div class="line">		rep(i,<span class="number">1</span>,n) <span class="keyword">if</span> (f[l][i][i]&lt;<span class="number">0</span>) flag=<span class="number">1</span>; </div><div class="line">		<span class="keyword">if</span> (flag) <span class="keyword">break</span>; <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;l)&gt;=n) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"0"</span>), <span class="number">0</span>; </div><div class="line">	&#125;</div><div class="line">	as=<span class="number">0</span>; </div><div class="line">	<span class="keyword">while</span> (~l) &#123; <span class="built_in">memcpy</span>(g,h,<span class="keyword">sizeof</span>(h)); <span class="keyword">bool</span> flag=<span class="number">0</span>; </div><div class="line">		rep(k,<span class="number">1</span>,n) rep(i,<span class="number">1</span>,n) rep(j,<span class="number">1</span>,n) </div><div class="line">			cmin(h[i][j],g[i][k]+f[l][k][j]); </div><div class="line">		rep(i,<span class="number">1</span>,n) <span class="keyword">if</span> (h[i][i]&lt;<span class="number">0</span>) flag=<span class="number">1</span>; </div><div class="line">		<span class="keyword">if</span> (flag) <span class="built_in">memcpy</span>(h,g,<span class="keyword">sizeof</span>(g)); </div><div class="line">		<span class="keyword">else</span> as+=(<span class="number">1</span>&lt;&lt;l); -- l; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,as+<span class="number">1</span>),<span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个是一个板子题哎， 就是倍增然后floyed跑一下。&lt;/p&gt;
&lt;p&gt;但是时间限制是30s, 相对比较宽松的， 所以可以直接&lt;span class=&quot;math inline&quot;&gt;\(O(n^4)\)&lt;/span&gt;的跑。&lt;/p&gt;
&lt;p&gt;不过还是没有偷这个小懒。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="图论题" scheme="http://shallwe.ga/categories/%E5%9B%BE%E8%AE%BA%E9%A2%98/"/>
    
    
      <category term="倍增" scheme="http://shallwe.ga/tags/%E5%80%8D%E5%A2%9E/"/>
    
      <category term="floyed" scheme="http://shallwe.ga/tags/floyed/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj3028】食物</title>
    <link href="http://shallwe.ga/bzoj3028/"/>
    <id>http://shallwe.ga/bzoj3028/</id>
    <published>2017-05-24T11:04:50.000Z</published>
    <updated>2017-05-24T11:58:09.563Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>一个非常基础（甚至不需要）的生成函数题？</p>
<p>感觉生成函数这种神通广大， 名字吓人的东西， 能够有这么平易近人的入门题， 对我这种弱鸡真是太友善了。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3028" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>一些物品， 分别可以购买奇数个， 偶数个， 三的倍数个， 四的倍数个，0个（两种）， 0个， 0个。</p>
<p>问凑出<span class="math inline">\(n\)</span>个物品的方案数。</p>
<h1 id="解题报告">解题报告</h1>
<h4 id="算法一">算法一</h4>
<p>把{奇数个，0个}, {偶数个，0个}，{三的倍数个，0}, {四的倍数个， 0} 这四类拆开看， 可以发现除了第一类必须占<span class="math inline">\(&gt;=1\)</span>个物品外， 其他类组成任意个物品的方案数都是唯一的。</p>
<p>所以答案是将<span class="math inline">\(n-1\)</span>个物品分成<span class="math inline">\(4\)</span>分， 每一份可以为0的方案数， 也就是<span class="math inline">\({n+2} \choose{3}\)</span>.</p>
<h4 id="算法二">算法二</h4>
<p>化一发生成函数： <span class="math display">\[
\begin{aligned}
&amp;F(odd)=x+x^3+x^5+...=\frac{x}{1-x^2}\\
&amp;F(even)=1+x^2+x^4+...=\frac{1}{1-x^2}\\
&amp;F^2(0|1)=(1+x)^2\\
&amp;F(0|1|2)=1+x+x^2=\frac{1-x^3}{1-x}\\
&amp;F(0|1|2|3)=1+x+x^2+x^3=\frac{1-x^4}{1-x}
\end{aligned}
\]</span> 乘起来得到</p>
<p><span class="math display">\[F(\text{all}) = \frac{x}{(1-x)^4}\]</span></p>
<p>再展开得到：</p>
<p><span class="math display">\[F(\text{all})=x*\left(1+{1+4-1\choose 4-1}x+{2+4-1 \choose 4-1}x^2+...\right)\]</span></p>
<p>答案是<span class="math inline">\(x^n\)</span>项的系数， 也就是<span class="math inline">\({n-1+4-1 \choose 4-1}\)</span>.</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(a);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">10007</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  	<span class="keyword">long</span> <span class="keyword">long</span> as=<span class="number">0</span>; <span class="keyword">char</span> c=getchar();</div><div class="line">	<span class="keyword">for</span> (;c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>; c=getchar())as=(as*<span class="number">10</span>+c<span class="number">-48</span>)%p;</div><div class="line">	as=as*(as+<span class="number">1</span>)*(as+<span class="number">2</span>)/<span class="number">1</span>/<span class="number">2</span>/<span class="number">3</span>%p; </div><div class="line">  	<span class="keyword">return</span> <span class="built_in">cout</span>&lt;&lt;as&lt;&lt;<span class="built_in">endl</span>,<span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个非常基础（甚至不需要）的生成函数题？&lt;/p&gt;
&lt;p&gt;感觉生成函数这种神通广大， 名字吓人的东西， 能够有这么平易近人的入门题， 对我这种弱鸡真是太友善了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数学题" scheme="http://shallwe.ga/categories/%E6%95%B0%E5%AD%A6%E9%A2%98/"/>
    
    
      <category term="组合数学" scheme="http://shallwe.ga/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="生成函数" scheme="http://shallwe.ga/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj4144】[AMPPZ2014]Petrol</title>
    <link href="http://shallwe.ga/bzoj4144/"/>
    <id>http://shallwe.ga/bzoj4144/</id>
    <published>2017-05-24T09:21:51.000Z</published>
    <updated>2017-05-24T10:43:06.500Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>一个图论题， 需要一些性质， 需要足够的又不能超时的最短路信息来确保关键点的最小生成树不改变。</p>
<p>这个性质还是不是特别容易发现的啊。。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4144" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p><span class="math inline">\(n\)</span>个点， <span class="math inline">\(m\)</span>条边， 无向图， <span class="math inline">\(S\)</span>个关键点， 多次询问， 问是否存在路径<span class="math inline">\(x \rightarrow y\)</span>, 使得相邻两个关键点的距离不超过<span class="math inline">\(b\)</span> 。</p>
<p>（题目保证<span class="math inline">\(x\)</span>, <span class="math inline">\(y\)</span>为关键点）。</p>
<h1 id="解题报告">解题报告</h1>
<p>首先如果求出关键点之间两两的最短路， 那么题目就与非关键点没有什么关系了。</p>
<p>但是关键点的数量级是<span class="math inline">\(O(n)\)</span>的， 所以非常的不支持。</p>
<p>考虑存在在最终的最小生成树上的关键点之间的路径具有什么性质。</p>
<p>如果<span class="math inline">\(a,b\)</span>两点的最短路径中，存在点<span class="math inline">\(x\)</span>到关键点<span class="math inline">\(c\)</span>的距离小于到关键点<span class="math inline">\(a\)</span>和<span class="math inline">\(b\)</span>的距离的任何一个， 那么<span class="math inline">\(a \rightarrow b\)</span>的路径一定不在最终的最小生成树中。</p>
<p>因为<span class="math inline">\(a \rightarrow c \rightarrow b\)</span>一定是比<span class="math inline">\(a \rightarrow b\)</span>更好的策略。</p>
<p>所以需要的路径一定是“双色的”， 也就是一部分到<span class="math inline">\(x\)</span>最近， 一部分到<span class="math inline">\(y\)</span>最近。</p>
<p>那么枚举<span class="math inline">\(m\)</span>条边， 如果两个点颜色不一样， 分别是<span class="math inline">\(a,b\)</span>, 那么就添加<span class="math inline">\(a \rightarrow b\)</span>的最短路。</p>
<p>这些边足够组成最终的生成树。</p>
<p>所以就边权排序一波， 然后并查集维护一波。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(a);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200100</span>; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> </div><div class="line">    <span class="keyword">int</span> nx,to,v; edge()&#123;&#125;</div><div class="line">    edge(<span class="keyword">int</span> nx,<span class="keyword">int</span> to,<span class="keyword">int</span> v) </div><div class="line">        :nx(nx),to(to),v(v)&#123;&#125;</div><div class="line">&#125; e[N&lt;&lt;<span class="number">1</span>]; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ques</span> &#123;</span> </div><div class="line">    <span class="keyword">int</span> x,y,lm,t,id;</div><div class="line">    ques(<span class="keyword">int</span> x=<span class="number">0</span>,<span class="keyword">int</span> y=<span class="number">0</span>,<span class="keyword">int</span> lm=<span class="number">0</span>,<span class="keyword">int</span> t=<span class="number">0</span>,<span class="keyword">int</span> id=<span class="number">0</span>) </div><div class="line">        :x(x),y(y),lm(lm),t(t),id(id)&#123;&#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> ques &amp;b) <span class="keyword">const</span>&#123; <span class="keyword">return</span> lm==b.lm?t&lt;b.t:lm&lt;b.lm;&#125;  </div><div class="line">&#125; qy[N&lt;&lt;<span class="number">1</span>]; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">side</span> &#123;</span> </div><div class="line">    <span class="keyword">int</span> x,y,d; side()&#123;&#125;</div><div class="line">    side(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d) </div><div class="line">        :x(x),y(y),d(d) &#123;&#125;</div><div class="line">&#125; sd[N]; </div><div class="line"><span class="keyword">int</span> hd[N],tot,n,s,m,c[N],Q,ds[N],co[N],un,f[N]; </div><div class="line"><span class="keyword">bool</span> vs[N],as[N]; <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">    <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">    <span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">    <span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">    x*=f; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d)</span> </span>&#123; </div><div class="line">    e[++tot]=edge(hd[x],y,d), hd[x]=tot; </div><div class="line">    e[++tot]=edge(hd[y],x,d), hd[y]=tot; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">if</span> (f[x]!=x) f[x]=find(f[x]);<span class="keyword">return</span> f[x]; &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">  	<span class="keyword">int</span> a=find(x),b=find(y); <span class="keyword">if</span> (a!=b) f[a]=b;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    in(n),in(s),in(m); rep(i,<span class="number">1</span>,s) in(c[i]); </div><div class="line">    <span class="keyword">int</span> u,v,d; rep(i,<span class="number">1</span>,m)  &#123;</div><div class="line">        in(u),in(v),in(d),sd[i]=side(u,v,d); </div><div class="line">        add(u,v,d), add(v,u,d); </div><div class="line">    &#125;</div><div class="line">    rep(i,<span class="number">1</span>,n) ds[i]=<span class="number">2000000001</span>; </div><div class="line">    rep(i,<span class="number">1</span>,s) ds[c[i]]=<span class="number">0</span>,co[c[i]]=c[i],q.push(c[i]),vs[c[i]]=<span class="number">1</span>; </div><div class="line">    <span class="keyword">while</span> (!q.empty()) &#123; </div><div class="line">        u=q.front(); q.pop(); vs[u]=<span class="number">0</span>; </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=hd[u];i;i=e[i].nx) </div><div class="line">            <span class="keyword">if</span> (v=e[i].to, ds[u]+e[i].v&lt;ds[v]) &#123; </div><div class="line">                ds[v]=ds[u]+e[i].v, co[v]=co[u]; </div><div class="line">                <span class="keyword">if</span> (!vs[v]) vs[v]=<span class="number">1</span>, q.push(v); </div><div class="line">            &#125; </div><div class="line">    &#125;</div><div class="line">    in(Q),un=Q; rep(i,<span class="number">1</span>,n) f[i]=i; </div><div class="line">    rep(i,<span class="number">1</span>,Q) in(u),in(v),in(d),qy[i]=ques(u,v,d,<span class="number">1</span>,i);</div><div class="line">    rep(i,<span class="number">1</span>,m) &#123; </div><div class="line">      	u=sd[i].x,v=sd[i].y; </div><div class="line">      	<span class="keyword">if</span> (co[u]!=co[v])</div><div class="line">        	qy[++un]=ques(co[u],co[v],ds[u]+ds[v]+sd[i].d,<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    sort(qy+<span class="number">1</span>,qy+<span class="number">1</span>+un); </div><div class="line">    rep(i,<span class="number">1</span>,un) &#123;</div><div class="line">        <span class="keyword">if</span> (qy[i].t) as[qy[i].id]=find(qy[i].x)==find(qy[i].y); </div><div class="line">        <span class="keyword">else</span> merge(qy[i].x,qy[i].y); </div><div class="line">    &#125;</div><div class="line">    rep(i,<span class="number">1</span>,Q) <span class="built_in">puts</span>((as[i])?<span class="string">"TAK"</span>:<span class="string">"NIE"</span>); </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个图论题， 需要一些性质， 需要足够的又不能超时的最短路信息来确保关键点的最小生成树不改变。&lt;/p&gt;
&lt;p&gt;这个性质还是不是特别容易发现的啊。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="图论题" scheme="http://shallwe.ga/categories/%E5%9B%BE%E8%AE%BA%E9%A2%98/"/>
    
    
      <category term="并查集" scheme="http://shallwe.ga/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="最短路" scheme="http://shallwe.ga/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 2244】[SDOI2011]拦截导弹</title>
    <link href="http://shallwe.ga/bzoj2244/"/>
    <id>http://shallwe.ga/bzoj2244/</id>
    <published>2017-05-24T08:48:14.000Z</published>
    <updated>2017-05-24T12:00:14.256Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>cdq分治优化dp的题目， 不是很了解当时省选这个题目的得分情况。</p>
<p>不过感觉对于日益简单SD一轮， 这个题目放在现在算是难度适中。</p>
<p>比较好写的一个题目。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2244" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>求最长三维偏序， 并求对于一个位置， 所在最长偏序的方案数。</p>
<h1 id="解题报告">解题报告</h1>
<p>三维偏序， 可以cdq分治 + 树状数组做。</p>
<p>最长三维偏序比较容易解决， 统计一个位置所在的最长三维偏序的方案数， 需要记录正反两个方向的最大值和方案数， 如果最大值的和等于答案， 则方案数为两侧方案数的乘积， 否则为0。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">50010</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1000000000</span>; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> a,b,id; point(<span class="keyword">int</span> a=<span class="number">0</span>,<span class="keyword">int</span> b=<span class="number">0</span>,<span class="keyword">int</span> id=<span class="number">0</span>) </div><div class="line">		:a(a),b(b),id(id) &#123;&#125;</div><div class="line">&#125; p[N]; </div><div class="line"><span class="keyword">int</span> vc[N],vas; </div><div class="line"><span class="keyword">int</span> n,m,f[<span class="number">2</span>][N]; ff g[<span class="number">2</span>][N]; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(point x,point y)</span> </span>&#123;<span class="keyword">return</span> x.a==y.a?x.id&lt;y.id:x.a&lt;y.a;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">	x*=f; </div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> v[N],vv[N],mx[N]; ff hs[N]; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> a,ff b,<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	<span class="keyword">for</span> (;x&lt;=n;x+=x&amp;-x) <span class="keyword">if</span> (mx[x]==a) hs[x]+=b; </div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (mx[x]&lt;a) mx[x]=a,hs[x]=b; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	<span class="keyword">for</span> (;x&lt;=n;x+=x&amp;-x) hs[x]=mx[x]=<span class="number">0</span>; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> &amp;a,ff &amp;b,<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	a=b=<span class="number">0</span>; <span class="keyword">for</span> (;x;x-=x&amp;-x) <span class="keyword">if</span> (mx[x]==a) b+=hs[x]; </div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (mx[x]&gt;a) a=mx[x], b=hs[x];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> t)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (l==<span class="number">1</span>&amp;&amp;r==n) rep(i,l,r) v[i]=i; </div><div class="line">	<span class="keyword">if</span> (l==r) &#123; <span class="keyword">int</span> x=p[v[l]].id; </div><div class="line">		<span class="keyword">if</span> (f[t][x]==<span class="number">1</span>) g[t][x]+=<span class="number">1</span>; </div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (!f[t][x]) f[t][x]=<span class="number">1</span>, g[t][x]=<span class="number">1</span>; </div><div class="line">		<span class="keyword">return</span>; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> _l,_r,md; md=(l+r)&gt;&gt;<span class="number">1</span>,_l=l<span class="number">-1</span>, _r=md; </div><div class="line">	rep(i,l,r) &#123; <span class="keyword">int</span> x=v[i];</div><div class="line">		<span class="keyword">if</span> (p[x].id&lt;=md) vv[++_l]=x; <span class="keyword">else</span> vv[++_r]=x; </div><div class="line">	&#125;</div><div class="line">	rep(i,l,r) v[i]=vv[i]; </div><div class="line">	cdq(l,md,t), _l=l; </div><div class="line">	rep(i,md+<span class="number">1</span>,r) &#123; <span class="keyword">int</span> x=v[i],_mx; ff _hs; </div><div class="line">		<span class="keyword">while</span> (_l&lt;=md&amp;&amp;p[v[_l]].a&lt;=p[x].a) </div><div class="line">			insert(f[t][p[v[_l]].id],g[t][p[v[_l]].id],p[v[_l]].b),++_l; </div><div class="line">		query(_mx,_hs,p[x].b) ;</div><div class="line">		<span class="keyword">int</span> d=p[x].id; </div><div class="line">		<span class="keyword">if</span> (_mx+<span class="number">1</span>==f[t][d]) g[t][d]+=_hs; </div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(_mx+<span class="number">1</span>&gt;f[t][d]) f[t][d]=_mx+<span class="number">1</span>,g[t][d]=_hs; </div><div class="line">	&#125;</div><div class="line">	rep(i,l,md) erase(p[v[i]].b); </div><div class="line">	cdq(md+<span class="number">1</span>,r,t); </div><div class="line">	_l=l,_r=md+<span class="number">1</span>; <span class="keyword">int</span> x=l<span class="number">-1</span>; </div><div class="line">	<span class="keyword">while</span> (_l&lt;=md||_r&lt;=r) &#123; </div><div class="line">		<span class="keyword">if</span> ((_l&lt;=md)&amp;&amp;(_r&gt;r||p[v[_l]].a&lt;p[v[_r]].a))</div><div class="line">			vv[++x]=v[_l++]; </div><div class="line">		<span class="keyword">else</span> vv[++x]=v[_r++];</div><div class="line">	&#125;</div><div class="line">	rep(i,l,r) v[i]=vv[i]; </div><div class="line">&#125;	</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	in(n); rep(i,<span class="number">1</span>,n) &#123;</div><div class="line">		in(p[i].a),in(p[i].b),p[i].id=i; </div><div class="line">		vc[vas++]=p[i].b; </div><div class="line">	&#125;</div><div class="line">	sort(vc,vc+vas), vas=unique(vc,vc+vas)-vc; </div><div class="line">	rep(i,<span class="number">1</span>,n) p[i].b=lower_bound(vc,vc+vas,p[i].b)-vc+<span class="number">1</span>; </div><div class="line">	rep(i,<span class="number">1</span>,n/<span class="number">2</span>) swap(p[i].a,p[n-i+<span class="number">1</span>].a),swap(p[i].b,p[n-i+<span class="number">1</span>].b); </div><div class="line">	sort(p+<span class="number">1</span>,p+<span class="number">1</span>+n,cmp),cdq(<span class="number">1</span>,n,<span class="number">0</span>); </div><div class="line">	rep(i,<span class="number">1</span>,n) p[i].b=vas-p[i].b+<span class="number">1</span>,p[i].a=inf-p[i].a+<span class="number">1</span>,p[i].id=n-p[i].id+<span class="number">1</span>; 	</div><div class="line">	sort(p+<span class="number">1</span>,p+<span class="number">1</span>+n,cmp),cdq(<span class="number">1</span>,n,<span class="number">1</span>); </div><div class="line">	<span class="keyword">int</span> as=<span class="number">0</span>; ff total=<span class="number">0</span>; </div><div class="line">	rep(i,<span class="number">1</span>,n) <span class="keyword">if</span> (f[<span class="number">0</span>][i]+f[<span class="number">1</span>][n-i+<span class="number">1</span>]<span class="number">-1</span>==as) total+=g[<span class="number">0</span>][i]*g[<span class="number">1</span>][n-i+<span class="number">1</span>]; </div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (f[<span class="number">0</span>][i]+f[<span class="number">1</span>][n-i+<span class="number">1</span>]<span class="number">-1</span>&gt;as) as=f[<span class="number">0</span>][i]+f[<span class="number">1</span>][n-i+<span class="number">1</span>]<span class="number">-1</span>,total=g[<span class="number">0</span>][i]*g[<span class="number">1</span>][n-i+<span class="number">1</span>]; </div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,as); total/=as;</div><div class="line">	vep(i,n,<span class="number">1</span>) <span class="keyword">if</span> (f[<span class="number">0</span>][i]+f[<span class="number">1</span>][n-i+<span class="number">1</span>]<span class="number">-1</span>==as) </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lf "</span>, g[<span class="number">0</span>][i]*g[<span class="number">1</span>][n-i+<span class="number">1</span>]/total); </div><div class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"0 "</span>); </div><div class="line">	<span class="built_in">puts</span>(<span class="string">""</span>); <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;cdq分治优化dp的题目， 不是很了解当时省选这个题目的得分情况。&lt;/p&gt;
&lt;p&gt;不过感觉对于日益简单SD一轮， 这个题目放在现在算是难度适中。&lt;/p&gt;
&lt;p&gt;比较好写的一个题目。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="动态规划" scheme="http://shallwe.ga/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="dp" scheme="http://shallwe.ga/tags/dp/"/>
    
      <category term="cdq分治" scheme="http://shallwe.ga/tags/cdq%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj3453】tyvj1858 XLkxc</title>
    <link href="http://shallwe.ga/bzoj3453/"/>
    <id>http://shallwe.ga/bzoj3453/</id>
    <published>2017-05-24T08:25:56.000Z</published>
    <updated>2017-05-24T09:29:12.150Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>从FJWC看到的一个题， 比较容易想到的做法是分析多项式的次数， 并使用LAG插值法进行求解。</p>
<p>但是有比较优美但是颇为繁琐的STD做法？ 用的是伯努利数那套理论。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3453" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>求：</p>
<p><span class="math display">\[\sum_{i=0}^{n} \sum_{j=1}^{a+i \times d} \sum_{l=1}^{j}l^k\]</span></p>
<h1 id="解题报告">解题报告</h1>
<ul>
<li>算法一
<ul>
<li>令<span class="math inline">\(f[n]=S(n,k)=\sum_{i=1}^{n} i^k\)</span>, 则<span class="math inline">\(f\)</span>为对一个<span class="math inline">\(k\)</span>次多项式求前缀和，所以<span class="math inline">\(f\)</span>为<span class="math inline">\(k+1\)</span>次多项式；</li>
<li>同理<span class="math inline">\(g[n]=\sum_{i=1}^{n} f[i]\)</span>，则<span class="math inline">\(g\)</span>为对<span class="math inline">\(f\)</span>求前缀和，<span class="math inline">\(g\)</span>为<span class="math inline">\(k+2\)</span>次多项式。</li>
<li>继续<span class="math inline">\(h[x]=g[a+x \times d]\)</span>, 则<span class="math inline">\(h[x]\)</span>次数界与<span class="math inline">\(g\)</span>相同， 为<span class="math inline">\(k+2\)</span>次多项式。</li>
<li>最后，<span class="math inline">\(ans[n]=\sum_{i=0}^{n}h[x]\)</span>，<span class="math inline">\(ans\)</span>为对<span class="math inline">\(h\)</span>求前缀和，所以<span class="math inline">\(ans\)</span>为<span class="math inline">\(k+4\)</span>次多项式。</li>
<li>因为<span class="math inline">\(g\)</span>为<span class="math inline">\(k+2\)</span>次多项式，<span class="math inline">\(O(k \log{k})\)</span> 预处理处<span class="math inline">\(g\)</span>的前<span class="math inline">\(k+3\)</span>项后，可以使用拉格朗日插值<span class="math inline">\(O(k)\)</span>插出一个<span class="math inline">\(h[x]\)</span>, <span class="math inline">\(O(k^2)\)</span>插出<span class="math inline">\(k+4\)</span>个<span class="math inline">\(h\)</span>并求前缀和得到<span class="math inline">\(k+4\)</span>个<span class="math inline">\(ans[x]\)</span>,再使用<span class="math inline">\(k+4\)</span>个<span class="math inline">\(ans[x]\)</span>进行插值得到<span class="math inline">\(ans[n]\)</span></li>
</ul></li>
<li>算法二
<ul>
<li><p>题目中给出伯努利数，主要目的是提示多项式的次数界。</p></li>
<li><p>但实际上可以使用伯努利数求解。</p></li>
<li><p>承接算法一中的定义，<span class="math inline">\(g(x)=\sum_{i=0}^{n+2} g_i x^i\)</span></p></li>
<li><p><span class="math display">\[
  \begin{aligned}
  ans[n] &amp;=\sum_{i=0}^{n} g(a+i*d) \\
  &amp;= \sum_{i=0}^{n} \sum_{t=0}^{n+2} g_t (a+i*d)^t \\
  &amp;= \sum_{i=0}^{n} \sum_{t=0}^{n+2} g_t \sum_{k=0}^{t} \binom{t}{k}a^{t-k}(i \times d)^{k} \\
  &amp;= \sum_{t=0}^{n+2} g_t \sum_{k=0}^{t} \binom{t}{k}a^{t-k}d^k \sum_{i=0}^n i^k
  \end{aligned}
  \]</span></p></li>
</ul></li>
<li><ul>
<li><p>然后发现， 如果能求出<span class="math inline">\(g_t\)</span>， 并能预处理<span class="math inline">\(\sum_{i=0}^{n}i^k\)</span>， 就可以<span class="math inline">\(k^2\)</span>的搞了。</p></li>
<li><p>翻一下<a href="http://blog.csdn.net/acdreamers/article/details/38929067" target="_blank" rel="external">伯努利数和自然数幂和</a></p></li>
<li><p>摘选重要的公式：</p></li>
<li><p><span class="math display">\[\sum_{k=0}^{n} \binom{n+1}{k} B_k=0\]</span></p></li>
<li><p>利用这个公式可以<span class="math inline">\(O(k^2)\)</span>预处理伯努利数<span class="math inline">\(B\)</span></p></li>
<li><p><span class="math display">\[\sum_{i=1}^{x}i^k=\frac{1}{k+1}\sum_{i=1}^{k+1}\binom{k+1}{i}B_{k+1-i}(x+1)^i\]</span></p></li>
<li><p>上式中，<span class="math inline">\((x+1)^i\)</span>不够优美，因为多项式中需要<span class="math inline">\(x^i\)</span>的形式， 所以把上式重写：</p></li>
<li><p><span class="math display">\[\sum_{i=0}^{x-1}i^k=\frac{1}{k+1}\sum_{i=1}^{k+1}\binom{k+1}{i}B_{k+1-i}x^i \quad (1)\]</span></p></li>
<li><p>对g化式子： <span class="math display">\[
\begin{aligned}
g(x)&amp;=\sum_{i=1}^{x} \sum_{j=1}^{i} j^k \\
&amp;=\sum_{i=1}^{x} (x-i+1)*i^k\\
&amp;=x*\sum_{i=0}^{x-1}i^k-\sum_{i=0}^{x-1}i^{k+1}+\sum_{i=0}^{x-1}i^k+x^k
\end{aligned} \ (2)
\]</span></p></li>
</ul></li>
<li><ul>
<li><p>利用这个式子<span class="math inline">\((1)(2)\)</span>,<span class="math inline">\(O(k)\)</span>预处理<span class="math inline">\(g_t\)</span></p></li>
<li>利用式子<span class="math inline">\((1)\)</span>, <span class="math inline">\(\sum_{i=0}^{n}i^k\)</span>单次<span class="math inline">\(O(k)\)</span>, 所以可以<span class="math inline">\(O(k^2)\)</span>预处理<span class="math inline">\(S(n,k)\)</span>.</li>
<li><p>这样就完结撒花喽~~</p></li>
</ul></li>
</ul>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">1234567891</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3015</span>; </div><div class="line"> </div><div class="line">ll f[N],g[N],fc[N],iv[N],pe[N],su[N],k,a,n,d; </div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">fast</span><span class="params">(ll x,<span class="keyword">int</span> k)</span> </span>&#123;ll as=<span class="number">1</span>; <span class="keyword">for</span>(;k;k&gt;&gt;=<span class="number">1</span>,x=x*x%p) <span class="keyword">if</span>(k&amp;<span class="number">1</span>) as=as*x%p;<span class="keyword">return</span> as;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mo</span><span class="params">(ll x, ll y)</span> </span>&#123; x+=y; <span class="keyword">if</span> (x&gt;=p) x-=p; <span class="keyword">if</span> (x&lt;<span class="number">0</span>) x+=p; <span class="keyword">return</span> x;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">P</span><span class="params">(ll x,ll y)</span> </span>&#123; <span class="keyword">if</span> ((x-y)&amp;<span class="number">1</span>) <span class="keyword">return</span> p<span class="number">-1</span>; <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lag</span><span class="params">(ll f[],ll n, <span class="keyword">int</span> k)</span> </span>&#123; </div><div class="line">    pe[<span class="number">0</span>]=<span class="number">1</span>; rep(i,<span class="number">1</span>,k) pe[i]=pe[i<span class="number">-1</span>]*(n-i+p)%p; </div><div class="line">    su[<span class="number">0</span>]=<span class="number">1</span>; rep(i,<span class="number">1</span>,k) su[i]=su[i<span class="number">-1</span>]*(n-k+i<span class="number">-1</span>+p)%p; </div><div class="line">    ll as=<span class="number">0</span>; </div><div class="line">    rep(i,<span class="number">1</span>,k) &#123; </div><div class="line">        ll up=pe[i<span class="number">-1</span>]*su[k-i]%p*f[i]%p; </div><div class="line">        ll dn=iv[i<span class="number">-1</span>]*iv[k-i]%p; </div><div class="line">        as=mo(as, up*dn%p*P(k,i)%p); </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> as; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    fc[<span class="number">0</span>]=<span class="number">1</span>; rep(i,<span class="number">1</span>,<span class="number">3010</span>) fc[i]=fc[i<span class="number">-1</span>]*i%p; </div><div class="line">    iv[<span class="number">3010</span>]=fast(fc[<span class="number">3010</span>],p<span class="number">-2</span>); vep(i,<span class="number">3009</span>,<span class="number">0</span>) iv[i]=iv[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%p;</div><div class="line">    <span class="keyword">int</span> test; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;test);</div><div class="line">    <span class="keyword">while</span> (test--) &#123; </div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;k,&amp;a,&amp;n,&amp;d); </div><div class="line">        rep(i,<span class="number">0</span>,k+<span class="number">3</span>) g[i]=fast(i,k); </div><div class="line">        rep(i,<span class="number">1</span>,k+<span class="number">3</span>) g[i]=mo(g[i<span class="number">-1</span>],g[i]); </div><div class="line">        rep(i,<span class="number">1</span>,k+<span class="number">3</span>) g[i]=mo(g[i<span class="number">-1</span>],g[i]); </div><div class="line">        f[<span class="number">0</span>]=lag(g,a,k+<span class="number">3</span>);</div><div class="line">        rep(i,<span class="number">1</span>,k+<span class="number">5</span>) f[i]=mo(f[i<span class="number">-1</span>],lag(g,(a+d*i)%p,k+<span class="number">3</span>)); </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lag(f,n,k+<span class="number">5</span>)); </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从FJWC看到的一个题， 比较容易想到的做法是分析多项式的次数， 并使用LAG插值法进行求解。&lt;/p&gt;
&lt;p&gt;但是有比较优美但是颇为繁琐的STD做法？ 用的是伯努利数那套理论。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数学题" scheme="http://shallwe.ga/categories/%E6%95%B0%E5%AD%A6%E9%A2%98/"/>
    
    
      <category term="拉格朗日插值" scheme="http://shallwe.ga/tags/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC/"/>
    
      <category term="数论" scheme="http://shallwe.ga/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 2063】我爸是李刚</title>
    <link href="http://shallwe.ga/bzoj2063/"/>
    <id>http://shallwe.ga/bzoj2063/</id>
    <published>2017-05-05T13:18:28.000Z</published>
    <updated>2017-05-24T07:07:19.221Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这个题目Yveh送给xyx做胡策题的， 但是我这种只做过二进制数位dp裸题的丝薄选手， 直接懵逼了好不好。。</p>
<p>实际上是数位dp的例题， 好几年前的论文里就有了。</p>
<p>话说这个题目真是非常的魔性。</p>
</blockquote>
<a id="more"></a>
<div class="figure">
<img src="http://oj12ftk88.bkt.clouddn.com/blog/20170505/212205950.png?imageslim">

</div>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2063" target="_blank" rel="external">题目链接</a></p>
<h1 id="题目大意">题目大意</h1>
<p>区间<span class="math inline">\([l,r]\)</span>， 每个数的价值是各个数位的数字之和， 如果相邻的<span class="math inline">\(x\)</span>个数价值和大于等于<span class="math inline">\(m\)</span>， 则这<span class="math inline">\(x\)</span>个数可以分为一组， 求<span class="math inline">\([l,r]\)</span>最多分为几组。</p>
<h1 id="解题报告">解题报告</h1>
<p>因为数的价值是各个数位的数字之和， 所以考虑进行数位dp.</p>
<p>具体的，考虑“数位树”， 在十进制下也就是一个十叉树， 那么对于一个<span class="math inline">\([l,r]\)</span>的询问，可以转换成<span class="math inline">\((l&#39;,r&#39;)\)</span>, 在十叉树上， 这个开区间中的数可以看作若干满二叉子树。</p>
<p>因为树高是<span class="math inline">\(\text{log }n\)</span>级别的，所以这些满十叉树的个数是<span class="math inline">\(\text{log }n\)</span> 级别的。</p>
<p>考虑预处理每棵满十叉树对答案可能产生的贡献， 因为一颗满十叉树可能分成若干组后， 贡献一个<span class="math inline">\(\leqslant m\)</span>的一个余数， 不妨设计这样的状态:</p>
<p><span class="math inline">\(f[i][j][k]\)</span> 表示满十叉树根节点的深度是<span class="math inline">\(i\)</span>, 子树根节点到根的路径和为<span class="math inline">\(j\)</span>, 在前方提供<span class="math inline">\(k\)</span>的余数， 可以贡献的分组数。</p>
<p><span class="math inline">\(g[i][j][k]\)</span> 表示满十叉树根节点的深度是<span class="math inline">\(i\)</span>, 子树根节点到根的路径和为<span class="math inline">\(j\)</span>, 在前方提供<span class="math inline">\(k\)</span>的余数， 贡献若干组后剩余的余数。</p>
<p>现在就得到了每棵满十叉树在不同情况下对答案的贡献、对后方子树的影响， 消耗的时间复杂度是<span class="math inline">\(O(\log^2n * 10^2 * m)\)</span> 。</p>
<p>查询的时候，在十叉树上查询<span class="math inline">\((l&#39;,r&#39;)\)</span>两个区间端点的<span class="math inline">\(\text{lca}\)</span>, 分别从左侧向上爬，在从<span class="math inline">\(\text{lca}\)</span>向右端点爬 。</p>
<p>统计答案， 复杂度是<span class="math inline">\(O(\log n * 10)\)</span>的。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"> </div><div class="line">ll f[<span class="number">20</span>][<span class="number">180</span>][<span class="number">1010</span>],l,r;</div><div class="line"><span class="keyword">int</span> g[<span class="number">20</span>][<span class="number">180</span>][<span class="number">1010</span>],m,a[<span class="number">25</span>],b[<span class="number">25</span>],sa[<span class="number">25</span>],sb[<span class="number">25</span>],la,lb,ln,tst;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</div><div class="line">    la=lb=ln=<span class="number">0</span>;</div><div class="line">    rep(i,<span class="number">0</span>,<span class="number">9</span>*<span class="number">18</span>) rep(j,<span class="number">0</span>,m<span class="number">-1</span>) f[<span class="number">1</span>][i][j]=(i+j&gt;=m),g[<span class="number">1</span>][i][j]=(i+j&gt;=m?<span class="number">0</span>:i+j); </div><div class="line">    rep(i,<span class="number">2</span>,<span class="number">18</span>) rep(j,<span class="number">0</span>,<span class="number">9</span>*(<span class="number">18</span>-i+<span class="number">1</span>)) rep(k,<span class="number">0</span>,m<span class="number">-1</span>) &#123; </div><div class="line">        <span class="keyword">int</span> tmp=k; f[i][j][k]=<span class="number">0</span>; </div><div class="line">        rep(x,<span class="number">0</span>,<span class="number">9</span>) f[i][j][k]+=f[i<span class="number">-1</span>][j+x][tmp],tmp=g[i<span class="number">-1</span>][j+x][tmp]; </div><div class="line">        g[i][j][k]=tmp; </div><div class="line">    &#125; </div><div class="line">    --l, ++r; </div><div class="line">    <span class="keyword">while</span> (l) a[++la]=l%<span class="number">10</span>, l/=<span class="number">10</span>; </div><div class="line">    <span class="keyword">while</span> (r) b[++lb]=r%<span class="number">10</span>, r/=<span class="number">10</span>; </div><div class="line">    sa[lb+<span class="number">1</span>]=<span class="number">0</span>,sb[lb+<span class="number">1</span>]=<span class="number">0</span>; vep(i,lb,<span class="number">1</span>) </div><div class="line">        sa[i]=sa[i+<span class="number">1</span>]+a[i],sb[i]=sb[i+<span class="number">1</span>]+b[i]; </div><div class="line">    ln=lb; <span class="keyword">while</span> (a[ln]==b[ln]) --ln; <span class="keyword">int</span> tmp=<span class="number">0</span>; ll as=<span class="number">0</span>; </div><div class="line">    rep(i,<span class="number">1</span>,ln<span class="number">-1</span>) rep(j,a[i]+<span class="number">1</span>,<span class="number">9</span>) </div><div class="line">        as+=f[i][sa[i+<span class="number">1</span>]+j][tmp],tmp=g[i][sa[i+<span class="number">1</span>]+j][tmp]; </div><div class="line">    rep(i,a[ln]+<span class="number">1</span>,b[ln]<span class="number">-1</span>) as+=f[ln][sa[ln+<span class="number">1</span>]+i][tmp],tmp=g[ln][sa[ln+<span class="number">1</span>]+i][tmp]; </div><div class="line">    vep(i,ln<span class="number">-1</span>,<span class="number">1</span>) rep(j,<span class="number">0</span>,b[i]<span class="number">-1</span>) </div><div class="line">        as+=f[i][sb[i+<span class="number">1</span>]+j][tmp],tmp=g[i][sb[i+<span class="number">1</span>]+j][tmp]; </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,as); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%d"</span>,&amp;l,&amp;r,&amp;m); </div><div class="line">    solve(); </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个题目Yveh送给xyx做胡策题的， 但是我这种只做过二进制数位dp裸题的丝薄选手， 直接懵逼了好不好。。&lt;/p&gt;
&lt;p&gt;实际上是数位dp的例题， 好几年前的论文里就有了。&lt;/p&gt;
&lt;p&gt;话说这个题目真是非常的魔性。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="动态规划" scheme="http://shallwe.ga/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="数位dp" scheme="http://shallwe.ga/tags/%E6%95%B0%E4%BD%8Ddp/"/>
    
      <category term="dp" scheme="http://shallwe.ga/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 4008】[HNOI2015]亚瑟王</title>
    <link href="http://shallwe.ga/bzoj4008/"/>
    <id>http://shallwe.ga/bzoj4008/</id>
    <published>2017-05-03T13:41:47.000Z</published>
    <updated>2017-05-24T07:08:50.705Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>是一个概率期望相关的题目， 但并没有使用期望的线性性质或者<span class="math inline">\(f[S]=\sum (f[T]+v_{S \to T}) \times p_{S \to T}\)</span> 这类常见的dp思路。</p>
<p>这个题目是从期望的定义出发， 也就是求出概率再乘权值得到期望。</p>
</blockquote>
<a id="more"></a>
<h1 id="题目链接"><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4008" target="_blank" rel="external">题目链接</a></h1>
<h1 id="题目大意">题目大意</h1>
<p>游戏进行<span class="math inline">\(r\)</span>轮， 有<span class="math inline">\(n\)</span>张牌， 每轮按照从小到大的顺序判断每张牌，如果这张牌已经出过就跳过，否则有<span class="math inline">\(p_i\)</span>的概率打出， 并造成<span class="math inline">\(d_i\)</span>点伤害。</p>
<p>求造成的期望伤害。</p>
<h1 id="解题报告">解题报告</h1>
<p><span class="math inline">\(r\)</span>轮游戏？ 实际是<span class="math inline">\(r\)</span>次出牌的机会，打出一张牌会消耗一次机会。</p>
<p>每轮游戏都是从小到大的顺序判断每张牌， 所以如果确定前<span class="math inline">\((i-1)\)</span>张牌，是否在<span class="math inline">\(r\)</span>轮中的某一轮打出或者没有打出过， 那么第<span class="math inline">\(i\)</span>张牌可以看做第<span class="math inline">\(1\)</span>张牌，不受任何其他牌的影响。</p>
<p>再一点， 就是<span class="math inline">\(r\)</span>轮游戏实际是没有区别的， 也就是说状态不需要记录具体每一轮游戏是否被<span class="math inline">\((i-1)\)</span>张牌占用， 只需要记录剩余多少轮游戏就可以。</p>
<p>如果确定前<span class="math inline">\((i-1)\)</span>个牌占用了若干轮游戏， 记录<span class="math inline">\(f[i][j]\)</span>表示到第<span class="math inline">\(i\)</span>张牌， 还剩<span class="math inline">\(j\)</span>轮游戏没有被占用的概率。 <span class="math display">\[
\left \lbrace \begin{aligned}
&amp;f[i][j]*(1-p_i)^j \to f[i+1][j]\\
&amp;f[i][j]*(1-(1-p_i)^j)  \to f[i+1][j-1]
\end{aligned} \right.
\]</span> 然后<span class="math inline">\(\text{Prob(i)}=\sum f[i][j]*(1-(1-p_i)^j)\)</span> . <span class="math display">\[
\text{ans} = \sum d_i * \text{Prob}(i)
\]</span> 搞定喽。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">233</span>;</div><div class="line">ff f[N][N],p[N],g[N]; </div><div class="line"><span class="keyword">int</span> n,r,d[N],test; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f)); <span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span>(g));</div><div class="line">    f[<span class="number">0</span>][r]=<span class="number">1.0</span>; rep(i,<span class="number">1</span>,n) &#123; </div><div class="line">        ff _p=<span class="number">1</span>; rep(j,<span class="number">0</span>,r) &#123; </div><div class="line">            <span class="keyword">if</span> (f[i<span class="number">-1</span>][j]) &#123; </div><div class="line">                f[i][j]+=f[i<span class="number">-1</span>][j]*_p; </div><div class="line">                <span class="keyword">if</span> (j) f[i][j<span class="number">-1</span>]+=f[i<span class="number">-1</span>][j]*(-_p+<span class="number">1</span>),g[i]+=f[i<span class="number">-1</span>][j]*(-_p+<span class="number">1</span>); </div><div class="line">            &#125; </div><div class="line">            _p*=(-p[i]+<span class="number">1</span>); </div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">    ff as=<span class="number">0</span>; </div><div class="line">    rep(i,<span class="number">1</span>,n) as+=g[i]*d[i]; </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>,as); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;test); <span class="keyword">while</span> (test--) &#123; </div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;r); </div><div class="line">        rep(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">"%lf%d"</span>,&amp;p[i],&amp;d[i]); </div><div class="line">        slv(); </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;是一个概率期望相关的题目， 但并没有使用期望的线性性质或者&lt;span class=&quot;math inline&quot;&gt;\(f[S]=\sum (f[T]+v_{S \to T}) \times p_{S \to T}\)&lt;/span&gt; 这类常见的dp思路。&lt;/p&gt;
&lt;p&gt;这个题目是从期望的定义出发， 也就是求出概率再乘权值得到期望。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="动态规划" scheme="http://shallwe.ga/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="dp" scheme="http://shallwe.ga/tags/dp/"/>
    
      <category term="概率期望" scheme="http://shallwe.ga/tags/%E6%A6%82%E7%8E%87%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 4012】[HNOI2015]开店</title>
    <link href="http://shallwe.ga/bzoj4012/"/>
    <id>http://shallwe.ga/bzoj4012/</id>
    <published>2017-05-01T07:42:15.000Z</published>
    <updated>2017-05-01T09:00:47.676Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>一个数据结构题， 有不优美的动态点分治做法和写起来比动态点分治还长的树链剖分+可持久化线段树做法。</p>
<p>思维难度： <del>没有？</del></p>
<p>就是代码题喽。</p>
</blockquote>
<a id="more"></a>
<h1 id="题目链接"><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4012" target="_blank" rel="external">题目链接</a></h1>
<h1 id="题目大意">题目大意</h1>
<p>强制在线， 每个节点的妖怪(?)有一个年龄， 树上的边带权， 多次单点询问年龄在<span class="math inline">\([l,r]\)</span>的妖怪到节点<span class="math inline">\(u\)</span>的距离和。</p>
<h1 id="解题报告">解题报告</h1>
<h3 id="先说一个很不优美的动态树分治的做法">先说一个很不优美的动态树分治的做法。</h3>
<p>记录每个点到经过的分治重心的距离， 在每个分治重心处把分治块中的点按照年龄进行排序， 查询的时候二分得到这个分支块中年龄<span class="math inline">\([l,r]\)</span>之间的点的个数和到分治重心的距离和。</p>
<p>因为点分治 在每个分治重心处得到答案时， 需要减去分治树下一层在同一块的答案， 所以还需要按照下一层所在的分支块为第一关键字， 年龄为第二关键字排序， 在查询的时候减去不合法的这部分数据。</p>
<h3 id="好-现在说一个代码更长的比较优美的做法">好， 现在说一个代码更长的比较优美的做法</h3>
<p>对于询问<span class="math inline">\((u, l, r)\)</span>, 需要求的答案为<span class="math inline">\(\text{ans}\)</span>： <span class="math display">\[
\begin{aligned}
\text{ans}&amp;=\sum_{x,\text{age}_x \in [l,r]} \text{dis}(u, x) \\
&amp;=\sum_{x, \text{age}_x \in [l,r]} \text{dep}(u)+\text{dep}(x)-2 \times \text{dep}(\text{lca}(u,x))
\end{aligned}
\]</span> 其中<span class="math inline">\(\sum_{x, \text{age}_x \in [l,r]} \text{dep}(u)+\text{dep}(x)\)</span>可以通过前缀相减<span class="math inline">\(O(1)\)</span>得到。</p>
<p>考虑求<span class="math inline">\(\sum_{x, \text{age}_x \in [l,r]} \text{dep}(\text{lca}(u,x))\)</span>, 考虑每条边的贡献， 也就是如果有一个点<span class="math inline">\(x( \text{age}_x \in [l,r])\)</span>, 那么<span class="math inline">\(\text{lca}(u,x)\)</span>到根的边贡献加<span class="math inline">\(1\)</span>。</p>
<p>做法是将<span class="math inline">\(x( \text{age}_x \in [l,r])\)</span>到根路径上的边的贡献加<span class="math inline">\(1\)</span>, 查询<span class="math inline">\(u\)</span>的时候，查询<span class="math inline">\(u\)</span>到根的路径上的贡献， 就成功收集<span class="math inline">\(\text{lca}(u,x)\)</span>到根的边贡献了。</p>
<p>在考虑<span class="math inline">\(\text{age}_x \in [l,r]\)</span> 的限制， 只需要按照<span class="math inline">\(\text{age}\)</span>把妖怪排序并依次加入，对统计贡献的线段树进行可持久化就好了。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for (int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for (int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for (int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">150010</span>; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nde</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> l,r,tg,tm; ll sm;</div><div class="line">	nde(<span class="keyword">int</span> l=<span class="number">0</span>,<span class="keyword">int</span> r=<span class="number">0</span>,<span class="keyword">int</span> tg=<span class="number">0</span>,<span class="keyword">int</span> tm=<span class="number">0</span>,<span class="keyword">int</span> sm=<span class="number">0</span>)</div><div class="line">		 :l(l),r(r),tg(tg),tm(tm),sm(sm)&#123;&#125;</div><div class="line">&#125; v[<span class="number">20000000</span>]; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> nxt,to,c; edge(<span class="keyword">int</span> nxt=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>,<span class="keyword">int</span> c=<span class="number">0</span>) </div><div class="line">		:nxt(nxt),to(to),c(c)&#123;&#125;</div><div class="line">&#125; e[N&lt;&lt;<span class="number">1</span>]; </div><div class="line"><span class="keyword">int</span> n,Q,A,hsh[N],od[N],hed[N],tot,cnt; </div><div class="line"><span class="keyword">int</span> sz[N],sn[N],rt[N],d[N],f[N],b[N],dn[N],bd[N],ct; </div><div class="line">ll sm[N],as,hv; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">	x*=f; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">	<span class="keyword">return</span> hsh[x]&lt;hsh[y]; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> c)</span> </span>&#123; </div><div class="line">	e[++tot]=edge(hed[x],y,c),hed[x]=tot; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	sz[x]=<span class="number">1</span>,sn[x]=<span class="number">0</span>; <span class="keyword">int</span> y; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt) </div><div class="line">		<span class="keyword">if</span> (y=e[i].to, y!=f[x]) &#123; </div><div class="line">			f[y]=x, d[y]=d[x]+e[i].c,dfs(y); </div><div class="line">			sz[x]+=sz[y]; <span class="keyword">if</span>(sz[y]&gt;sz[sn[x]]) sn[x]=y; </div><div class="line">		&#125; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> top)</span> </span>&#123; </div><div class="line">	b[x]=top,dn[x]=++cnt,bd[cnt]=x;<span class="keyword">int</span> y; </div><div class="line">	<span class="keyword">if</span> (sn[x]) &#123; dfs(sn[x],top); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt) </div><div class="line">			<span class="keyword">if</span> (y=e[i].to, y!=f[x]&amp;&amp;y!=sn[x]) </div><div class="line">				dfs(y,y);</div><div class="line">	&#125; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fd</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> l=<span class="number">0</span>,r=n,md,rc=<span class="number">0</span>; </div><div class="line">	<span class="keyword">while</span> (l&lt;=r) &#123; md=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">		<span class="keyword">if</span> (hsh[od[md]]&lt;=x) rc=md,l=md+<span class="number">1</span>; </div><div class="line">		<span class="keyword">else</span> r=md<span class="number">-1</span>; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> rc; </div><div class="line">&#125; </div><div class="line"><span class="keyword">inline</span> ll _len(<span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123; </div><div class="line">	<span class="keyword">if</span> (d[l]&gt;d[r]) swap(l,r); <span class="keyword">return</span> d[r]-d[f[l]]; </div><div class="line">&#125; </div><div class="line"><span class="keyword">void</span> _mdf(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> _l,<span class="keyword">int</span> _r,<span class="keyword">int</span> tm) &#123; </div><div class="line">	<span class="keyword">if</span> (v[x].tm!=tm) &#123; v[++cnt]=v[x],x=cnt,v[x].tm=tm;&#125; </div><div class="line">	<span class="keyword">if</span> (_l&lt;=l&amp;&amp;r&lt;=_r) ++v[x].tg; </div><div class="line">	<span class="keyword">else</span> &#123; <span class="keyword">int</span> md=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">		v[x].sm+=_len(bd[_l],bd[_r]); </div><div class="line">		<span class="keyword">if</span> (_r&lt;=md) _mdf(v[x].l,l,md,_l,_r,tm); </div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (_l&gt;md) _mdf(v[x].r,md+<span class="number">1</span>,r,_l,_r,tm); </div><div class="line">			<span class="keyword">else</span> _mdf(v[x].l,l,md,_l,md,tm), _mdf(v[x].r,md+<span class="number">1</span>,r,md+<span class="number">1</span>,_r,tm); </div><div class="line">	&#125;</div><div class="line">&#125; </div><div class="line"><span class="keyword">void</span> _qry(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> _l,<span class="keyword">int</span> _r,ll gt) &#123; </div><div class="line">	gt+=v[x].tg; </div><div class="line">	<span class="keyword">if</span> (_l&lt;=l&amp;&amp;r&lt;=_r) hv-=<span class="number">2l</span>l*(v[x].sm+gt*_len(bd[l],bd[r])); </div><div class="line">	<span class="keyword">else</span> &#123; <span class="keyword">int</span> md=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">		<span class="keyword">if</span> (_l&lt;=md) _qry(v[x].l,l,md,_l,_r,gt); </div><div class="line">		<span class="keyword">if</span> (_r&gt;md) _qry(v[x].r,md+<span class="number">1</span>,r,_l,_r,gt); </div><div class="line">	&#125;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> tm)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> fx=b[x]; <span class="keyword">while</span> (fx!=<span class="number">1</span>) &#123;</div><div class="line">		_mdf(rt[tm],<span class="number">1</span>,n,dn[fx],dn[x],tm); </div><div class="line">		x=f[fx],fx=b[x]; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">if</span> (x!=<span class="number">1</span>) _mdf(rt[tm],<span class="number">1</span>,n,dn[<span class="number">1</span>],dn[x],tm); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> tm)</span> </span>&#123; </div><div class="line">	hv=<span class="number">1l</span>l*tm*d[x]+sm[tm]; </div><div class="line">	<span class="keyword">int</span> fx=b[x]; <span class="keyword">while</span> (fx!=<span class="number">1</span>) &#123;</div><div class="line">		_qry(rt[tm],<span class="number">1</span>,n,dn[fx],dn[x],<span class="number">0</span>); </div><div class="line">		x=f[fx],fx=b[x]; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">if</span> (x!=<span class="number">1</span>) _qry(rt[tm],<span class="number">1</span>,n,dn[<span class="number">1</span>],dn[x],<span class="number">0</span>);</div><div class="line">	<span class="keyword">return</span> hv; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	in(n),in(Q),in(A); </div><div class="line">	rep(i,<span class="number">1</span>,n) in(hsh[i]),od[i]=i; </div><div class="line">	sort(od+<span class="number">1</span>,od+<span class="number">1</span>+n,cmp); </div><div class="line">	<span class="keyword">int</span> a,b,c; </div><div class="line">	rep(i,<span class="number">1</span>,n<span class="number">-1</span>) in(a),in(b),in(c),add(a,b,c),add(b,a,c); </div><div class="line">	dfs(<span class="number">1</span>), dfs(<span class="number">1</span>,<span class="number">1</span>); </div><div class="line">	rep(i,<span class="number">1</span>,n) &#123; rt[i]=rt[i<span class="number">-1</span>],modify(od[i],i),sm[i]=sm[i<span class="number">-1</span>]+d[od[i]]; &#125; </div><div class="line">	xep(I,Q) &#123; </div><div class="line">         in(c),in(a),in(b); </div><div class="line">		a=(a+as)%A, b=(b+as)%A; <span class="keyword">if</span>(a&gt;b) swap(a,b); </div><div class="line">		as=query(c,fd(b))-query(c,fd(a<span class="number">-1</span>)); </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,as); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个数据结构题， 有不优美的动态点分治做法和写起来比动态点分治还长的树链剖分+可持久化线段树做法。&lt;/p&gt;
&lt;p&gt;思维难度： &lt;del&gt;没有？&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;就是代码题喽。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://shallwe.ga/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="树链剖分" scheme="http://shallwe.ga/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
      <category term="可持久化数据结构" scheme="http://shallwe.ga/tags/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="动态点分治" scheme="http://shallwe.ga/tags/%E5%8A%A8%E6%80%81%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 4011】[HNOI2015]落忆枫音</title>
    <link href="http://shallwe.ga/bzoj4011/"/>
    <id>http://shallwe.ga/bzoj4011/</id>
    <published>2017-05-01T01:38:57.000Z</published>
    <updated>2017-05-01T02:20:44.633Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这个题目感觉还是比较奇妙的， 虽然难度<del>不是很大</del></p>
<p>做法主要还是一个拓扑图上的dp， 因为新图只是在原图（有向无环图）上添加了一条边， 所以做法肯定还是从有向无环图中拓展出来的。</p>
<p>比较重要的一个idea就是<span class="math inline">\(\text{ans}=\text{sum}-\text{illegal}\)</span></p>
</blockquote>
<a id="more"></a>
<h1 id="题目链接"><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4011" target="_blank" rel="external">题目链接</a></h1>
<h1 id="题目大意">题目大意</h1>
<p>在一个有向无环图上添加一条边， 问新图以<span class="math inline">\(1\)</span>为根的有向生成树的个数。</p>
<h1 id="解题报告">解题报告</h1>
<p>如果没有新加入的一条边， 那么原图（一个有向无环图）的有向生成树的个数为除点<span class="math inline">\(1\)</span>外所有点的入度的乘积, 记为<span class="math inline">\(\text{sum}\)</span>。</p>
<p>新加入一条边，如果这条边是<span class="math inline">\(x \rightarrow 1\)</span> 的形式， 那么显然这个对答案没有影响<sub>(≧▽≦)/</sub>啦啦啦</p>
<p>否则， 按照之前的方式算出了的答案， 其中有一部分是带环的， 并且<span class="math inline">\(x \rightarrow y\)</span>是这个方案中的边 。</p>
<p>考虑统计过气答案中的不合法方案， 可以发现 ，不合法的方案中<span class="math inline">\(y\)</span>点的入边选择的是<span class="math inline">\(x \rightarrow y\)</span> , 如果这个方案中， 存在<span class="math inline">\(y \rightarrow x\)</span>的路径， 那么就存在一个环。</p>
<p>如果<span class="math inline">\(S_{y \rightarrow x}\)</span>表示一条<span class="math inline">\(y \rightarrow x\)</span>的一条路径， 不合法方案数是<span class="math inline">\(\sum_{S_{y \rightarrow x}}\prod_{u\notin S}degree_u\)</span></p>
<p>令<span class="math inline">\(f[x]\)</span>表示<span class="math inline">\(\sum_{S_{y \rightarrow x}}\prod_{u \notin S} \text{degree}_u\)</span>， 只需要令<span class="math inline">\(\prod_{S_{y \rightarrow x}} \text{degree}_u = \frac{sum}{\prod_{u \in S} \text{degree}_u}\)</span> ,就非常好转移了。</p>
<p>最终的<span class="math inline">\(\text{ans}=\text{sum}-f[x]\)</span> .</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">1000000007</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> nxt,to; edge(<span class="keyword">int</span> nxt=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>) </div><div class="line">        :nxt(nxt),to(to)&#123;&#125;</div><div class="line">&#125; e[N&lt;&lt;<span class="number">1</span>]; </div><div class="line"><span class="keyword">int</span> inv[N],n,m,hed[N],tot,in[N],x,y; ll as=<span class="number">1</span>; </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123; </div><div class="line">    <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">    <span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">    <span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">    x*=f; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">    e[++tot]=edge(hed[x],y),++in[y],hed[x]=tot; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; </div><div class="line">    inv[<span class="number">1</span>]=<span class="number">1</span>; rep(i,<span class="number">2</span>,n) inv[i]=p<span class="number">-1l</span>l*(p/i)*inv[p%i]%p;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">topo</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; q.push(<span class="number">1</span>); <span class="keyword">int</span> o,nx;  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> _in[N],f[N]; f[y]=as;  </div><div class="line">    rep(i,<span class="number">1</span>,n) _in[i]=in[i]; --_in[y]; </div><div class="line">    <span class="keyword">while</span> (!q.empty()) &#123; </div><div class="line">        o=q.front(); q.pop();  </div><div class="line">        f[o]=<span class="number">1l</span>l*f[o]*inv[in[o]]%p; </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=hed[o];i;i=e[i].nxt) </div><div class="line">            <span class="keyword">if</span> (nx=e[i].to, _in[nx]) &#123; </div><div class="line">                f[nx]=(f[nx]+f[o])%p;</div><div class="line">                --_in[nx]; <span class="keyword">if</span> (!_in[nx]) q.push(nx); </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">    as=as-f[x]; <span class="keyword">if</span> (as&lt;<span class="number">0</span>) as+=p;  </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    read(n),read(m),read(x),read(y); <span class="keyword">int</span> a,b;  </div><div class="line">    xep(i,m) read(a),read(b),add(a,b); </div><div class="line">    ++in[y]; </div><div class="line">    rep(i,<span class="number">2</span>,n) as=as*in[i]%p; </div><div class="line">    <span class="keyword">if</span> (y==<span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,as),<span class="number">0</span>; </div><div class="line">    init(), topo(); </div><div class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,as),<span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个题目感觉还是比较奇妙的， 虽然难度&lt;del&gt;不是很大&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;做法主要还是一个拓扑图上的dp， 因为新图只是在原图（有向无环图）上添加了一条边， 所以做法肯定还是从有向无环图中拓展出来的。&lt;/p&gt;
&lt;p&gt;比较重要的一个idea就是&lt;span class=&quot;math inline&quot;&gt;\(\text{ans}=\text{sum}-\text{illegal}\)&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="动态规划" scheme="http://shallwe.ga/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="dp" scheme="http://shallwe.ga/tags/dp/"/>
    
      <category term="拓扑排序" scheme="http://shallwe.ga/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 3995】[SDOI2015]道路修建</title>
    <link href="http://shallwe.ga/bzoj3995/"/>
    <id>http://shallwe.ga/bzoj3995/</id>
    <published>2017-04-29T16:41:47.000Z</published>
    <updated>2017-04-29T17:38:50.237Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>应该算是比较丝薄无味的一个题目， 按照题目诞生的时间推断， 出题人应该是借鉴了SHOI2008的堵塞的交通，并且难度还降低了。</p>
<p>简单的来说， 是线段树维护连通性的裸题。</p>
</blockquote>
<a id="more"></a>
<h1 id="题目链接"><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3995" target="_blank" rel="external">题目链接</a></h1>
<h1 id="题目大意">题目大意</h1>
<p>维护两行点的区间最小生成树？ 支持修改边权的操作。</p>
<h1 id="解题报告">解题报告</h1>
<p>因为只有两行点么， 所以可以把同一列的两个点当做线段树上的一个节点。</p>
<p>维护四个信息， 对于区间<span class="math inline">\([l,r]\)</span>, 分别表示：</p>
<ol style="list-style-type: decimal">
<li><code>as[l,r]</code> : <span class="math inline">\([l,r]\)</span>之间的<span class="math inline">\(2(r-l+1)\)</span>个的的最小生成树；</li>
<li><code>ls[l,r]</code> : <span class="math inline">\([l,r]\)</span>之间， 第<span class="math inline">\(l\)</span>行的两个点不联通， 形成两个联通块的最小代价；</li>
<li><code>rs[l,r]</code> : <span class="math inline">\([l,r]\)</span>之间， 第<span class="math inline">\(r\)</span>行的两个点不连通， 形成两个联通块的最小代价；</li>
<li><code>ts[l,r]</code> : <span class="math inline">\([l,r]\)</span>之间， 第<span class="math inline">\(l\)</span>行的两个点不连通， 第<span class="math inline">\(r\)</span>行的两个点不连通， 形成三个联通块的最小代价。</li>
</ol>
<p>通过手动的讨论， 可以得到合并两个区间的转移：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">cmin(x.as,l.as+r.as+a); </div><div class="line">cmin(x.as,l.rs+r.as+a+b); </div><div class="line">cmin(x.as,l.as+r.ls+a+b); </div><div class="line">cmin(x.ls,l.ls+r.as+a); </div><div class="line">cmin(x.ls,l.ls+r.ls+a+b); </div><div class="line">cmin(x.ls,l.ts+r.as+a+b); </div><div class="line">cmin(x.rs,l.as+r.rs+a); </div><div class="line">cmin(x.rs,l.rs+r.rs+a+b); </div><div class="line">cmin(x.rs,l.as+r.ts+a+b); </div><div class="line">cmin(x.ts,l.ls+r.rs+a); </div><div class="line">cmin(x.ts,l.ls+r.ts+a+b); </div><div class="line">cmin(x.ts,l.ts+r.rs+a+b);</div></pre></td></tr></table></figure>
<p>奇怪的是， 这个题目就这样完结了。。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">60010</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">500000000</span>; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> n,m,lo[N],lw[N],c[N]; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">four</span> &#123;</span> </div><div class="line">    <span class="keyword">int</span> as, ls, rs, ts; </div><div class="line">    four() &#123;as=ls=ts=ts=inf;&#125;</div><div class="line">    four(<span class="keyword">int</span> as,<span class="keyword">int</span> ls,<span class="keyword">int</span> rs,<span class="keyword">int</span> ts) </div><div class="line">        : as(as),ls(ls),rs(rs),ts(ts)&#123;&#125;</div><div class="line">&#125; s[N&lt;&lt;<span class="number">2</span>]; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">    <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">    <span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">    <span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">    x*=f; </div><div class="line">&#125; </div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(T &amp;x,T a)</span></span>&#123;x=a&lt;x?a:x;&#125;</div><div class="line"><span class="function">four <span class="title">merge</span><span class="params">(four l, four r,<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (a&gt;b) swap(a,b) ; </div><div class="line">    <span class="function">four <span class="title">x</span><span class="params">(inf,inf,inf,inf)</span></span>; </div><div class="line">    cmin(x.as,l.as+r.as+a); </div><div class="line">    cmin(x.as,l.rs+r.as+a+b); </div><div class="line">    cmin(x.as,l.as+r.ls+a+b); </div><div class="line">    cmin(x.ls,l.ls+r.as+a); </div><div class="line">    cmin(x.ls,l.ls+r.ls+a+b); </div><div class="line">    cmin(x.ls,l.ts+r.as+a+b); </div><div class="line">    cmin(x.rs,l.as+r.rs+a); </div><div class="line">    cmin(x.rs,l.rs+r.rs+a+b); </div><div class="line">    cmin(x.rs,l.as+r.ts+a+b); </div><div class="line">    cmin(x.ts,l.ls+r.rs+a); </div><div class="line">    cmin(x.ts,l.ls+r.ts+a+b); </div><div class="line">    cmin(x.ts,l.ts+r.rs+a+b); </div><div class="line">    <span class="keyword">return</span> x; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (l==r) &#123; s[x]=four(c[l],<span class="number">0</span>,<span class="number">0</span>,inf);&#125; </div><div class="line">    <span class="keyword">else</span> &#123; <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">        build(x&lt;&lt;<span class="number">1</span>, l, mid); </div><div class="line">        build(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r); </div><div class="line">        s[x]=merge(s[x&lt;&lt;<span class="number">1</span>],s[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],lo[mid],lw[mid]); </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (l==r) &#123; s[x]=four(c[l],<span class="number">0</span>,<span class="number">0</span>,inf);&#125;</div><div class="line">    <span class="keyword">else</span> &#123; <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">         <span class="keyword">if</span> (p&lt;=mid) change(x&lt;&lt;<span class="number">1</span>,l,mid,p); </div><div class="line">         <span class="keyword">else</span> change(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,p); </div><div class="line">         s[x]=merge(s[x&lt;&lt;<span class="number">1</span>],s[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],lo[mid],lw[mid]); </div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> p)</span> </span>&#123; </div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; <span class="keyword">if</span> (mid==p) &#123; </div><div class="line">        s[x]=merge(s[x&lt;&lt;<span class="number">1</span>],s[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],lo[mid],lw[mid]); </div><div class="line">        <span class="keyword">return</span> ; </div><div class="line">    &#125; <span class="keyword">else</span> &#123; </div><div class="line">        <span class="keyword">if</span> (l==r) <span class="keyword">return</span> ;</div><div class="line">        <span class="keyword">if</span> (p&lt;=mid) modify(x&lt;&lt;<span class="number">1</span>,l,mid,p); </div><div class="line">        <span class="keyword">else</span> modify(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,p); </div><div class="line">        s[x]=merge(s[x&lt;&lt;<span class="number">1</span>],s[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],lo[mid],lw[mid]); </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"><span class="function">four <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> _l,<span class="keyword">int</span> _r)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (_l&lt;=l&amp;&amp;r&lt;=_r) <span class="keyword">return</span> s[x]; </div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">    <span class="keyword">if</span> (_r&lt;=mid) <span class="keyword">return</span> query(x&lt;&lt;<span class="number">1</span>,l,mid,_l,_r); </div><div class="line">    <span class="keyword">if</span> (_l&gt;mid) <span class="keyword">return</span> query(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,_l,_r); </div><div class="line">    <span class="keyword">return</span> merge(query(x&lt;&lt;<span class="number">1</span>,l,mid,_l,_r),</div><div class="line">        query(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,_l,_r),lo[mid],lw[mid]); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    in(n),in(m); </div><div class="line">    rep(i,<span class="number">1</span>,n<span class="number">-1</span>) in(lo[i]); rep(i,<span class="number">1</span>,n<span class="number">-1</span>) in(lw[i]); </div><div class="line">    rep(i,<span class="number">1</span>,n) in(c[i]); build(<span class="number">1</span>,<span class="number">1</span>,n); </div><div class="line">    <span class="keyword">char</span> tp[<span class="number">10</span>]; <span class="keyword">int</span> l,r,_l,_r,w; four an;  </div><div class="line">    xep(I, m) &#123; <span class="built_in">scanf</span>(<span class="string">"%s"</span>, tp); </div><div class="line">        <span class="keyword">if</span> (tp[<span class="number">0</span>]==<span class="string">'C'</span>) &#123; </div><div class="line">            in(l),in(r),in(_l),in(_r),in(w); </div><div class="line">            <span class="keyword">if</span> (r==_r) c[r]=w, change(<span class="number">1</span>,<span class="number">1</span>,n,r); </div><div class="line">            <span class="keyword">else</span> &#123; <span class="keyword">if</span> (r&gt;_r) swap(r,_r); </div><div class="line">                <span class="keyword">if</span> (l==<span class="number">1</span>) lo[r]=w; <span class="keyword">else</span> lw[r]=w; </div><div class="line">                modify(<span class="number">1</span>,<span class="number">1</span>,n,r);</div><div class="line">            &#125; </div><div class="line">        &#125; <span class="keyword">else</span> &#123; </div><div class="line">            in(l),in(r), an=query(<span class="number">1</span>,<span class="number">1</span>,n,l,r); </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, an.as); </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;应该算是比较丝薄无味的一个题目， 按照题目诞生的时间推断， 出题人应该是借鉴了SHOI2008的堵塞的交通，并且难度还降低了。&lt;/p&gt;
&lt;p&gt;简单的来说， 是线段树维护连通性的裸题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://shallwe.ga/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="线段树" scheme="http://shallwe.ga/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 3742】Painting</title>
    <link href="http://shallwe.ga/bzoj3742/"/>
    <id>http://shallwe.ga/bzoj3742/</id>
    <published>2017-04-29T13:00:00.000Z</published>
    <updated>2017-04-29T15:57:50.884Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>一道国家集训队好几年前的互测题， 现场似乎被当做送分题？ 我是在XYM屠历年集训队题目的时候发现自己碰巧会做？</p>
<p>想我这样的菜鸡， 肯定只是碰巧好吧。 而且看我的常数那么大， 一定是人傻QWQ</p>
</blockquote>
<a id="more"></a>
<h1 id="题目链接"><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3742" target="_blank" rel="external">题目链接</a></h1>
<h1 id="题目大意">题目大意</h1>
<p>给出一颗<span class="math inline">\(n\)</span>个节点的树，要给每一条边染一个<span class="math inline">\(1\)</span>~<span class="math inline">\((n-1)\)</span>的颜色，染颜色<span class="math inline">\(i\)</span>的代价为<span class="math inline">\(i\)</span>，要求同一个节点连出的所有边所染颜色都互不相同，求一个为整棵树染色的方案，使得代价之和尽量小。</p>
<h1 id="解题报告">解题报告</h1>
<p>先考虑设计状态， 令<span class="math inline">\(f[x][i]\)</span>表示与<span class="math inline">\(x\)</span>相连的边不能染<span class="math inline">\(i\)</span>这个颜色， <span class="math inline">\(x\)</span>的子树中的最小代价。</p>
<p>考虑从子节点向父亲节点进行转移， 那么可以枚举父亲节点与爷爷节点的边的颜色，然后是把<span class="math inline">\(1\)</span>~<span class="math inline">\((n-1)\)</span>这些颜色分配给儿子节点， 每个颜色只能使用一次， 颜色本身和颜色对应每个儿子有各自的代价， 这个转移是相当复杂的。</p>
<p>但仔细想一下哈， 这么强的限制竟然极其类似二分图的最大权匹配， 所以可以使用费用流或者KM这类的进行转移。</p>
<p>具体的， <span class="math inline">\(S\)</span>向每种颜色<span class="math inline">\(i\)</span>连流量<span class="math inline">\(1\)</span>, 费用<span class="math inline">\(i\)</span>的边, 每种颜色向每个儿子<span class="math inline">\(y\)</span>连流量<span class="math inline">\(1\)</span>, 费用<span class="math inline">\(f[y][i]\)</span>的边， 每个儿子向<span class="math inline">\(T\)</span>连流量<span class="math inline">\(1\)</span>， 费用<span class="math inline">\(0\)</span>的边。</p>
<p>然后这个题就在时限内解决了。。</p>
<p>后记： 写代码的时候大脑一热， 从网上找了一个zkw费用流的板子膜敲了一遍， 发现各种慢慢慢。。 以后还是老老实实spfa费用流（单增广）吧。</p>
<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line">#include &lt;bits/stdc++.h&gt; </div><div class="line"> </div><div class="line">using namespace std;</div><div class="line"> </div><div class="line">#define rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </div><div class="line">#define REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </div><div class="line">#define VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </div><div class="line"> </div><div class="line">const int N=200; </div><div class="line">const int inf=1000000000; </div><div class="line"> </div><div class="line">struct edge &#123; </div><div class="line">    int nxt,to; edge(int nxt=0,int to=0)</div><div class="line">        :nxt(nxt),to(to) &#123;&#125;</div><div class="line">&#125; e[N&lt;&lt;1]; </div><div class="line"> </div><div class="line">int n, f[N][N],tot,hed[N],da[N];</div><div class="line"> </div><div class="line">inline void add(int x,int y) &#123;</div><div class="line">    e[++tot]=edge(hed[x],y),hed[x]=tot; </div><div class="line">&#125; </div><div class="line"> </div><div class="line">namespace cst &#123; </div><div class="line">    struct edge &#123; </div><div class="line">        int nxt,to,f,c; edge() &#123;nxt=to=f=c=0;&#125;</div><div class="line">        edge(int nxt,int to,int f,int c)</div><div class="line">        :nxt(nxt),to(to),f(f),c(c)&#123;&#125;</div><div class="line">    &#125; e[N*N*4]; </div><div class="line">    int S,T,tot,hed[N*2],d[N*2],cst,piS; </div><div class="line">    deque&lt;int&gt; q; bool v[N*20]; </div><div class="line">    void clean() &#123;  </div><div class="line">        REP(i,0,tot) e[i]=edge(); </div><div class="line">        REP(i,0,N+N) hed[i]=0; </div><div class="line">        tot=1,cst=0,piS=0; </div><div class="line">    &#125; </div><div class="line">    void add(int x,int y,int f,int c) &#123; </div><div class="line">        e[++tot]=edge(hed[x],y,f,c), hed[x]=tot; </div><div class="line">        e[++tot]=edge(hed[y],x,0,-c), hed[y]=tot; </div><div class="line">    &#125;</div><div class="line">    bool label() &#123; </div><div class="line">        REP(i,S,T) d[i]=inf; d[T]=0,q.push_back(T);</div><div class="line">        int x,y,dt;</div><div class="line">        while (q.size()) &#123; x=q.front(); q.pop_front(); </div><div class="line">            for (int i=hed[x];i;i=e[i].nxt)</div><div class="line">                if (y=e[i].to,e[i^1].f&amp;&amp;(dt=d[x]-e[i].c)&lt;d[y])</div><div class="line">                    d[y]=dt, d[y]&lt;=(q.size()?d[q.front()]:0)</div><div class="line">                    ? q.push_front(y): q.push_back(y); </div><div class="line">        &#125;</div><div class="line">        REP(i,S,T) for(int j=hed[i];j;j=e[j].nxt) </div><div class="line">            e[j].c+=d[e[j].to]-d[i]; </div><div class="line">        piS+=d[S]; </div><div class="line">        return d[S]&lt;inf; </div><div class="line">    &#125; </div><div class="line">    bool dfs(int x,int lm) &#123; int l=lm,y,f; </div><div class="line">        v[x]=1; </div><div class="line">        if (x==T) return cst+=lm*piS,lm; </div><div class="line">        for (int i=hed[x];i;i=e[i].nxt)</div><div class="line">            if(y=e[i].to, e[i].f&amp;&amp;!v[y]&amp;&amp;!e[i].c) &#123; </div><div class="line">                f=dfs(y,e[i].f&lt;l?e[i].f:l),e[i].f-=f,e[i^1].f+=f; </div><div class="line">                l-=f; if (!l) return lm; </div><div class="line">            &#125; </div><div class="line">        return lm-l; </div><div class="line">    &#125; </div><div class="line">    int mcmf() &#123; </div><div class="line">        while (label()) do</div><div class="line">            REP(i,S,T) v[i]=0; </div><div class="line">        while (dfs(S,inf)); </div><div class="line">        return cst; </div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line">void who_s_your_daddy(int x,int fa) &#123; </div><div class="line">    da[x]=fa; int y; for(int i=hed[x];i;i=e[i].nxt) </div><div class="line">        if (y=e[i].to, y!=fa) who_s_your_daddy(y,x); </div><div class="line">&#125; </div><div class="line">int dfs(int x, int ba) &#123;</div><div class="line">    if (f[x][ba]!=-1) return f[x][ba]; </div><div class="line">    int y,ct=0; </div><div class="line">    for (int i=hed[x];i;i=e[i].nxt)</div><div class="line">        if (y=e[i].to, y!=da[x]) &#123; ++ct;  </div><div class="line">            for (int j=1;j&lt;n;++j) if (j!=ba) dfs(y,j); </div><div class="line">        &#125;</div><div class="line">    if (ct==0) return f[x][ba]=0; </div><div class="line">    cst::clean();   </div><div class="line">    cst::S=0,cst::T=n+ct; REP(i,1,n-1) </div><div class="line">        if (i!=ba) cst::add(cst::S,i,1,i); </div><div class="line">    ct=n-1; for (int i=hed[x];i;i=e[i].nxt) </div><div class="line">        if (y=e[i].to, y!=da[x]) &#123; ++ct; </div><div class="line">            for (int j=1; j&lt;n; ++j) if (j!=ba) </div><div class="line">                cst::add(j,ct,1,f[y][j]); </div><div class="line">            cst::add(ct,cst::T,1,0); </div><div class="line">        &#125; </div><div class="line">    f[x][ba]=cst::mcmf(); </div><div class="line">    return f[x][ba]; </div><div class="line">&#125; </div><div class="line">int main() &#123; </div><div class="line">    scanf("%d",&amp;n); </div><div class="line">    memset(f,-1,sizeof(f)); </div><div class="line">    rep(i,n-1) &#123; int x, y; scanf("%d%d",&amp;x,&amp;y); </div><div class="line">        add(x,y), add(y,x); </div><div class="line">    &#125; </div><div class="line">    who_s_your_daddy(1,0); </div><div class="line">    printf("%d\n",dfs(1,n)); </div><div class="line">    return 0; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一道国家集训队好几年前的互测题， 现场似乎被当做送分题？ 我是在XYM屠历年集训队题目的时候发现自己碰巧会做？&lt;/p&gt;
&lt;p&gt;想我这样的菜鸡， 肯定只是碰巧好吧。 而且看我的常数那么大， 一定是人傻QWQ&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="动态规划" scheme="http://shallwe.ga/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="dp" scheme="http://shallwe.ga/tags/dp/"/>
    
      <category term="费用流" scheme="http://shallwe.ga/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 4569】[Scoi2016]萌萌哒</title>
    <link href="http://shallwe.ga/bzoj4569/"/>
    <id>http://shallwe.ga/bzoj4569/</id>
    <published>2017-03-18T13:34:58.000Z</published>
    <updated>2017-04-25T03:25:05.835Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>SCOI2016Day1 第三道</p>
</blockquote>
<a id="more"></a>
<h1 id="题目链接"><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4569" target="_blank" rel="external">题目链接</a></h1>
<h1 id="题目大意">题目大意</h1>
<p>若干条件， 每次要求<span class="math inline">\(k \in [l,r]\)</span> , <span class="math inline">\(a_k=a_{ll+k-l}\)</span> , 求多少不存在前导零的大整数满足这些条件。</p>
<h1 id="解题报告">解题报告</h1>
<p>首先暴力的方法是每次用并查集暴力合并每个位置，考虑优化， 开始想到的是用线段树优化，但是涉及两个区间，不容易处理， 但是用ST表， 对于<span class="math inline">\(f[i][j]\)</span>, 也就是从位置<span class="math inline">\(i\)</span>开始的长度为<span class="math inline">\(2^j\)</span>的区间维护并查集信息，每次添加条件， 只需要找到指定的<span class="math inline">\(j\)</span>, 进行两次并查集合并。</p>
<p>最终的答案是<span class="math inline">\(2^{c-1} \times 9\)</span> , 其中<span class="math inline">\(c\)</span>是<span class="math inline">\(j=0\)</span>的并查集中联通块数。</p>
<p>在统计答案之前，进行标记的下方，也就是<span class="math inline">\(f[i][j] \rightarrow f[i][j-1]/f[i+(1&lt;&lt;j-1)][j-1]\)</span> ;</p>
<p>总的复杂度是<span class="math inline">\(O(m+n\log{n})\)</span>.</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">1000000007</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100100</span>; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> f[<span class="number">20</span>][N],n,m,tw[N]; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">    <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">    <span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">    <span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">    x*=f; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">if</span> (f[o][x]!=x) </div><div class="line">    f[o][x]=find(o,f[o][x]); <span class="keyword">return</span> f[o][x]; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">    x=find(o,x), y=find(o,y); <span class="keyword">if</span>(x!=y) f[o][x]=y; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    in(n),in(m),tw[<span class="number">1</span>]=<span class="number">0</span>; </div><div class="line">    rep(i,<span class="number">2</span>,n) tw[i]=tw[i/<span class="number">2</span>]+<span class="number">1</span>; </div><div class="line">    rep(i,<span class="number">0</span>,tw[n]) rep(j,<span class="number">1</span>,n-(<span class="number">1</span>&lt;&lt;i)+<span class="number">1</span>) f[i][j]=j; </div><div class="line">    <span class="keyword">int</span> l,r,_l,_r,o; </div><div class="line">    xep(I,m) &#123; in(l), in(r),in(_l),in(_r),o=tw[r-l+<span class="number">1</span>];</div><div class="line">        merge(o,l,_l), merge(o,r-(<span class="number">1</span>&lt;&lt;o)+<span class="number">1</span>,_r-(<span class="number">1</span>&lt;&lt;o)+<span class="number">1</span>); </div><div class="line">    &#125; </div><div class="line">    vep(i,tw[n],<span class="number">1</span>) rep(j,<span class="number">1</span>,n-(<span class="number">1</span>&lt;&lt;i)+<span class="number">1</span>) &#123; </div><div class="line">        <span class="keyword">int</span> rt=find(i,j); <span class="keyword">if</span> (j!=rt) </div><div class="line">            merge(i<span class="number">-1</span>,j,rt), merge(i<span class="number">-1</span>,j+(<span class="number">1</span>&lt;&lt;i<span class="number">-1</span>),rt+(<span class="number">1</span>&lt;&lt;i<span class="number">-1</span>)); </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>, as=<span class="number">9</span>; </div><div class="line">    rep(i,<span class="number">1</span>,n) <span class="keyword">if</span> (find(<span class="number">0</span>,i)==i) ++cnt; </div><div class="line">    xep(i,cnt<span class="number">-1</span>) as=<span class="number">1l</span>l*as*<span class="number">10</span>%p; </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, as); </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;SCOI2016Day1 第三道&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://shallwe.ga/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="并查集" scheme="http://shallwe.ga/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="ST表" scheme="http://shallwe.ga/tags/ST%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 4568】[Scoi2016]幸运数字</title>
    <link href="http://shallwe.ga/bzoj4568/"/>
    <id>http://shallwe.ga/bzoj4568/</id>
    <published>2017-03-18T12:59:30.000Z</published>
    <updated>2017-04-25T03:25:08.053Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>SCOI2016Day1 第二道</p>
</blockquote>
<a id="more"></a>
<h1 id="题目链接"><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4568" target="_blank" rel="external">题目链接</a></h1>
<h1 id="题目大意">题目大意</h1>
<p>每个点上有一个权值，多次查询一条路径每个点任意选</p>
<h1 id="解题报告">解题报告</h1>
<p>首先，每个点任意选或不选的最大异或和是线性基的裸题，所以考虑将一条路径的线性基合并；</p>
<p>这个显然可以使用动态点分治完成， 记录每个点到点分树上的每个祖先的路径线性基(空间复杂度<span class="math inline">\(O(n\log{n}\log{X})\)</span>), 预处理的时间是<span class="math inline">\(O(n\log{n}\log{X})\)</span>, 查询的时候通过<span class="math inline">\(O(\log{n})\)</span>确定路径在点分树上的<code>lca</code>, 然后在<code>lca</code>(也就是一个重心处）将两个线性基合并， 复杂度是<span class="math inline">\(O(q\times(\log{n}+\log^2{p}))\)</span> .</p>
<p>然而我却使用了一个复杂度非常烂的算法（写的时候以为是一样的。。。） ， 倍增+线性基合并。</p>
<p>首先预处理的时候需要做<span class="math inline">\(O(n\log{n}\log^2{X})\)</span>, 因为线性基的合并是<span class="math inline">\(O(\log^2{P})\)</span>的。</p>
<p>查询的时候我更加愚蠢的跳了<span class="math inline">\(\log{n}\)</span>次， 每次都合并了线性基。。所以复杂度是<span class="math inline">\(O(q\times\log{n}\log^2{X})\)</span> .</p>
<p>然后竟然还过了。。艹？</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> W(x,w) (((x)&gt;&gt;w)&amp;1)</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">20010</span>; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">base</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> c; ll a[<span class="number">65</span>]; base() &#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a)),c=<span class="number">0</span>;&#125;; </div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(ll x)</span> </span>&#123; </div><div class="line">		vep(i,<span class="number">60</span>,<span class="number">0</span>) <span class="keyword">if</span> (W(x,i)) &#123; </div><div class="line">			<span class="keyword">if</span> (!a[i]) &#123; ++c,a[i]=x; <span class="keyword">break</span>;&#125; </div><div class="line">			<span class="keyword">else</span> &#123; x^=a[i]; <span class="keyword">if</span> (!x) <span class="keyword">break</span>;&#125; </div><div class="line">		&#125; </div><div class="line">	&#125; </div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; </div><div class="line">		<span class="built_in">cout</span>&lt;&lt;c&lt;&lt;<span class="string">":"</span>&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">		vep(i,<span class="number">60</span>,<span class="number">0</span>) <span class="keyword">if</span> (a[i]) <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">":"</span>&lt;&lt;a[i]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">	&#125; </div><div class="line">&#125; b[N][<span class="number">16</span>]; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> nxt,to; edge(<span class="keyword">int</span> nxt=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>) </div><div class="line">		:nxt(nxt),to(to) &#123;&#125;</div><div class="line">&#125; e[N&lt;&lt;<span class="number">1</span>]; </div><div class="line"><span class="keyword">int</span> n,q,hed[N],f[N][<span class="number">16</span>],tot,de[N]; ll g[N];</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(T &amp;x)</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">	x*=f; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">	e[++tot]=edge(hed[x],y),hed[x]=tot; </div><div class="line">&#125; </div><div class="line"><span class="function">base <span class="title">merge</span><span class="params">(base x, base y)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (x.c&gt;y.c) swap(x,y); </div><div class="line">	xep(i, <span class="number">61</span>) <span class="keyword">if</span> (x.a[i]) y.ins(x.a[i]); </div><div class="line">	<span class="keyword">return</span> y; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	b[x][<span class="number">0</span>].ins(g[x]); de[x]=de[f[x][<span class="number">0</span>]]+<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;f[x][i];++i) &#123; </div><div class="line">		f[x][i+<span class="number">1</span>]=f[f[x][i]][i]; </div><div class="line">		b[x][i+<span class="number">1</span>]=merge(b[x][i],b[f[x][i]][i]); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">int</span> y; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt) </div><div class="line">		<span class="keyword">if</span> (y=e[i].to, y!=f[x][<span class="number">0</span>])  </div><div class="line">			f[y][<span class="number">0</span>]=x,build(y); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (de[x]&lt;de[y]) swap(x,y); </div><div class="line">	base as; <span class="keyword">int</span> dta=de[x]-de[y];</div><div class="line">	vep(i,<span class="number">14</span>,<span class="number">0</span>) <span class="keyword">if</span> (W(dta,i)) </div><div class="line">		as=merge(as, b[x][i]), x=f[x][i]; </div><div class="line">	<span class="keyword">if</span> (x!=y) &#123; </div><div class="line">		vep(i,<span class="number">14</span>,<span class="number">0</span>) <span class="keyword">if</span> (f[x][i]!=f[y][i]) &#123;  </div><div class="line">			as=merge(as, b[x][i]), as=merge(as, b[y][i]); </div><div class="line">			x=f[x][i], y=f[y][i]; </div><div class="line">		&#125;</div><div class="line">		as=merge(as,b[x][<span class="number">0</span>]), as=merge(as,b[y][<span class="number">0</span>]); </div><div class="line">		x=f[x][<span class="number">0</span>], y=f[y][<span class="number">0</span>];</div><div class="line">	&#125;</div><div class="line">	as=merge(as,b[x][<span class="number">0</span>]); </div><div class="line">	ll ans=<span class="number">0</span>; </div><div class="line">	vep(i,<span class="number">60</span>,<span class="number">0</span>) <span class="keyword">if</span> ((ans^as.a[i])&gt;ans) </div><div class="line">		ans=ans^as.a[i]; </div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans); </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	in(n), in(q); rep(i,<span class="number">1</span>,n) in(g[i]); <span class="keyword">int</span> x,y;  </div><div class="line">	xep(i,n<span class="number">-1</span>) in(x),in(y),add(x,y),add(y,x); </div><div class="line">	build(<span class="number">1</span>); </div><div class="line">	xep(i,q) &#123; in(x),in(y); query(x,y);&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;SCOI2016Day1 第二道&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://shallwe.ga/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="倍增" scheme="http://shallwe.ga/tags/%E5%80%8D%E5%A2%9E/"/>
    
      <category term="动态点分治" scheme="http://shallwe.ga/tags/%E5%8A%A8%E6%80%81%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
      <category term="线性基" scheme="http://shallwe.ga/tags/%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 4567】[Scoi2016]背单词</title>
    <link href="http://shallwe.ga/bzoj4567/"/>
    <id>http://shallwe.ga/bzoj4567/</id>
    <published>2017-03-18T12:38:18.000Z</published>
    <updated>2017-04-25T03:25:10.938Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>SCOI2016Day1 第一道</p>
</blockquote>
<a id="more"></a>
<h1 id="题目链接"><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4567" target="_blank" rel="external">题目链接</a></h1>
<h1 id="题目大意">题目大意</h1>
<p>这个题目的意思非常的模糊， 读到最后才理解了， 是确定一个字符串的编号，如果存在一个字符串后缀的编号<span class="math inline">\(&gt;\)</span>大于这个字符串，那么要付出<span class="math inline">\(n^2\)</span>的巨额代价，否则有付出编号减去后缀最大编号的代价。</p>
<h1 id="解题报告">解题报告</h1>
<p>首先后缀倒过来就是前缀，可以通过trie树+重建树得到字符串之间的后缀关系。</p>
<p>需要一个结论， 就是因为后缀靠后的代价太高， 显然需要让所有的后缀的编号都小于当前串。</p>
<p>在重构的树上， 有一个可以通过推广得到的结论， 就是编号一定先编完一棵子树再进入另外的一棵子树。</p>
<p>首先题目中“编号减去后缀最大的编号”相当于当前点的编号减去树上父亲节点的编号。</p>
<p>考虑二叉树的情况， 联想到’holidy’那个题目， 如下图(1)(2), 其中第一个图显然更优。</p>
<div class="figure">
<img src="/bzoj4567/1.png">

</div>
<p>在二叉树中，显然先进入较短的一侧可以付出更小的代价， 所以推广到多叉树，先进入<code>size</code>较小的子树代价更小。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">110001</span>; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> nxt,to; edge(<span class="keyword">int</span> nxt=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>) </div><div class="line">		:nxt(nxt),to(to) &#123;&#125;</div><div class="line">&#125; e[N]; </div><div class="line"><span class="keyword">int</span> hed[N],tot,n,sn[N*<span class="number">5</span>][<span class="number">26</span>],na[N*<span class="number">5</span>],cnt=<span class="number">1</span>,rt=<span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> sz[N],rc; <span class="keyword">char</span> s[N*<span class="number">5</span>]; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">	e[++tot]=edge(hed[x],y), hed[x]=tot; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rvs_ins</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> id)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> x=rt,no; vep(i,<span class="built_in">strlen</span>(s)<span class="number">-1</span>,<span class="number">0</span>) &#123; </div><div class="line">		no=s[i]-<span class="string">'a'</span>; <span class="keyword">if</span> (!sn[x][no]) sn[x][no]=++cnt; </div><div class="line">		x=sn[x][no]; <span class="keyword">if</span> (i==<span class="number">0</span>) na[x]=id+<span class="number">1</span>;  </div><div class="line">	&#125; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> f)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (na[x]) add(f,na[x]), f=na[x]; </div><div class="line">	xep(i,<span class="number">26</span>) <span class="keyword">if</span> (sn[x][i]) build(sn[x][i],f); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	sz[x]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt) </div><div class="line">		dfs(e[i].to), sz[x]+=sz[e[i].to]; </div><div class="line">&#125; </div><div class="line"><span class="keyword">int</span> v[N],od[N]; <span class="keyword">long</span> <span class="keyword">long</span> as;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">got</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fm)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (x) v[x]=++rc, as+=v[x]-v[fm]; </div><div class="line">	<span class="built_in">vector</span>&lt;pii&gt; ss; </div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt) </div><div class="line">		ss.push_back(mp(sz[e[i].to],e[i].to)); </div><div class="line">	sort(ss.begin(),ss.end()); </div><div class="line">	xep(i,ss.size()) got(ss[i].second,x); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);  </div><div class="line">	xep(i,n) <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s), rvs_ins(s,i); </div><div class="line">	build(<span class="number">1</span>,<span class="number">0</span>), dfs(<span class="number">0</span>), got(<span class="number">0</span>,<span class="number">-1</span>); </div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,as); </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;SCOI2016Day1 第一道&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="字符串题" scheme="http://shallwe.ga/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98/"/>
    
    
      <category term="贪心" scheme="http://shallwe.ga/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="trie树" scheme="http://shallwe.ga/tags/trie%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>codechef-选做-3</title>
    <link href="http://shallwe.ga/cc3/"/>
    <id>http://shallwe.ga/cc3/</id>
    <published>2017-03-14T05:48:10.000Z</published>
    <updated>2017-04-25T03:24:44.226Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>仍然在做CC中简单一点的题目</p>
</blockquote>
<a id="more"></a>
<h1 id="cc-gerald07chef-and-graph-queries">【CC GERALD07】Chef and Graph Queries</h1>
<h2 id="题目大意">题目大意</h2>
<p>保留区间<span class="math inline">\([l,r]\)</span>的边，问图的联通块个数。</p>
<h2 id="解题报告">解题报告</h2>
<p>这个题目是一个动态树裸题，结合扫描线+离线。</p>
<p>使用LCT维护一个最大时间生成树，如果当前边相连的两个点是不连通的，那么直接加入当前边， 否则每次查询一条路径的最早加入的边， 删除后再加入当前边。</p>
<p>用一个树状数组维护单点修改区间和，边加入删除的时候在树状数组上也加入删除。</p>
<p>然后联通块数=点数-边数；</p>
<h2 id="代码">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1000000000</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> l,r,id; query(<span class="keyword">int</span> l=<span class="number">0</span>,<span class="keyword">int</span> r=<span class="number">0</span>,<span class="keyword">int</span> id=<span class="number">0</span>):l(l),r(r),id(id)&#123;&#125;</div><div class="line">&#125; qry[N]; </div><div class="line">	</div><div class="line"><span class="keyword">int</span> n,T,m,q,bt[N],as[N]; </div><div class="line">pii pth[N];</div><div class="line"> </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(T &amp;x, T a)</span> </span>&#123; <span class="keyword">if</span> (a&lt;x) x=a; &#125;</div><div class="line"> </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(T &amp;x)</span> </span>&#123; <span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">int</span> f=<span class="number">1</span>; <span class="keyword">for</span>(;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar())<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>; ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) x=x*<span class="number">10</span>+ch<span class="number">-48</span>; x*=f; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">namespace</span> LCT &#123; </div><div class="line">	<span class="keyword">int</span> sn[N*<span class="number">2</span>][<span class="number">2</span>],f[N*<span class="number">2</span>],mn[N*<span class="number">2</span>],v[N*<span class="number">2</span>],rv[N*<span class="number">2</span>]; </div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">birth</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">		sn[x][<span class="number">0</span>]=sn[x][<span class="number">1</span>]=f[x]=rv[x]=<span class="number">0</span>,mn[x]=v[x]=((x&gt;n)?x:INF); </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">inline</span> <span class="keyword">int</span> _d(<span class="keyword">int</span> x) &#123; <span class="keyword">return</span> sn[f[x]][<span class="number">1</span>]==x;&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> !f[x]||(sn[f[x]][<span class="number">0</span>]!=x&amp;&amp;sn[f[x]][<span class="number">1</span>]!=x);&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">		mn[x]=v[x]; </div><div class="line">		<span class="keyword">if</span> (sn[x][<span class="number">0</span>]) cmin(mn[x],mn[sn[x][<span class="number">0</span>]]); </div><div class="line">		<span class="keyword">if</span> (sn[x][<span class="number">1</span>]) cmin(mn[x],mn[sn[x][<span class="number">1</span>]]); </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">inline</span> <span class="keyword">void</span> _rev(<span class="keyword">int</span> x) &#123;</div><div class="line">		<span class="keyword">if</span> (!x) <span class="keyword">return</span>; swap(sn[x][<span class="number">0</span>],sn[x][<span class="number">1</span>]),rv[x]^=<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">		<span class="keyword">if</span> (rv[x]) _rev(sn[x][<span class="number">0</span>]),_rev(sn[x][<span class="number">1</span>]),rv[x]=<span class="number">0</span>; </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	 	<span class="keyword">int</span> y=f[x],d=_d(x),z=f[y]; </div><div class="line">	 	f[x]=z; <span class="keyword">if</span> (!isroot(y)) sn[z][_d(y)]=x; </div><div class="line">	 	<span class="keyword">if</span> (sn[x][d^<span class="number">1</span>])f[sn[x][d^<span class="number">1</span>]]=y; sn[y][d]=sn[x][d^<span class="number">1</span>]; </div><div class="line">	 	sn[x][d^<span class="number">1</span>]=y, f[y]=x, up(y); </div><div class="line">	&#125; </div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	 	<span class="keyword">static</span> <span class="keyword">int</span> stk[N],tp,nw; tp=<span class="number">0</span>,nw=x; </div><div class="line">		<span class="keyword">while</span> (!isroot(nw)) stk[++tp]=nw,nw=f[nw]; </div><div class="line">		stk[++tp]=nw; <span class="keyword">while</span>(tp) down(stk[tp--]);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> y=f[x];!isroot(x);rotate(x),y=f[x])</div><div class="line">			<span class="keyword">if</span> (isroot(y)) <span class="keyword">continue</span>; </div><div class="line">			<span class="keyword">else</span> rotate((_d(y)==_d(x)?y:x)); </div><div class="line">		up(x); </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	 	<span class="keyword">for</span> (<span class="keyword">int</span> r=<span class="number">0</span>;x;r=x,x=f[x])splay(x),sn[x][<span class="number">1</span>]=r; </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mkroot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">		access(x),splay(x),_rev(x); </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">		access(x),splay(x);<span class="keyword">while</span>(sn[x][<span class="number">0</span>])x=sn[x][<span class="number">0</span>];<span class="keyword">return</span> x;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">		mkroot(x),f[x]=y,access(x);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cutf</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">		access(x),splay(x),f[sn[x][<span class="number">0</span>]]=<span class="number">0</span>,sn[x][<span class="number">0</span>]=<span class="number">0</span>,up(x);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">		mkroot(x), cutf(y); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">inline</span> <span class="keyword">int</span> _min(<span class="keyword">int</span> x,<span class="keyword">int</span> y) &#123; </div><div class="line">		mkroot(x),access(y),splay(y);<span class="keyword">return</span> mn[y];</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cnct</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> x!=y&amp;&amp;root(x)==root(y); </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> LCT; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(query a, query b)</span> </span>&#123;<span class="keyword">return</span> a.r&lt;b.r;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span> </span>&#123;<span class="keyword">for</span>(;x&lt;=m;x+=x&amp;(-x))bt[x]+=v;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qury</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> sm=<span class="number">0</span>)</span> </span>&#123;<span class="keyword">for</span>(;x;x-=x&amp;(-x))sm+=bt[x];<span class="keyword">return</span> sm;&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (in(T);T;--T) &#123; </div><div class="line">		in(n),in(m),in(q); <span class="keyword">int</span> x,y,z;</div><div class="line">		REP(i,<span class="number">1</span>,m) in(x),in(y),pth[i]=mp(x,y); </div><div class="line">		REP(i,<span class="number">1</span>,q) in(x),in(y),qry[i]=query(x,y,i); </div><div class="line">		sort(qry+<span class="number">1</span>, qry+<span class="number">1</span>+q, cmp); <span class="keyword">int</span> j=<span class="number">0</span>; </div><div class="line">		REP(i,<span class="number">0</span>,n+m) birth(i);REP(i,<span class="number">0</span>,m)bt[i]=<span class="number">0</span>; </div><div class="line">		REP(i,<span class="number">1</span>,m) &#123; x=pth[i].fi,y=pth[i].se;</div><div class="line">			</div><div class="line">			<span class="keyword">if</span> (cnct(x,y)) &#123; </div><div class="line">				z=_min(x,y); </div><div class="line">				cut(pth[z-n].fi,z),cut(pth[z-n].se,z), add(z-n, <span class="number">-1</span>); </div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (x!=y) link(x,i+n),link(y,i+n),add(i,<span class="number">1</span>); </div><div class="line">			<span class="keyword">if</span> (qry[j+<span class="number">1</span>].r==i) &#123; <span class="keyword">int</span> as2=qury(i),as1; </div><div class="line">				<span class="keyword">while</span> (j&lt;q&amp;&amp;qry[j+<span class="number">1</span>].r==i) </div><div class="line">					as1=qury(qry[++j].l<span class="number">-1</span>),as[qry[j].id]=as2-as1;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		REP(i,<span class="number">1</span>,q) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n-as[i]); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-diftripdifferent-trips">【CC DIFTRIP】Different Trips</h1>
<h2 id="题目大意-1">题目大意</h2>
<p>每个点的权值是度数，问从每个点到根的所有字符串中，本质不同的子串个数。</p>
<h2 id="解题报告-1">解题报告</h2>
<p>就用每个点的度数离散一下， 做了一个后缀自动机， 字符集的大小开的是<span class="math inline">\(\sqrt{n}\)</span>的，因为本质不同的度数最多有<span class="math inline">\(\sqrt{n}\)</span>个，然后果断跑得好慢（<del>比map还慢</del>)</p>
<p>貌似标算是树上的后缀数组。</p>
<p>广义后缀自动机是从这个地方学的： <a href="%22http://dwjshift.logdown.com/posts/304570%22">传送门</a></p>
<h2 id="代码-1">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</div><div class="line"><span class="keyword">int</span> ls[N],rt,ct,sn[N*<span class="number">2</span>][<span class="number">320</span>],pa[N*<span class="number">2</span>],le[N*<span class="number">2</span>],n,hh[N],tt;</div><div class="line">vi nxt[N]; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">birth</span><span class="params">(<span class="keyword">int</span> len,<span class="keyword">int</span> *go,<span class="keyword">int</span> par=<span class="number">0</span>)</span> </span>&#123;</div><div class="line">	++ct, le[ct]=len, pa[ct]=par; </div><div class="line">	<span class="keyword">if</span> (go!=<span class="literal">NULL</span>) REP(i,<span class="number">1</span>,tt) sn[ct][i]=go[i]; </div><div class="line">	<span class="keyword">return</span> ct;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ls)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!hh[x])hh[x]=++tt; x=hh[x];</div><div class="line">	<span class="keyword">int</span> p=ls;  </div><div class="line">	<span class="keyword">if</span> (sn[p][x]&amp;&amp;le[sn[p][x]]==le[p]+<span class="number">1</span>) </div><div class="line">		<span class="keyword">return</span> sn[p][x];</div><div class="line">	<span class="keyword">if</span> (sn[p][x]) &#123;</div><div class="line">		<span class="keyword">int</span> q=sn[p][x],nq=birth(le[p]+<span class="number">1</span>,sn[q],pa[q]); </div><div class="line">		pa[q]=nq; <span class="keyword">while</span>(p&amp;&amp;sn[p][x]==q)sn[p][x]=nq,p=pa[p]; </div><div class="line">		<span class="keyword">return</span> nq; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> np=birth(le[p]+<span class="number">1</span>,<span class="literal">NULL</span>); </div><div class="line">	<span class="keyword">while</span> (p&amp;&amp;!sn[p][x]) sn[p][x]=np,p=pa[p];</div><div class="line">	<span class="keyword">if</span> (!p) pa[np]=rt; <span class="keyword">else</span> &#123; </div><div class="line">		<span class="keyword">int</span> q=sn[p][x]; </div><div class="line">		<span class="keyword">if</span> (le[q]==le[p]+<span class="number">1</span>) pa[np]=q; </div><div class="line">		<span class="keyword">else</span> &#123; 	</div><div class="line">			<span class="keyword">int</span> nq=birth(le[p]+<span class="number">1</span>,sn[q],pa[q]); </div><div class="line">			pa[q]=pa[np]=nq;</div><div class="line">			<span class="keyword">while</span>(p&amp;&amp;sn[p][x]==q)sn[p][x]=nq,p=pa[p];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> np;</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> f)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> sz=(f!=<span class="number">0</span>);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> y:nxt[x])<span class="keyword">if</span>(y!=f)++sz;</div><div class="line">	ls[x]=ins(sz,ls[f]); </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> y:nxt[x])<span class="keyword">if</span>(y!=f)dfs(y,x);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n); <span class="keyword">int</span> x,y;</div><div class="line">	rep(i,n<span class="number">-1</span>) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y),nxt[x].pb(y),nxt[y].pb(x);</div><div class="line">	ls[<span class="number">0</span>]=rt=ct=<span class="number">1</span>, dfs(<span class="number">1</span>,<span class="number">0</span>); ll as=<span class="number">0</span>; </div><div class="line">	REP(i,<span class="number">2</span>,ct) as+=le[i]-le[pa[i]];</div><div class="line">	<span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, as),<span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-evilbookevil-book">【CC EVILBOOK】Evil Book</h1>
<h2 id="题目大意-2">题目大意</h2>
<p>每一个物品可以通过付出<span class="math inline">\(C_i\)</span>的代价得到<span class="math inline">\(M_i\)</span>的收益， 可以通过失去<span class="math inline">\(X\)</span>点收益使某一个物品的<span class="math inline">\(C_i\)</span>和<span class="math inline">\(M_i\)</span>同时<span class="math inline">\(\div 3\)</span> , 问获得<span class="math inline">\(666\)</span>点收益，最少付出多少的代价。</p>
<h2 id="解题报告-2">解题报告</h2>
<p>我竟然是一个连暴力都打不好的蒟蒻。。。</p>
<p>考虑最暴力的求解方法， 枚举每个物品选择的之前进行了多少次的<span class="math inline">\(\div 3\)</span>操作，因为物品的收益和代价都是<span class="math inline">\(\leqslant 10^7\)</span>的， 所以复杂度是<span class="math inline">\((\log_3 10^7)^n\)</span>, （<del>这就有点太暴力了</del>)</p>
<p>优化这个暴力？每个物品的<span class="math inline">\(M\)</span>如果不小于<span class="math inline">\(666*3\)</span>, 那么显然是很多余的（因为我们只需要<span class="math inline">\(666\)</span>), 就可以必要的使用一次<span class="math inline">\(\div 3\)</span>操作；</p>
<p>如果付出的<span class="math inline">\(X\)</span>已经超过了可以获得的<span class="math inline">\(M\)</span>？那就不可能选了对吧。题目中<span class="math inline">\(X\)</span>有一个下界，是<span class="math inline">\(10\)</span>, 可以发现， 如果对<span class="math inline">\(666\)</span>进行<span class="math inline">\(2\)</span>次<span class="math inline">\(\div 3\)</span>操作，那么<span class="math inline">\(2X&gt;666 \div 3^2\)</span>,也就是<span class="math inline">\(M\)</span>消到<span class="math inline">\(666\)</span>后,最多进行<span class="math inline">\(2\)</span>次<span class="math inline">\(\div 3\)</span>操作。</p>
<p>那么一个物品可能进行的<span class="math inline">\(\div 3\)</span>操作数只有四种连续的情况，现在复杂度是<span class="math inline">\(4^n\)</span>了，这就可以过了？ 再顺手加一个最优化剪枝， 最对进行的<span class="math inline">\(\div 3\)</span>操作次数强加一个递增的顺序，就跑得比较快了。</p>
<h2 id="代码-2">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">const</span> ff eps=<span class="number">1e-9</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">21</span>; </div><div class="line"><span class="keyword">int</span> c[N],m[N],n,X,pd[N];</div><div class="line">ff sm,ans;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> us,<span class="keyword">int</span> pre,ff iu,ff hv,ff co)</span></span>&#123;</div><div class="line"><span class="comment">//	cout&lt;&lt;hv&lt;&lt;' '&lt;&lt;co&lt;&lt;endl; </span></div><div class="line">	<span class="keyword">if</span> (hv&gt;<span class="number">666</span>-eps)&#123; ans=min(ans,co); <span class="keyword">return</span>;&#125;</div><div class="line">	<span class="keyword">if</span> (hv+sm/iu&lt;<span class="number">666</span>-eps) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">if</span> (co&gt;ans) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">if</span> (us*X&gt;hv) <span class="keyword">return</span>;</div><div class="line">	REP(i,pre,n) <span class="keyword">if</span> (pd[i]==<span class="number">0</span>&amp;&amp;us*X&lt;m[i]/iu)&#123;</div><div class="line">		pd[i]=<span class="number">1</span>; sm-=m[i];</div><div class="line">		dfs(us,i+<span class="number">1</span>,iu,hv-us*X+m[i]/iu,co+c[i]/iu);</div><div class="line">		pd[i]=<span class="number">0</span>; sm+=m[i];</div><div class="line">	&#125;</div><div class="line">	dfs(us+<span class="number">1</span>,<span class="number">1</span>,iu*<span class="number">3</span>,hv,co);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;X); sm=<span class="number">0</span>;</div><div class="line">	REP(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;c[i],&amp;m[i]), sm+=m[i];</div><div class="line">	<span class="keyword">if</span> (sm&lt;<span class="number">666</span>) &#123; <span class="built_in">puts</span>(<span class="string">"impossible"</span>); <span class="keyword">return</span>;&#125;</div><div class="line">	ans=<span class="number">1e18</span>; dfs(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%.0lf\n"</span>,ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">	<span class="keyword">for</span> (;t;t--) solve();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-leboxeslittle-elephant-and-boxes">【CC LEBOXES】Little Elephant and Boxes</h1>
<h2 id="题目大意-3">题目大意</h2>
<p><span class="math inline">\(n\)</span>个宝箱，每一个宝箱有<span class="math inline">\(p_i/100\)</span>的概率转换成<span class="math inline">\(V_i\)</span>的dollars, 有<span class="math inline">\(1-\frac{p_i}{100}\)</span>的概率转成<span class="math inline">\(1\)</span>个diamond.</p>
<p><span class="math inline">\(m\)</span>个商品，每个需要<span class="math inline">\(C_i\)</span>的dollars和<span class="math inline">\(D_i\)</span>的diamonds.</p>
<p>问聪明至极的情况下， 买到的商品数的期望值。</p>
<h2 id="解题报告-3">解题报告</h2>
<p>首先<span class="math inline">\(n\)</span>的范围十分的精妙，<span class="math inline">\(2^n\)</span>跑不了， <span class="math inline">\(2^{n/2}\)</span>次方没问题， 像极了meet in the middle的数据范围。</p>
<p>虽然dollars的数量级很大，但diamond很小， 考虑让diamond数和买到的商品数做下标， 具体的，<span class="math inline">\(f[i][j]\)</span>表示使用<span class="math inline">\(i\)</span>个钻石，买<span class="math inline">\(j\)</span>个商品，最少需要多少的dollars, 这个可以用O/1背包解决。</p>
<p>对 <span class="math inline">\(2^x\)</span> ， 即前 <span class="math inline">\(x\)</span> 个商品的转换情况进行预处理，得到 <span class="math inline">\(sto_{i,j}(x,y)\)</span> , 表示得到<span class="math inline">\(i\)</span>个钻石和不超过<span class="math inline">\(x\)</span>个dollars，的概率为 <span class="math inline">\(y\)</span> .</p>
<p>对<span class="math inline">\(2^{n-x}\)</span>， 即剩下的商品进行查询， 通过二分+查表， 得到期望值。</p>
<p>复杂度<span class="math inline">\(O(2^x\log 2^x+n^3+2^{n-x} \log 2^x)\)</span></p>
<h2 id="代码-3">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lobo lower_bound</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (x.size()) </span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,ff&gt; pif; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">35</span>; </div><div class="line"><span class="keyword">int</span> les[N][N],T,n,m,B,v[N],c[N],d[N],p[N]; </div><div class="line"><span class="built_in">vector</span>&lt;pif&gt; sto[N]; </div><div class="line">ff as; </div><div class="line"> </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(T &amp;x, T a)</span> </span>&#123;<span class="keyword">if</span> (a&lt;x) x=a;&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> dos,<span class="keyword">int</span> das,ff pr)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (x&gt;B) &#123; sto[das].pb(mp(dos,pr)); <span class="keyword">return</span>;&#125; </div><div class="line">	dfs(x+<span class="number">1</span>,dos+v[x],das,pr*((ff)p[x]/<span class="number">100.00</span>)); </div><div class="line">	dfs(x+<span class="number">1</span>,dos,das+<span class="number">1</span>,pr*(<span class="number">1.0</span>-(ff)p[x]/<span class="number">100.00</span>)); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> dos,<span class="keyword">int</span> das,ff pr)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (x&gt;n) &#123; </div><div class="line">		REP(i,<span class="number">0</span>,B) REP(j,<span class="number">1</span>,m) &#123; </div><div class="line">			<span class="built_in">vector</span>&lt;pif&gt;::iterator</div><div class="line">				k=lobo(sto[i].begin(),sto[i].end(),</div><div class="line">				mp(les[i+das][j]-dos,(ff)<span class="number">0</span>)); </div><div class="line">			<span class="keyword">if</span> (k!=sto[i].end()) &#123; </div><div class="line">				ff pl=sto[i][sz(sto[i])<span class="number">-1</span>].se; </div><div class="line">				<span class="keyword">if</span> (k!=sto[i].begin()) --k,pl-=k-&gt;se; </div><div class="line">				as+=(ff)j*pl*pr; </div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span>; </div><div class="line">	&#125;</div><div class="line">	getans(x+<span class="number">1</span>,dos+v[x],das,pr*((ff)p[x]/<span class="number">100.00</span>)); </div><div class="line">	getans(x+<span class="number">1</span>,dos,das+<span class="number">1</span>,pr*(<span class="number">1.0</span>-(ff)p[x]/<span class="number">100.00</span>)); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//get les[i][j] : use i diamonds to buy j objects, what the least cost is; </span></div><div class="line">	<span class="built_in">memset</span>(les,<span class="number">127</span>,<span class="keyword">sizeof</span>(les)); </div><div class="line">	les[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>; REP(i,<span class="number">1</span>,m) VEP(j,n,d[i]) VEP(k,m,<span class="number">1</span>) </div><div class="line">		<span class="keyword">if</span> (les[j-d[i]][k<span class="number">-1</span>]+c[i]&lt;<span class="number">300000010</span>) </div><div class="line">			cmin(les[j][k],les[j-d[i]][k<span class="number">-1</span>]+c[i]); </div><div class="line"><span class="comment">//get sto[i][j](fi,se) : use the first B boxes, get i dias and no more than fi dols, what the prob; </span></div><div class="line">	B=n/<span class="number">3</span>*<span class="number">2</span>; dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>); </div><div class="line">	REP(i,<span class="number">0</span>,B) sort(sto[i].begin(),sto[i].end()); </div><div class="line">	REP(i,<span class="number">0</span>,B) REP(j,<span class="number">1</span>,sz(sto[i])<span class="number">-1</span>) sto[i][j].se+=sto[i][j<span class="number">-1</span>].se; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T); <span class="keyword">while</span> (T--) &#123; as=<span class="number">0</span>; </div><div class="line">		rep(i,<span class="number">22</span>) sto[i].clear(); </div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);  REP(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;v[i],&amp;p[i]); </div><div class="line">		REP(i,<span class="number">1</span>,m) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;c[i],&amp;d[i]);  </div><div class="line">		prepare(), getans(B+<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>); </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%.4lf\n"</span>,as); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-gthronesa-game-of-thrones">【CC GTHRONES】A Game of Thrones</h1>
<h2 id="题目大意-4">题目大意</h2>
<p>Bran 和 Tyrion 进行博弈， Bran先手，指定一个数作为当前数<span class="math inline">\(x\)</span>， 之后交替进行操作： 选择一个与当前数满足条件的数<span class="math inline">\(y\)</span>, 将<span class="math inline">\(y\)</span>设为当前数， 删掉一个<span class="math inline">\(x\)</span>, 不能操作者负。</p>
<p>需要满足的条件： 1. 如果<span class="math inline">\(x&gt;y\)</span> , <span class="math inline">\(y|x\)</span>, <span class="math inline">\(x/y\)</span>是一个质数； 2. 如果<span class="math inline">\(y&gt;x\)</span> , <span class="math inline">\(x|y\)</span>, <span class="math inline">\(y/x\)</span>是一个质数。</p>
<h2 id="解题报告-4">解题报告</h2>
<p>首先，如果把满足条件的点<span class="math inline">\(x\)</span>,<span class="math inline">\(y\)</span>连边， 那么原图会成为一个二分图，可以安装质因子个数的奇偶进行分类。</p>
<p>如果这个二分图存在完美匹配，那么先手必负， 因为后手只需要选取匹配中与当前点相连的点就可以不负。</p>
<p>否则， 先手必胜， 考虑先手选择一个不在某个最大匹配中的点作为初始状态， 后手需要使用存在于最大匹配中的点（否则不满足最大匹配的定义），然后，先手只需要使用最大匹配中对应的点回敬即可不负。</p>
<p>所以只需要判断是否存在完美匹配就可以判断胜负， 然后找到最小的不在某个最大匹配中的点作为最小代价，可以通过网络流的退流操作进行判断。</p>
<h2 id="代码-4">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ff; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">510</span>; </div><div class="line"><span class="keyword">const</span> ll inf=<span class="number">1000000000000000l</span>l; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> nxt,to; ll f; </div><div class="line">	edge(<span class="keyword">int</span> nxt=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>,ll f=<span class="number">0</span>) </div><div class="line">		:nxt(nxt),to(to),f(f)&#123;&#125;</div><div class="line">&#125; e[N*N*<span class="number">3</span>]; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> hed[N*<span class="number">2</span>],tot=<span class="number">1</span>,n,c[N*<span class="number">2</span>],co[N*<span class="number">2</span>],p[N],od[N]; <span class="keyword">bool</span> viz[N];</div><div class="line"><span class="keyword">int</span> S,T,s,t,de[N*<span class="number">2</span>],q[N*N],he,ta; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[N]; ll u[N*<span class="number">2</span>];  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,ll f)</span> </span>&#123;</div><div class="line">	e[++tot]=edge(hed[x],y,f), hed[x]=tot; </div><div class="line">	e[++tot]=edge(hed[y],x,<span class="number">0</span>), hed[y]=tot; <span class="keyword">return</span> tot^<span class="number">1</span>; </div><div class="line">&#125; </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(T &amp;x)</span> </span>&#123; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>; </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>; ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">	x*=f; </div><div class="line">&#125; </div><div class="line"><span class="keyword">void</span> _color(<span class="keyword">int</span> x,<span class="keyword">int</span> fm=<span class="number">0</span>) &#123; </div><div class="line">	viz[x]=<span class="number">1</span>;co[x]=co[fm]^<span class="number">1</span>; </div><div class="line">	rep(i,v[x].size()) <span class="keyword">if</span> (!viz[v[x][i]]) _color(v[x][i],x); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123; </div><div class="line">	he=ta=<span class="number">0</span>,q[ta++]=s; <span class="built_in">memset</span>(de,<span class="number">0</span>,<span class="keyword">sizeof</span>(de)),de[s]=<span class="number">1</span>; <span class="keyword">int</span> x,y;  </div><div class="line">	<span class="keyword">while</span> (he&lt;ta) &#123; x=q[he++]; <span class="keyword">for</span>(<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt) </div><div class="line">		<span class="keyword">if</span> (y=e[i].to, !de[y]&amp;&amp;e[i].f) de[y]=de[x]+<span class="number">1</span>,q[ta++]=y; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> de[t]; </div><div class="line">&#125; </div><div class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, ll lm)</span> </span>&#123; ll f,hv=<span class="number">0</span>; <span class="keyword">int</span> y; <span class="keyword">if</span> (x==t) <span class="keyword">return</span> lm;  </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt) <span class="keyword">if</span> (y=e[i].to,de[y]==de[x]+<span class="number">1</span>&amp;&amp;e[i].f) &#123; </div><div class="line">		f=dfs(y,min(e[i].f, lm)); e[i].f-=f,e[i^<span class="number">1</span>].f+=f,hv+=f,lm-=f; </div><div class="line">		<span class="keyword">if</span> (!lm) <span class="keyword">return</span> hv; </div><div class="line">	&#125; de[x]=<span class="number">-1</span>; <span class="keyword">return</span> hv; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> _s, <span class="keyword">int</span> <span class="keyword">_t</span>)</span> </span>&#123; </div><div class="line">	s=_s, t=<span class="keyword">_t</span>; ll as=<span class="number">0</span>; <span class="keyword">while</span> (bfs()) as+=dfs(s,inf); <span class="keyword">return</span> as; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> pm[<span class="number">10</span>]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>&#125;; </div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mul</span><span class="params">(ll a,ll b,ll p)</span> </span>&#123;</div><div class="line">	a%=p,b%=p; <span class="keyword">if</span>(a&lt;<span class="number">0</span>)a+=p; <span class="keyword">if</span>(b&lt;<span class="number">0</span>)b+=p; </div><div class="line">	ll k=(ll)(((ff)a*b/p)); ll as=a*b-p*k; </div><div class="line">	as%=p; <span class="keyword">if</span>(as&lt;<span class="number">0</span>) as+=p; <span class="keyword">return</span> as; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">fast</span><span class="params">(ll x,ll k,ll p)</span> </span>&#123; </div><div class="line">	ll as=<span class="number">1</span>; <span class="keyword">for</span>(;k;k&gt;&gt;=<span class="number">1</span>,x=mul(x,x,p)) <span class="keyword">if</span>(k&amp;<span class="number">1</span>) as=mul(as,x,p);</div><div class="line">	<span class="keyword">return</span> as;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">miller_rabin</span><span class="params">(ll x)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (x==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="keyword">if</span> (x&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">	ll a,m=x<span class="number">-1</span>,k=<span class="number">0</span>; <span class="keyword">while</span> (m%<span class="number">2</span>==<span class="number">0</span>) m/=<span class="number">2</span>,++k; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>;++i) &#123; <span class="keyword">if</span> (pm[i]==x) <span class="keyword">return</span> <span class="number">1</span>; </div><div class="line">		a=fast(pm[i],m,x); <span class="keyword">if</span>(a==<span class="number">1</span>) <span class="keyword">continue</span>; </div><div class="line">		<span class="keyword">int</span> j; <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=k;++j) &#123; </div><div class="line">			<span class="keyword">if</span>(a==x<span class="number">-1</span>) <span class="keyword">break</span>; a=mul(a,a,x);</div><div class="line">		&#125; </div><div class="line">		<span class="keyword">if</span> (j&gt;k) <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">chek</span><span class="params">(ll a,ll b)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (a&lt;b) swap(a,b); <span class="keyword">if</span>(a%b) <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">	<span class="keyword">if</span> (!miller_rabin(a/b)) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> u[a]&lt;u[b];&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//	freopen("A.in","r",stdin); </span></div><div class="line"><span class="comment">//	freopen("A.out","w",stdout); </span></div><div class="line">	in(n); REP(i,<span class="number">1</span>,n) in(u[i]),in(c[i]);</div><div class="line">	REP(i,<span class="number">1</span>,n) REP(j,i+<span class="number">1</span>,n) <span class="keyword">if</span>(chek(u[i],u[j])) </div><div class="line">		v[i].pb(j),v[j].pb(i); </div><div class="line">	REP(i,<span class="number">1</span>,n) <span class="keyword">if</span> (!viz[i]) _color(i); </div><div class="line"> </div><div class="line">	S=<span class="number">0</span>, T=n+<span class="number">1</span>; ll s1=<span class="number">0</span>, s2=<span class="number">0</span>;  </div><div class="line">	REP(i,<span class="number">1</span>,n) <span class="keyword">if</span> (co[i]==<span class="number">1</span>) &#123; </div><div class="line">		p[i]=add(S,i,c[i]),s1+=c[i]; </div><div class="line">		rep(j,v[i].size()) add(i,v[i][j],inf); </div><div class="line">	&#125; <span class="keyword">else</span> p[i]=add(i,T,c[i]),s2+=c[i]; </div><div class="line">	ll flo=dinic(S,T); </div><div class="line"> </div><div class="line">	<span class="keyword">if</span> (flo==max(s1,s2)) &#123;<span class="built_in">puts</span>(<span class="string">"Tyrion"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</div><div class="line">	REP(i,<span class="number">1</span>,n) od[i]=i; sort(od+<span class="number">1</span>,od+<span class="number">1</span>+n,cmp); </div><div class="line">	ll fno,old1,old2; <span class="keyword">int</span> pa,k;  </div><div class="line">	<span class="built_in">printf</span>(<span class="string">"Bran"</span>); REP(i,<span class="number">1</span>,n) &#123; k=od[i],pa=p[k]; </div><div class="line">		<span class="keyword">if</span> (e[pa].f) &#123;<span class="built_in">printf</span>(<span class="string">" %lld\n"</span>,u[k]);<span class="keyword">return</span> <span class="number">0</span>;&#125;</div><div class="line">		old1=e[pa].f, old2=e[pa^<span class="number">1</span>].f; </div><div class="line">		e[pa].f=e[pa^<span class="number">1</span>].f=<span class="number">0</span>; </div><div class="line">		<span class="keyword">if</span> (co[k]==<span class="number">1</span>) fno=dinic(S,k); </div><div class="line">		<span class="keyword">else</span> fno=dinic(k,T); </div><div class="line">		<span class="keyword">if</span> (fno) &#123; <span class="built_in">printf</span>(<span class="string">" %lld\n"</span>,u[k]); <span class="keyword">return</span> <span class="number">0</span>;&#125; </div><div class="line">		e[pa].f=old1, e[pa^<span class="number">1</span>].f=old2;</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-cardchufcard-shuffle">【CC CARDCHUF】Card Shuffle</h1>
<h2 id="题目大意-5">题目大意</h2>
<p>初始一个<span class="math inline">\(1\)</span>到<span class="math inline">\(n\)</span>的序列，每次进行几个操作： 1. 拿走顶端的<span class="math inline">\(A\)</span>个数。 2. 再拿走顶端的<span class="math inline">\(B\)</span>个数。 3. 把<span class="math inline">\(A\)</span>个数放回顶端。 4. 在顶端拿走<span class="math inline">\(C\)</span>个数。 5. 把<span class="math inline">\(B\)</span>个数倒序放回顶端。 6. 放回<span class="math inline">\(C\)</span>个数。</p>
<h2 id="解题报告-5">解题报告</h2>
<p>天朝数据结构碾压终生。</p>
<p>FHQTreap超容易写的一道裸题。HARD？</p>
<h2 id="代码-5">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; droot; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100100</span>; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> n,m,sn[N][<span class="number">2</span>],ke[N],v[N],sz[N],ct,rv[N],rt;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) </div><div class="line">		<span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) </div><div class="line">		x=x*<span class="number">10</span>+ch<span class="number">-48</span>; x*=f; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">birth</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	++ct; ke[x]=rand(),sn[ct][<span class="number">0</span>]=sn[ct][<span class="number">1</span>]=<span class="number">0</span>,v[ct]=x,sz[ct]=<span class="number">1</span>;<span class="keyword">return</span> ct;</div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _rev(<span class="keyword">int</span> x) &#123;</div><div class="line">	<span class="keyword">if</span> (!x) <span class="keyword">return</span> ; </div><div class="line">	rv[x]^=<span class="number">1</span>; swap(sn[x][<span class="number">0</span>],sn[x][<span class="number">1</span>]); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (rv[x]) _rev(sn[x][<span class="number">0</span>]), _rev(sn[x][<span class="number">1</span>]), rv[x]=<span class="number">0</span>; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	sz[x]=<span class="number">1</span>; <span class="keyword">if</span> (sn[x][<span class="number">0</span>]) sz[x]+=sz[sn[x][<span class="number">0</span>]]; </div><div class="line">	<span class="keyword">if</span> (sn[x][<span class="number">1</span>]) sz[x]+=sz[sn[x][<span class="number">1</span>]]; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> stk[N],tp,x,las; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123; </div><div class="line">		x=birth(i); <span class="keyword">while</span> (tp&amp;&amp;ke[stk[tp]]&gt;ke[x]) </div><div class="line">			las=stk[tp], --tp, up(las); </div><div class="line">		<span class="keyword">if</span> (tp) sn[stk[tp]][<span class="number">1</span>]=x;</div><div class="line">		sn[x][<span class="number">0</span>]=las, stk[++tp]=x,las=<span class="number">0</span>;  </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">while</span> (tp) up(stk[tp]), --tp; </div><div class="line">	<span class="keyword">return</span> stk[<span class="number">1</span>]; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function">droot <span class="title">split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!x) <span class="keyword">return</span> mp(<span class="number">0</span>,<span class="number">0</span>); <span class="keyword">if</span> (!k) <span class="keyword">return</span> mp(<span class="number">0</span>,x); </div><div class="line">	down(x); <span class="keyword">int</span> lsz=sz[sn[x][<span class="number">0</span>]]; droot y;  </div><div class="line">	<span class="keyword">if</span> (lsz&gt;=k) &#123; y=split(sn[x][<span class="number">0</span>],k); </div><div class="line">	 	sn[x][<span class="number">0</span>]=y.se; up(x); y.se=x; </div><div class="line">	&#125; <span class="keyword">else</span> &#123; y=split(sn[x][<span class="number">1</span>],k<span class="number">-1</span>-lsz); </div><div class="line">	 	sn[x][<span class="number">1</span>]=y.fi; up(x); y.fi=x;  </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> y; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">if</span>(a*b==<span class="number">0</span>) <span class="keyword">return</span> a+b; </div><div class="line">	down(a), down(b); </div><div class="line">	<span class="keyword">if</span> (ke[a]&lt;ke[b]) &#123; </div><div class="line">		sn[a][<span class="number">1</span>]=merge(sn[a][<span class="number">1</span>],b);</div><div class="line">		up(a); <span class="keyword">return</span> a; </div><div class="line">	&#125; <span class="keyword">else</span> &#123; </div><div class="line">		sn[b][<span class="number">0</span>]=merge(a, sn[b][<span class="number">0</span>]); </div><div class="line">		up(b); <span class="keyword">return</span> b; </div><div class="line">	&#125; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">look</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span>(!x) <span class="keyword">return</span>; down(x); </div><div class="line">	<span class="keyword">if</span> (sn[x][<span class="number">0</span>]) look(sn[x][<span class="number">0</span>]); </div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d "</span>, v[x]); </div><div class="line">	<span class="keyword">if</span> (sn[x][<span class="number">1</span>]) look(sn[x][<span class="number">1</span>]); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	in(n),in(m),rt=build();<span class="keyword">int</span> a,b,c;</div><div class="line">	<span class="comment">//look(rt); //cout&lt;&lt;endl; </span></div><div class="line">	rep(i,m) &#123; in(a),in(b),in(c); </div><div class="line">		droot A=split(rt,a); </div><div class="line">		droot B=split(A.se,b); </div><div class="line">		rt=merge(A.fi,B.se); </div><div class="line">		<span class="comment">//look(rt); //cout&lt;&lt;endl; </span></div><div class="line">		A=split(rt, c); </div><div class="line">		_rev(B.fi),A.se=merge(B.fi,A.se); </div><div class="line">		rt=merge(A.fi,A.se); </div><div class="line">		<span class="comment">//look(rt);cout&lt;&lt;endl; </span></div><div class="line">	&#125; </div><div class="line">	look(rt); <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>; <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-tapaircounting-the-important-pairs">【CC TAPAIR】Counting The Important Pairs</h1>
<h2 id="题目大意-6">题目大意</h2>
<p>一个无向简单图， 求无序点对<span class="math inline">\((x,y)\)</span>满足同时删除这两条边，无向图不再联通的对数。</p>
<h2 id="解题报告-6">解题报告</h2>
<p>在dfs树上观察， 发现如果<span class="math inline">\(x\)</span>,<span class="math inline">\(y\)</span>两条边有相同的编号，那么同时删除无向图不再联通。</p>
<p>编号是啥？ 令dfs树上的返祖边，每个反祖边有一个编号，那么树上一条边的编号是删除这条边后，使用哪些返祖边可以使图依旧联通的编号集合。</p>
<p>其实有两种情况： 1. 两个编号相同边一个是返祖边，一个是树边，那么这个返祖边是唯一一个使得树边删除后图依然联通的边， 同时删除满足题意。 2. 如果都是树边， 容易得到不存在返祖边使得两条树边之间的联通块与其他部分联通， 同时删除两条树边，使得中间的联通块“独立”， 满足题意。</p>
<p>那怎么判断两个边的编号是不是相同？用奇怪的Hash技巧（比如xor?)就可以了。</p>
<h2 id="代码-6">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> RAND ull((1ull*rand()&lt;&lt;45)|(1ull*rand()&lt;&lt;30)|(rand()&lt;&lt;15)|rand())</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">300010</span>; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></div><div class="line">	 <span class="keyword">int</span> nxt,to; edge(<span class="keyword">int</span> nxt=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>)</div><div class="line">	 	:nxt(nxt),to(to) &#123;&#125;</div><div class="line">&#125; e[M&lt;&lt;<span class="number">1</span>]; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> hed[N],tot,n,m; ull v[M];</div><div class="line"><span class="keyword">bool</span> vi[N],instk[N]; </div><div class="line"> </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(T &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar())</div><div class="line">		<span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) </div><div class="line">		x=x*<span class="number">10</span>+ch<span class="number">-48</span>;  x*=f; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">	e[++tot]=edge(hed[x],y), hed[x]=tot; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fm)</span> </span>&#123;</div><div class="line">	instk[x]=<span class="number">1</span>,vi[x]=<span class="number">1</span>; </div><div class="line"><span class="comment">//	cout&lt;&lt;RAND&lt;&lt;endl; </span></div><div class="line">	<span class="keyword">int</span> y; <span class="keyword">for</span> (<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt) </div><div class="line">		<span class="keyword">if</span> (y=e[i].to, y!=fm) &#123; </div><div class="line">			<span class="keyword">if</span> (vi[y]) &#123; <span class="keyword">if</span>(instk[y]) v[++n]=RAND,v[x]^=v[n],v[y]^=v[n];&#125;</div><div class="line">			<span class="keyword">else</span> dfs(y,x); </div><div class="line">		&#125; </div><div class="line">	v[fm]^=v[x],instk[x]=<span class="number">0</span>; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; in(n),in(m); srand(<span class="number">23333</span>); </div><div class="line">	<span class="keyword">int</span> x,y; rep(i,m) in(x),in(y),add(x,y),add(y,x); </div><div class="line">	dfs(<span class="number">1</span>,<span class="number">0</span>),v[<span class="number">1</span>]=v[n],--n, sort(v+<span class="number">1</span>,v+<span class="number">1</span>+n); ll t; <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>; </div><div class="line">	<span class="keyword">while</span> (i&lt;n&amp;&amp;v[i+<span class="number">1</span>]==<span class="number">0</span>) ++i; ll as=<span class="number">0</span>; </div><div class="line">	t=i,t*=n<span class="number">-1</span>,as+=t,t=i,t=t*(t<span class="number">-1</span>)/<span class="number">2</span>,as-=t; </div><div class="line">	<span class="keyword">for</span> (++i;i&lt;=n;i=j+<span class="number">1</span>) &#123; j=i; <span class="keyword">while</span> (j&lt;n&amp;&amp;v[j+<span class="number">1</span>]==v[i]) ++j; </div><div class="line">		t=j-i+<span class="number">1</span>, t=t*(t<span class="number">-1</span>)/<span class="number">2</span>, as+=t; </div><div class="line">	&#125; </div><div class="line">	<span class="built_in">cout</span>&lt;&lt;as&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-farasafurik-and-rubik-and-sub-array">【CC FARASA】Furik and Rubik and Sub Array</h1>
<h2 id="题目大意-7">题目大意</h2>
<p>给出一个序列，求不同的区间和的个数。</p>
<h2 id="解题报告-7">解题报告</h2>
<p>题目对<span class="math inline">\(n*SUM\)</span>做了约束，如果<span class="math inline">\(n\)</span>很小， 直接<span class="math inline">\(O(n^2logn)\)</span>艹过去了。</p>
<p>如果<span class="math inline">\(n\)</span>大一点，比如<span class="math inline">\(2000 &lt; n \leqslant 20000\)</span> , 那么数的和就可以作为数组的下标，所以<span class="math inline">\(O(n^2)\)</span>艹过去了。</p>
<p>如果<span class="math inline">\(n\)</span>再大一点？比如<span class="math inline">\(20000&lt;n\leqslant 200000\)</span>, 可以把<span class="math inline">\(sum(l,r)\)</span>表示成<span class="math inline">\(pre(r)-pre(l-1)\)</span> , 可以把<span class="math inline">\(pre\)</span>数组和<span class="math inline">\(-pre\)</span>数组分别作为多项式的幂指数， 做多项式乘法统计系数就可以了，<span class="math inline">\(O(sum\log sum)\)</span>艹过去了！</p>
<p>但是我发现自己的多项式代码一直WA，然后把对拍用的暴力交了上去，竟然是跑得最快的。。。 是不是用什么生日悖论可以证明暴力复杂度优越呀。。</p>
<h2 id="代码-7">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</div><div class="line">ll a[N]; <span class="keyword">int</span> s[N],n;</div><div class="line"><span class="keyword">bool</span> f[<span class="number">20000010</span>];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</div><div class="line">	ll ans=<span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span>(n&lt;=<span class="number">2000</span>) &#123;</div><div class="line">		<span class="built_in">set</span>&lt;ll&gt; s;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>;l&lt;=n;++l) &#123;</div><div class="line">			ll sum=<span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> r=l;r&lt;=n;++r) </div><div class="line">				sum+=a[r], s.insert(sum);</div><div class="line">		&#125;</div><div class="line">		ans=s.size();</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		s[<span class="number">0</span>]=<span class="number">0</span>, f[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n; ++i)</div><div class="line">			s[i]=s[i<span class="number">-1</span>]+a[i], f[s[i]]=<span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> sum=s[n];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=sum;++i) &#123;</div><div class="line">			<span class="keyword">if</span>(!f[i]) &#123;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; ++j) &#123;</div><div class="line">					<span class="keyword">int</span> x=s[j]+i; <span class="keyword">if</span> (x&gt;sum) <span class="keyword">break</span>;</div><div class="line">					<span class="keyword">if</span>(f[x]) &#123; f[i]=<span class="number">1</span>; <span class="keyword">break</span>; &#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			ans+=f[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;ans<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;	</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>FFT 做法</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> ff pi=<span class="built_in">acos</span>(<span class="number">-1</span>); </div><div class="line">ll a[<span class="number">200010</span>],n;</div><div class="line"> </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(T &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar());</div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar())</div><div class="line">		x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">namespace</span> one &#123; </div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">		<span class="built_in">set</span>&lt;ll&gt; s; </div><div class="line">		REP(i,<span class="number">1</span>,n) &#123; a[i]+=a[i<span class="number">-1</span>]; </div><div class="line">			rep(j,i) <span class="keyword">if</span> (s.count(a[i]-a[j])==<span class="number">0</span>) </div><div class="line">				s.insert(a[i]-a[j]); </div><div class="line">		&#125; </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, s.size()<span class="number">-1</span>); </div><div class="line">	&#125; </div><div class="line">&#125; </div><div class="line"><span class="keyword">namespace</span> two &#123; </div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">		<span class="built_in">bitset</span>&lt;20000001&gt; exi; </div><div class="line">		REP(i,<span class="number">1</span>,n) &#123; a[i]+=a[i<span class="number">-1</span>]; </div><div class="line">			rep(j,i) exi.<span class="built_in">set</span>(a[i]-a[j]); </div><div class="line">		&#125;</div><div class="line">		exi.reset(<span class="number">0</span>); </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, exi.count()<span class="number">-1</span>) ; </div><div class="line">	&#125; </div><div class="line">&#125;</div><div class="line"><span class="keyword">namespace</span> three &#123; </div><div class="line">	<span class="keyword">int</span> _n,r[<span class="number">600000</span>]; </div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">cmx</span> &#123;</span> </div><div class="line">		ff x,y; cmx(ff x=<span class="number">0</span>,ff y=<span class="number">0</span>):x(x),y(y)&#123;&#125;</div><div class="line">		cmx <span class="keyword">operator</span> +(<span class="keyword">const</span> cmx b) &#123; <span class="keyword">return</span> cmx(x+b.x,y+b.y);&#125;</div><div class="line">		cmx <span class="keyword">operator</span> -(<span class="keyword">const</span> cmx b) &#123; <span class="keyword">return</span> cmx(x-b.x,y-b.y);&#125;</div><div class="line">		cmx <span class="keyword">operator</span> *(<span class="keyword">const</span> cmx b) &#123; <span class="keyword">return</span> cmx(x*b.x-y*b.y,x*b.y+y*b.x);&#125;</div><div class="line">	&#125; A[<span class="number">600000</span>],B[<span class="number">600000</span>]; </div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dft</span><span class="params">(cmx *a,<span class="keyword">int</span> f)</span> </span>&#123; </div><div class="line">		rep(i,_n) <span class="keyword">if</span> (i&lt;r[i]) swap(a[i],a[r[i]]); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> m=<span class="number">1</span>; m&lt;_n; m&lt;&lt;=<span class="number">1</span>) &#123; </div><div class="line">			cmx wn=cmx(<span class="built_in">cos</span>(pi/m),<span class="built_in">sin</span>(pi/m)*f); </div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;_n; i+=m&lt;&lt;<span class="number">1</span>) &#123;</div><div class="line">				cmx w=cmx(<span class="number">1</span>,<span class="number">0</span>); </div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m; ++j) &#123;</div><div class="line">					cmx x=a[i+j],y=a[i+j+m]*w; </div><div class="line">					a[i+j]=x+y, a[i+j+m]=x-y; </div><div class="line">					w=w*wn; </div><div class="line">				&#125; </div><div class="line">			&#125; </div><div class="line">		&#125; </div><div class="line">		<span class="keyword">if</span> (f==<span class="number">-1</span>) rep(i,_n) a[i].x/=(ff)_n; </div><div class="line">	&#125; </div><div class="line">				</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">		REP(i,<span class="number">1</span>,n) &#123; a[i]+=a[i<span class="number">-1</span>],A[a[i]].x=<span class="number">1</span>;&#125; </div><div class="line">		A[<span class="number">0</span>].x=<span class="number">1</span>; rep(i,a[n]+<span class="number">1</span>) B[i].x=A[a[n]-i].x; </div><div class="line">		<span class="keyword">int</span> m=a[n]+a[n]+<span class="number">1</span>; <span class="keyword">for</span> (_n=<span class="number">1</span>; _n&lt;m; _n&lt;&lt;=<span class="number">1</span>); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;_n;++i) &#123; r[i]=j; </div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k=_n&gt;&gt;<span class="number">1</span>;(j^=k)&lt;k;k&gt;&gt;=<span class="number">1</span>); </div><div class="line">		&#125; </div><div class="line">		dft(A,<span class="number">1</span>),dft(B,<span class="number">1</span>);rep(i,_n) A[i]=A[i]*B[i]; ll as=<span class="number">0</span>; </div><div class="line">		dft(A,<span class="number">-1</span>); REP(i,a[n]+<span class="number">1</span>,a[n]+a[n]) <span class="keyword">if</span> (<span class="keyword">int</span>(A[i].x+<span class="number">0.5</span>)) ++as; </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, as<span class="number">-1</span>); </div><div class="line">	&#125; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//	freopen("A.in","r",stdin);</span></div><div class="line"><span class="comment">//	freopen("A.out","w",stdout); </span></div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n); <span class="comment">//cout&lt;&lt;1&lt;&lt;endl;</span></div><div class="line">	</div><div class="line">	REP(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</div><div class="line">	</div><div class="line"> </div><div class="line">	<span class="keyword">if</span> (n&lt;=<span class="number">2000</span>) one :: main(); </div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (n&lt;=<span class="number">20000</span>) two :: main(); </div><div class="line">		<span class="keyword">else</span> three:: main(); </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-changemaking-change">【CC CHANGE】Making Change</h1>
<h2 id="题目大意-8">题目大意</h2>
<h2 id="解题报告-8">解题报告</h2>
<h2 id="代码-8">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for (int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">51</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">1000000007</span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> d[N],c[<span class="number">101</span>],n,T,le,tw[<span class="number">400</span>],f[N*N*<span class="number">20</span>],sm;</div><div class="line"><span class="keyword">char</span> s[<span class="number">110</span>]; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T); </div><div class="line">	<span class="keyword">while</span> (T--) &#123; </div><div class="line">		sm=<span class="number">0</span>,<span class="built_in">scanf</span>(<span class="string">"%d%s"</span>,&amp;n,s); </div><div class="line">		le=<span class="built_in">strlen</span>(s); rep(i,le) c[i]=s[le-i<span class="number">-1</span>]-<span class="string">'0'</span>; </div><div class="line">		<span class="keyword">int</span> lf=<span class="number">0</span>,tn=<span class="number">0</span>; <span class="keyword">while</span> (le&gt;<span class="number">1</span>||c[<span class="number">0</span>]&gt;=<span class="number">1</span>) &#123; </div><div class="line">			VEP(i,le<span class="number">-1</span>,<span class="number">0</span>) &#123; <span class="keyword">int</span> x=lf*<span class="number">10</span>+c[i]; </div><div class="line">				lf=x%<span class="number">2</span>, c[i]=x/<span class="number">2</span>; </div><div class="line">			&#125;</div><div class="line">			tw[++tn]=lf, lf=<span class="number">0</span>; </div><div class="line">			<span class="keyword">while</span> (c[le<span class="number">-1</span>]==<span class="number">0</span>) le--; </div><div class="line">		&#125;</div><div class="line"><span class="comment">//		REP(i, 1,tn) cout&lt;&lt;tw[i]&lt;&lt;' ' ;cout&lt;&lt;endl; </span></div><div class="line">		REP(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;d[i]),sm+=d[i];</div><div class="line">		<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f)); </div><div class="line">		f[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">int</span> smx=<span class="number">0</span>,v;  </div><div class="line">		sort(d+<span class="number">1</span>,d+<span class="number">1</span>+n); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tn;++i) &#123; </div><div class="line">			<span class="built_in">memset</span>(f+<span class="number">1</span>+smx,<span class="number">0</span>,sm*<span class="keyword">sizeof</span>(ui));</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j) &#123; v=d[j],smx+=v; </div><div class="line">				VEP(k,smx,v) f[k]+=f[k-v],f[k]-=p*((f[k]&gt;&gt;<span class="number">30</span>)&amp;<span class="number">3</span>); </div><div class="line">			&#125;</div><div class="line">			<span class="keyword">int</span> _j,j; </div><div class="line">			<span class="keyword">for</span>(_j=tw[i],j=<span class="number">0</span>; _j&lt;=smx;_j+=<span class="number">2</span>,++j) &#123;  </div><div class="line">				f[j]=f[_j]; <span class="keyword">if</span> (f[j]&gt;=p) f[j]-=p;</div><div class="line">			&#125; </div><div class="line">			smx=j<span class="number">-1</span>; </div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%u\n"</span>, f[<span class="number">0</span>]); </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;仍然在做CC中简单一点的题目&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="题目集锦" scheme="http://shallwe.ga/categories/%E9%A2%98%E7%9B%AE%E9%9B%86%E9%94%A6/"/>
    
    
      <category term="LCT" scheme="http://shallwe.ga/tags/LCT/"/>
    
      <category term="平衡树" scheme="http://shallwe.ga/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="后缀自动机" scheme="http://shallwe.ga/tags/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
      <category term="DP" scheme="http://shallwe.ga/tags/DP/"/>
    
      <category term="数位DP" scheme="http://shallwe.ga/tags/%E6%95%B0%E4%BD%8DDP/"/>
    
      <category term="网络流" scheme="http://shallwe.ga/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="meet in the middle" scheme="http://shallwe.ga/tags/meet-in-the-middle/"/>
    
      <category term="博弈" scheme="http://shallwe.ga/tags/%E5%8D%9A%E5%BC%88/"/>
    
  </entry>
  
  <entry>
    <title>codechef-选做-again</title>
    <link href="http://shallwe.ga/cc2/"/>
    <id>http://shallwe.ga/cc2/</id>
    <published>2017-03-14T03:28:39.000Z</published>
    <updated>2017-04-25T03:24:42.191Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>继续做CC中难度比较低的题目</p>
</blockquote>
<a id="more"></a>
<h1 id="cc-tripschildren-trips">【CC TRIPS】Children Trips</h1>
<h2 id="题目大意">题目大意</h2>
<p>一棵树上每个边的权值为1， 每次给出一个小盆友的体力值， 每天可以行进的距离<span class="math inline">\(\leqslant\)</span>体力值，问走<span class="math inline">\((x,y)\)</span>这条路径需要几天。</p>
<h2 id="解题报告">解题报告</h2>
<p>首先考虑体力值为1 、2 、3…的分别走步数<span class="math inline">\(n\)</span> , 总共需要走的距离是<span class="math inline">\(n^3\)</span>级别的，实际总步数是<span class="math inline">\(n^2\)</span>级别， 所以每个体力值走过的步数是<span class="math inline">\(\sqrt{n}\)</span>级别， 每一步走到哪一个节点通过倍增（二分？）<span class="math inline">\(\log n\)</span>可以得到, 复杂度<span class="math inline">\(O(n\sqrt{n}\log n)\)</span></p>
<p>如果一个体力值走的步数<span class="math inline">\(&gt; n\)</span>，那么可以对这个体力值进行重建图， 每个点连向上能到达的最远的点， 在呈现做倍增， 这个重构图的过程最多进行<span class="math inline">\(\sqrt{n}\)</span>次， 单次复杂度<span class="math inline">\(O(n\log n)\)</span>.</p>
<p>重构图之后， 通过倍增就可以<span class="math inline">\(\log n\)</span>解决一次询问， 复杂度<span class="math inline">\(O(n\log n)\)</span>.</p>
<p>所以总体的复杂度就是<span class="math inline">\(O(n \sqrt{n} \log n)\)</span></p>
<h2 id="代码">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i,  a,  b) for (int i = int(a),  nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i,  a,  b) for (int i = int(a),  nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,  b) for (int i = 0,  nn = int(b); i &lt; b; ++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> u, v, c, id;</div><div class="line">	node(<span class="keyword">int</span> u=<span class="number">0</span>, <span class="keyword">int</span> v=<span class="number">0</span>, <span class="keyword">int</span> c=<span class="number">0</span>, <span class="keyword">int</span> id=<span class="number">0</span>) </div><div class="line">		:u(u), v(v), c(c), id(id) &#123;&#125;</div><div class="line">&#125; t[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> nxt, to, v; </div><div class="line">	edge(<span class="keyword">int</span> nxt=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>,<span class="keyword">int</span> v=<span class="number">0</span>) </div><div class="line">		:nxt(nxt), to(to), v(v) &#123;&#125;</div><div class="line">&#125; e[N*<span class="number">2</span>]; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> n, m, d, lca, sum, c;</div><div class="line"><span class="keyword">int</span> head[N], tot; </div><div class="line"><span class="keyword">int</span> dep[N], deep[N], fa[N][<span class="number">20</span>], _fa[N][<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> st[N], top, top2;</div><div class="line"><span class="keyword">int</span> ans[N], s[N*<span class="number">2</span>];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span>&#123;<span class="keyword">return</span> a.c&gt;b.c;&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line"> 	e[++tot] = edge(head[x], y, v), head[x]=tot;</div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (deep[x] &gt; d) d = deep[x];</div><div class="line">	<span class="keyword">int</span> y; </div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; fa[x][i]; ++i) </div><div class="line">		fa[x][i+<span class="number">1</span>] = fa[ fa[x][i] ][i]; </div><div class="line"> </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].nxt)</div><div class="line">		<span class="keyword">if</span> (y = e[i].to, y != fa[x][<span class="number">0</span>]) &#123;</div><div class="line">			deep[y] = deep[x] + e[i].v;</div><div class="line">			dep[y] = dep[x] + <span class="number">1</span>, fa[y][<span class="number">0</span>]=x; </div><div class="line">			dfs(y);</div><div class="line">		&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">void</span> _dfs(<span class="keyword">int</span> x) &#123;</div><div class="line">	<span class="keyword">int</span> _top = top2, y;</div><div class="line">	<span class="keyword">for</span> ( st[ ++top ] = x; deep[x]-deep[st[top2]] &gt; c; ++top2);</div><div class="line">	_fa[x][<span class="number">0</span>] = st[top2];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; _fa[x][i]; ++i)</div><div class="line">		_fa[x][i+<span class="number">1</span>] = _fa[_fa[x][i]][i];</div><div class="line">		</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=head[x]; i; i = e[i].nxt)</div><div class="line">		<span class="keyword">if</span> (y = e[i].to, y != fa[x][<span class="number">0</span>]) </div><div class="line">			_dfs(y);</div><div class="line">			</div><div class="line">	--top, top2 = _top;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> i, j;</div><div class="line">	<span class="keyword">if</span>(dep[u] &lt; dep[v]) swap(u, v);</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>, j=dep[u]-dep[v]; j; ++i, j&gt;&gt;=<span class="number">1</span>)	</div><div class="line">		<span class="keyword">if</span>(j &amp; <span class="number">1</span>) u = fa[u][i];</div><div class="line">	<span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">17</span>; i&gt;=<span class="number">0</span>; --i) <span class="keyword">if</span>(fa[u][i] != fa[v][i])</div><div class="line">		 u = fa[u][i], v = fa[v][i];</div><div class="line">	<span class="keyword">return</span> fa[u][<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n); <span class="keyword">int</span> u, v, i, j, k; </div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;n; ++i) &#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;c);</div><div class="line">		add(u, v, c), add(v, u, c); </div><div class="line">	&#125;</div><div class="line">	dep[<span class="number">1</span>] = deep[<span class="number">1</span>]=<span class="number">1</span>, dfs(<span class="number">1</span>);</div><div class="line">	 </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=m; ++i)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;c); </div><div class="line">		t[i] = node(u, v, c, i); </div><div class="line">		</div><div class="line">		s[ t[i].c ] += n / t[i].c;</div><div class="line">		<span class="keyword">if</span>(s[ t[i].c ]&gt;n) s[t[i].c] = n;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	sort(t+<span class="number">1</span>, t+m+<span class="number">1</span>, cmp);</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>, c=<span class="number">-1</span>; i &lt;= m; ++i) &#123;</div><div class="line">		u = t[i].u, v = t[i].v;</div><div class="line">		lca = LCA(u, v), sum=<span class="number">0</span>;</div><div class="line">		<span class="keyword">if</span>(s[ t[i].c ] &lt; n) &#123;</div><div class="line">			c = t[i].c;</div><div class="line">			<span class="keyword">for</span> (; deep[u]-deep[lca]&gt;=c; u=k, ++sum) &#123;</div><div class="line">				<span class="keyword">for</span> (j=<span class="number">17</span>, k=u; j&gt;=<span class="number">0</span>; --j)</div><div class="line">					<span class="keyword">if</span>(deep[u] - deep[fa[k][j]] &lt;= c)</div><div class="line">						k = fa[k][j];</div><div class="line">				<span class="keyword">if</span>(k == lca)<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="keyword">for</span> (; deep[v]-deep[lca]&gt;=c; v=k, ++sum) &#123;</div><div class="line">				<span class="keyword">for</span> (j=<span class="number">17</span>, k=v; j&gt;=<span class="number">0</span>; --j)</div><div class="line">					<span class="keyword">if</span>(deep[v]-deep[fa[k][j]] &lt;= c)</div><div class="line">						k = fa[k][j];</div><div class="line">				<span class="keyword">if</span>(k == lca)<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="keyword">if</span>(u!=lca || v!=lca)</div><div class="line">				sum += <span class="number">1</span> + (deep[u]+deep[v]<span class="number">-2</span>*deep[lca]&gt;c);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> (t[i].c != c) c = t[i].c, _dfs(<span class="number">1</span>);</div><div class="line">			<span class="keyword">for</span> (j=<span class="number">17</span>; j&gt;=<span class="number">0</span>; --j)</div><div class="line">				<span class="keyword">if</span> (deep[_fa[u][j]] - deep[lca]&gt;<span class="number">0</span>)</div><div class="line">					u=_fa[u][j], sum += <span class="number">1</span>&lt;&lt;j;</div><div class="line">			<span class="keyword">for</span> (j=<span class="number">17</span>; j&gt;=<span class="number">0</span>; --j)</div><div class="line">				<span class="keyword">if</span> (deep[_fa[v][j]] - deep[lca]&gt;<span class="number">0</span>)</div><div class="line">					v=_fa[v][j], sum += <span class="number">1</span>&lt;&lt;j;</div><div class="line">			<span class="keyword">if</span>(u!=lca || v!=lca)</div><div class="line">				sum += <span class="number">1</span>+(deep[u]+deep[v]<span class="number">-2</span>*deep[lca]&gt;c);</div><div class="line">		&#125;</div><div class="line">		ans[t[i].id] = sum;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=m; ++i) </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-seaeqsereja-and-equality">【CC SEAEQ】Sereja and Equality</h1>
<h2 id="题目大意-1">题目大意</h2>
<p>子串相等在题目中的定义就是离散后对应位置相同的意思， 求所有长度为<span class="math inline">\(n\)</span>的排列中， 相等的逆序对个数不超过<span class="math inline">\(E\)</span>的子串对数。</p>
<h2 id="解题报告-1">解题报告</h2>
<p>首先求出长度为<span class="math inline">\(i\)</span>的逆序对个数不超过<span class="math inline">\(j\)</span>的排列个数， 设<span class="math inline">\(f[i][j]\)</span>表示长度为<span class="math inline">\(i\)</span>逆序对个数为<span class="math inline">\(j\)</span>的方案数， <span class="math display">\[f[i][j]=\sum_{k=0}^{i-1} f[i-1][j-k]\]</span> <span class="math display">\[g[i][j]=\sum_{k=0}^{j}f[i][k]\]</span> 直接转移就可以得到， 复杂度<span class="math inline">\(O(n^2)\)</span></p>
<p>对于一个询问<span class="math inline">\(n,E\)</span> , 枚举相等子串的长度<span class="math inline">\(l\)</span> , 对答案的贡献是<span class="math display">\[((n-l)!C_n^l(n-l+1))^2 \times g[l][E]\]</span></p>
<p>复杂度<span class="math inline">\(O(n^2+nq)\)</span></p>
<h2 id="代码-1">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = int(a), nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = int(a), nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; b; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll </span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">510</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p = <span class="number">1000000007</span>; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> f[N][N*N/<span class="number">2</span>], test, C[N][N], fac[N];</div><div class="line"> </div><div class="line">main() &#123; </div><div class="line">	f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>, f[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>; </div><div class="line">	</div><div class="line">	<span class="keyword">int</span> n = <span class="number">500</span>, E, pE, dl; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123; </div><div class="line">		E = i*(i<span class="number">-1</span>) / <span class="number">2</span>, pE = (i<span class="number">-1</span>)*(i<span class="number">-2</span>)/<span class="number">2</span>; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= E; ++j) &#123;</div><div class="line">			f[i][j] = f[i<span class="number">-1</span>][min(j, pE)]; </div><div class="line">			dl = j - i; </div><div class="line">			<span class="keyword">if</span> (dl &gt;= <span class="number">0</span>) f[i][j] -= f[i<span class="number">-1</span>][dl]; </div><div class="line">			<span class="keyword">if</span> (f[i][j] &gt;= p) f[i][j] -= p; </div><div class="line">			<span class="keyword">if</span> (f[i][j] &lt; <span class="number">0</span>) f[i][j] += p; </div><div class="line">		&#125; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= E; ++j) &#123;</div><div class="line">			f[i][j] += f[i][j<span class="number">-1</span>]; </div><div class="line">			<span class="keyword">if</span> (f[i][j] &gt;= p) f[i][j] -= p ;</div><div class="line">		&#125; </div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	</div><div class="line">	C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</div><div class="line">		C[i][<span class="number">0</span>] = <span class="number">1</span>; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=i; ++j) &#123;</div><div class="line">			C[i][j] = C[i<span class="number">-1</span>][j] + C[i<span class="number">-1</span>][j<span class="number">-1</span>]; </div><div class="line">			<span class="keyword">if</span> (C[i][j] &gt;= p) C[i][j] -= p; </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fac[<span class="number">0</span>] = <span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) </div><div class="line">		fac[i] = <span class="number">1L</span>L * fac[i<span class="number">-1</span>] * i % p; </div><div class="line">	</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;test);  </div><div class="line">	 </div><div class="line">	<span class="keyword">while</span> (test --) &#123; </div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;E); </div><div class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= n; ++l) &#123;</div><div class="line">			ll x = C[n][l]  * fac[n-l] % p  ; </div><div class="line">			ans += x * x % p * (n-l+<span class="number">1</span>) % p * f[l][min(l*(l<span class="number">-1</span>)/<span class="number">2</span>, E)] % p;</div><div class="line">			<span class="keyword">if</span> (ans &gt;= p) ans -= p; </div><div class="line">		&#125; </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans); </div><div class="line">	&#125; </div><div class="line">	</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-parsinsine-partition-function">【CC PARSIN】Sine Partition Function</h1>
<h2 id="题目大意-2">题目大意</h2>
<p><span class="math display">\[f(n, m, x) = \sum_k sin(k_1x)sin(k_2x)···sin(k_mx)\]</span></p>
<p>其中<span class="math inline">\(k_1+k_2+...+k_m=n\)</span> .</p>
<p>求<span class="math inline">\(f(n, m, x)\)</span></p>
<h2 id="解题报告-2">解题报告</h2>
<p>考虑<span class="math inline">\(n+1\)</span> , 有两个情况， 一种在末尾添加一个<span class="math inline">\(sin(x)\)</span>， 一种是将<span class="math inline">\(k_m+1\)</span>。</p>
<p>后一种情况出现和和差角问题， 利用高中（我并没有学过）的三角函数知识， 需要利用<span class="math inline">\(cos(k_mx)\)</span>进行转移。</p>
<p>令<span class="math inline">\(g(n,m,x)=\sum_k sin(k_1x)sin(k_2x)···cos(k_mx)\)</span></p>
<p>可以得到： <span class="math display">\[f(n,m,x)=f(n-1,m,x)cosx+(f(n-1,m-1,x)+g(n-1,m-1,x))sinx\]</span> <span class="math display">\[g(n,m,x)=(f(n-1,m-1,x)-f(n-1,m,x))sinx+g(n-1,m,x)cosx\]</span></p>
<p>因为<span class="math inline">\(m\)</span>很小， 所以把两个数组都压到矩阵里， 大力快速幂+矩阵乘法就搞了。</p>
<h2 id="代码-2">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = int(a), nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = int(a), nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; b; ++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ff; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">31</span>; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> x, y; </div><div class="line">	ff a[M+M][M+M]; </div><div class="line">	matrix() &#123;</div><div class="line">		<span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a)); </div><div class="line">		x = y = <span class="number">0</span>; </div><div class="line">	&#125; </div><div class="line">	matrix(<span class="keyword">int</span> x, <span class="keyword">int</span> y,<span class="keyword">int</span> t=<span class="number">0</span>) </div><div class="line">	:x(x), y(y) &#123; </div><div class="line">		<span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a)); </div><div class="line">		<span class="keyword">if</span> (t == <span class="number">1</span>) </div><div class="line">			REP(i, x) a[i][i] = <span class="number">1</span>; </div><div class="line">	&#125; </div><div class="line">	matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> matrix b)<span class="keyword">const</span>&#123; </div><div class="line">		<span class="function">matrix <span class="title">c</span><span class="params">(x, b.y)</span> </span>; </div><div class="line">		REP(i, c.x) REP(j, c.y) REP(k, y) </div><div class="line">			c.a[i][j] += a[i][k]*b.a[k][j]; </div><div class="line">		<span class="keyword">return</span> c; </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">		</div><div class="line">	 	<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">' '</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">	 	REP(i, x) REP(j, y) <span class="built_in">cout</span> &lt;&lt; a[i][j] &lt;&lt; ((j+<span class="number">1</span>==y)?<span class="string">'\n'</span>:<span class="string">' '</span>);</div><div class="line">	 	</div><div class="line">	 	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">	 &#125; </div><div class="line">	  </div><div class="line">&#125; trans, ini; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> test, n, m; ff X;</div><div class="line"> </div><div class="line"><span class="function">matrix <span class="title">fast</span><span class="params">(matrix x, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line"> 	<span class="function">matrix <span class="title">ans</span><span class="params">(x.x, x.y, <span class="number">1</span>)</span></span>; </div><div class="line"> 	<span class="keyword">for</span> (; k; k&gt;&gt;=<span class="number">1</span>, x=x*x) </div><div class="line"> 		<span class="keyword">if</span> (k &amp; <span class="number">1</span>) ans = ans*x; </div><div class="line"> 	<span class="keyword">return</span> ans; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	ios :: sync_with_stdio(<span class="literal">false</span>); </div><div class="line">	</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; test; </div><div class="line">	<span class="keyword">while</span> (test --) &#123; </div><div class="line">		<span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; X; </div><div class="line">		</div><div class="line">		ini = trans = matrix(); </div><div class="line">		ini.x = (m+<span class="number">1</span>)*<span class="number">2</span>, ini.y = <span class="number">1</span>; </div><div class="line">		ini.a[<span class="number">0</span>][<span class="number">0</span>]=ini.a[m+<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>; </div><div class="line">		</div><div class="line">		trans.x=trans.y=(m+<span class="number">1</span>)*<span class="number">2</span>; </div><div class="line">		ff _s = <span class="built_in">sin</span>(X), _c = <span class="built_in">cos</span>(X); </div><div class="line">		REP(i, trans.x) </div><div class="line">			<span class="keyword">if</span> (i == <span class="number">0</span> || i == m+<span class="number">1</span>) </div><div class="line">				<span class="keyword">continue</span>; </div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (i &lt;= m) &#123; </div><div class="line">					trans.a[i][i<span class="number">-1</span>]=_s; </div><div class="line">					trans.a[i][i]=_c; </div><div class="line">					trans.a[i][m+<span class="number">1</span>+i]=_s; </div><div class="line">				&#125; <span class="keyword">else</span> &#123; </div><div class="line">					trans.a[i][i-(m+<span class="number">1</span>)<span class="number">-1</span>]=_c; </div><div class="line">					trans.a[i][i-(m+<span class="number">1</span>)]=-_s; </div><div class="line">					trans.a[i][i]=_c; </div><div class="line">				&#125; </div><div class="line">		</div><div class="line">		trans = fast(trans, n); </div><div class="line">		</div><div class="line"><span class="comment">//		trans.print(); </span></div><div class="line">		trans = trans * ini; </div><div class="line">		</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; trans.a[m][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-lecoinslittle-elephant-and-colored-coins">【CC LECOINS】Little Elephant and Colored Coins</h1>
<h2 id="题目大意-3">题目大意</h2>
<p>有<span class="math inline">\(n\)</span>种硬币， 每种硬币无限使用， 有一个价值<span class="math inline">\(v\)</span>和颜色<span class="math inline">\(c\)</span>， 每次询问能否凑出价值<span class="math inline">\(S\)</span>， 最多用多少颜色。</p>
<h2 id="解题报告-3">解题报告</h2>
<p>对价值最小的硬币做模意义， 因为价值最大是<span class="math inline">\(200000\)</span>。</p>
<p>设<span class="math inline">\(f[i][j]\)</span>表示使用<span class="math inline">\(i\)</span>种颜色，价值模意义下为<span class="math inline">\(j\)</span>的最小能凑出的价值， 把同一种颜色的硬币放在一起， 对<span class="math inline">\(f[i][j]\)</span>从<span class="math inline">\(f[i-1][k]\)</span>进行更新， 然后利用取模成环的性质，对<span class="math inline">\(f[i][j]\)</span>从<span class="math inline">\(f[i][k]\)</span>更新， 复杂度是<span class="math inline">\(O(n^2*V)\)</span></p>
<p>（要把和价值最小硬币颜色相同的硬币单独拿出来， 更新<span class="math inline">\(f[i][j]\)</span>得到<span class="math inline">\(g[i][j]\)</span>）</p>
<p>询问的时候， 枚举<span class="math inline">\(i\)</span>, 看<span class="math inline">\(f[i][S%V]\)</span>和<span class="math inline">\(S\)</span>的大小关系， 在判断<span class="math inline">\(g[i][S%V]\)</span>和<span class="math inline">\(S\)</span>的大小关系， 更新答案</p>
<p>时间复杂度<span class="math inline">\(O(n^2V+Q*n)\)</span></p>
<h2 id="代码-3">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = int(a), nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = int(a), nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; b; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi; </div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> ll INF = <span class="number">1000000000000000000L</span>L;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200005</span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> n, m, cnt; ll mV, mC, V[N]; </div><div class="line">pii A[<span class="number">64</span>];</div><div class="line">ll R[<span class="number">64</span>][N],  _R[<span class="number">64</span>][N];</div><div class="line"><span class="keyword">bool</span> U[N];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="built_in">vector</span>&lt; pii &gt; T)</span> </span>&#123;</div><div class="line">	FORD (i, cnt, <span class="number">0</span>) REP (it, T.size())</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = mV<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--)</div><div class="line">			<span class="keyword">if</span> (R[i][j] &lt; INF) R[i+<span class="number">1</span>][(j+T[it].se)%mV] = </div><div class="line">					min(R[i+<span class="number">1</span>][(j+T[it].se)%mV], R[i][j]+T[it].se);</div><div class="line">					</div><div class="line">	REP(i, cnt+<span class="number">2</span>) REP(j, T.size()) &#123;</div><div class="line">		ll v = T[j].se, vm = v%mV;</div><div class="line">		<span class="keyword">if</span> (vm == <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">		<span class="keyword">int</span> d = __gcd((ll)vm, mV);</div><div class="line">		REP(x, d) &#123;</div><div class="line">			<span class="keyword">int</span> z = x, y = x;</div><div class="line">			<span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">				<span class="keyword">if</span> (R[i][y] &lt; R[i][z]) z = y;</div><div class="line">				y = (y + vm) % mV;</div><div class="line">				<span class="keyword">if</span> (y == x) <span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			y = z;</div><div class="line">			<span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">				<span class="keyword">int</span> w = (y + vm) % mV;</div><div class="line">				R[i][w] = min(R[i][w], R[i][y]+v);</div><div class="line">				y = w; <span class="keyword">if</span> (y == z) <span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	REP(i, <span class="number">64</span>) REP(j, N) R[i][j] = INF;</div><div class="line">	R[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">	mV = INF, mC = <span class="number">-1</span>;</div><div class="line">	REP(i, n) &#123;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; A[i].se &gt;&gt; A[i].fi;</div><div class="line">		<span class="keyword">if</span> (A[i].se &lt; mV) </div><div class="line">			mV = A[i].se, mC = A[i].fi;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	sort(A, A+n);</div><div class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">	<span class="built_in">vector</span>&lt; pii &gt; _T;</div><div class="line">	<span class="keyword">while</span> (i &lt; n) &#123;</div><div class="line">		<span class="keyword">if</span> (A[i].first == mC) &#123;</div><div class="line">			<span class="keyword">if</span> (A[i].se != mV) _T.pb(A[i]);</div><div class="line">			i ++; <span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">		<span class="built_in">vector</span>&lt; pii &gt; T;</div><div class="line">		<span class="keyword">while</span> (i+j&lt;n &amp;&amp; A[i+j].fi==A[i].fi) </div><div class="line">			T.pb(A[i+j]), j ++;</div><div class="line">			</div><div class="line">		update(T), i += j, cnt ++;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	REP(i, <span class="number">64</span>) REP(j, mV) _R[i][j] = R[i][j];</div><div class="line">	update(_T), cnt ++;</div><div class="line"> </div><div class="line">	<span class="built_in">cin</span> &gt;&gt; m;</div><div class="line">	</div><div class="line">	REP(i, m) &#123; </div><div class="line">		ll s; <span class="keyword">int</span> res = <span class="number">-1</span>;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;s);</div><div class="line">		REP(j, n+<span class="number">1</span>) &#123;</div><div class="line">			ll d = _R[j][s % mV];</div><div class="line">			<span class="keyword">if</span> (d &gt;= INF) <span class="keyword">continue</span>;</div><div class="line">			<span class="keyword">if</span> (d &gt; s) <span class="keyword">continue</span>;</div><div class="line">			<span class="keyword">if</span> (d == s) res = max(res, j);</div><div class="line">			<span class="keyword">else</span> res = max(res, j + <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (!_T.empty()) &#123;</div><div class="line">			REP(j, n+<span class="number">1</span>)  &#123;</div><div class="line">				ll d = R[j][s % mV];</div><div class="line">				<span class="keyword">if</span> (d &gt;= INF) <span class="keyword">continue</span>;</div><div class="line">				<span class="keyword">if</span> (d &gt; s) <span class="keyword">continue</span>;</div><div class="line">				res = max(res, j);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-anudtq-dynamic-trees-and-queries">【CC ANUDTQ】 Dynamic Trees and Queries</h1>
<h2 id="题目大意-4">题目大意</h2>
<p>四种操作： 1. 向一个点连一个权值为<span class="math inline">\(v\)</span>的叶子； 2. 向一个点的子树加一个权值<span class="math inline">\(v\)</span>; 3. 删除一棵子树； 4. 询问一棵子树的权值和；</p>
<h2 id="解题报告-4">解题报告</h2>
<p>本来增加连边的问题要先试试LCT, 但设计子树加和子树查询要维护若干信息， 比较麻烦。</p>
<p>如果用SPLAY维护出栈入栈序就十分的方便， 具体的， 就是每个点有一个入栈点和一个出栈点， 出栈点是没有权值的size的。</p>
<p>剩下就是模板了。。</p>
<h2 id="代码-4">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x) cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; x &lt;&lt;endl;</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> f;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">400020</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> to, nxt; </div><div class="line">	edge(<span class="keyword">int</span> nxt=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>):nxt(nxt),to(to)&#123;&#125;</div><div class="line">&#125; e[N];</div><div class="line"><span class="keyword">int</span> head[N], n, cnt, tot, rec, rt; </div><div class="line"><span class="keyword">int</span> sn[N][<span class="number">2</span>], fa[N], sz[N], s[N], key[N], sm[N], ps[N], dn[N], ot[N], Eu[N]; </div><div class="line">ll ans;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">in</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">char</span> ch = getchar(); <span class="keyword">int</span> f=<span class="number">1</span>,x =<span class="number">0</span>; </div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar())</div><div class="line">		<span class="keyword">if</span> (ch==<span class="string">'-'</span>) f = <span class="number">-1</span>; </div><div class="line">	<span class="keyword">for</span> (;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar())</div><div class="line">		x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">	<span class="keyword">return</span> x*f; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	e[++tot]=edge(head[x], y), head[x]=tot;</div><div class="line">	e[++tot]=edge(head[y], x), head[y]=tot;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">birth</span><span class="params">(<span class="keyword">int</span> _v, <span class="keyword">int</span> _s)</span> </span>&#123;</div><div class="line">	++cnt, sn[cnt][<span class="number">0</span>]=sn[cnt][<span class="number">1</span>]=fa[cnt]=<span class="number">0</span>, sz[cnt]=s[cnt]=_s; </div><div class="line">	key[cnt] = sm[cnt] = _v; <span class="keyword">return</span> cnt;  </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ad</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> _v)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!x) <span class="keyword">return</span>;  </div><div class="line">	ps[x] += _v, sm[x] += _v * sz[x]; </div><div class="line">	key[x] += s[x] * _v; </div><div class="line">&#125; </div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	sz[x] = s[x], sm[x] = key[x]; </div><div class="line">	<span class="keyword">if</span> (sn[x][<span class="number">0</span>]) sz[x] += sz[sn[x][<span class="number">0</span>]], sm[x] += sm[sn[x][<span class="number">0</span>]]; </div><div class="line">	<span class="keyword">if</span> (sn[x][<span class="number">1</span>]) sz[x] += sz[sn[x][<span class="number">1</span>]], sm[x] += sm[sn[x][<span class="number">1</span>]]; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (!x) <span class="keyword">return</span>; </div><div class="line">	<span class="keyword">if</span> (ps[x]) ad(sn[x][<span class="number">0</span>], ps[x]), ad(sn[x][<span class="number">1</span>], ps[x]), ps[x]=<span class="number">0</span>; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> y = fa[x], z = fa[y], d = (sn[y][<span class="number">1</span>]==x); </div><div class="line">	fa[x] = z; <span class="keyword">if</span> (z) sn[z][sn[z][<span class="number">1</span>]==y] = x; </div><div class="line">	<span class="keyword">if</span> (sn[x][d^<span class="number">1</span>]) fa[sn[x][d^<span class="number">1</span>]] = y; sn[y][d] = sn[x][d^<span class="number">1</span>]; </div><div class="line">	fa[y] = x, sn[x][d^<span class="number">1</span>] = y, up(y); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> aim=<span class="number">0</span>)</span></span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> stk[N], top=<span class="number">0</span>, tmp; tmp = x;  </div><div class="line">	<span class="keyword">while</span> (tmp != aim) stk[++top]=tmp, tmp=fa[tmp]; </div><div class="line">	<span class="keyword">while</span> (top) down(stk[top]), --top; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> y=fa[x]; y!=aim; rotate(x), y=fa[x]) &#123;</div><div class="line">		<span class="keyword">if</span> (fa[y] == aim) <span class="keyword">continue</span>; </div><div class="line">		<span class="keyword">if</span> ((sn[y][<span class="number">0</span>]==x)^(sn[fa[y]][<span class="number">0</span>]==y)) rotate(x); </div><div class="line">		<span class="keyword">else</span> rotate(y); </div><div class="line">	&#125;</div><div class="line">	up(x); <span class="keyword">if</span> (!aim) rt = x; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">	Eu[ ++rec ] = dn[x];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=head[x], y; i; i=e[i].nxt)</div><div class="line">		<span class="keyword">if</span> (y = e[i].to, y != fa) dfs(y, x);</div><div class="line">	Eu[ ++rec ] = ot[x];</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">	<span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>, x = Eu[mid];</div><div class="line">	sn[x][<span class="number">0</span>] = build(l, mid<span class="number">-1</span>);</div><div class="line">	<span class="keyword">if</span> (sn[x][<span class="number">0</span>]) fa[sn[x][<span class="number">0</span>]] = x;</div><div class="line">	sn[x][<span class="number">1</span>] = build(mid+<span class="number">1</span>, r); </div><div class="line">	<span class="keyword">if</span> (sn[x][<span class="number">1</span>]) fa[sn[x][<span class="number">1</span>]] = x; </div><div class="line">	up(x); <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	splay(x);</div><div class="line">	<span class="keyword">if</span> (!sn[x][<span class="number">0</span>]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (x = sn[x][<span class="number">0</span>], down(x); sn[x][<span class="number">1</span>];) </div><div class="line">		x = sn[x][<span class="number">1</span>], down(sn[x][<span class="number">1</span>]);</div><div class="line">	<span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">main() &#123;</div><div class="line"><span class="comment">//	freopen("A.in", "r", stdin); </span></div><div class="line">	n = in();</div><div class="line">	REP(i, <span class="number">1</span>, n) &#123;</div><div class="line">		dn[i] = birth(in(), <span class="number">1</span>);</div><div class="line">		ot[i] = birth(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">	REP(i, <span class="number">1</span>, n<span class="number">-1</span>) add(in()+<span class="number">1</span>, in()+<span class="number">1</span>);</div><div class="line">	dfs(<span class="number">1</span>, <span class="number">0</span>), rt = build(<span class="number">1</span>, rec);</div><div class="line">	</div><div class="line">	<span class="keyword">int</span> t, x, tmp; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> m = in(); m--; ) &#123;</div><div class="line">		t = in(), x = in()+<span class="number">1</span>+ans;</div><div class="line">		<span class="keyword">if</span> (t == <span class="number">1</span>)&#123;</div><div class="line">			dn[++n] = birth(in(), <span class="number">1</span>), ot[n] = birth(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">			sn[dn[n]][<span class="number">1</span>] = ot[n], fa[ot[n]] = dn[n]; </div><div class="line">			splay(ot[x]), tmp = sn[ot[x]][<span class="number">0</span>];</div><div class="line">			sn[ot[x]][<span class="number">0</span>] = dn[n], fa[dn[n]] = ot[x];</div><div class="line">			sn[dn[n]][<span class="number">0</span>] = tmp;</div><div class="line">			<span class="keyword">if</span> (tmp) fa[tmp] = dn[n];</div><div class="line">			up(dn[n]), up(ot[x]); </div><div class="line"><span class="comment">//			DEBUG(sz[ot[x]]); </span></div><div class="line">		&#125;  	</div><div class="line">		<span class="keyword">if</span> (t == <span class="number">2</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (!pre(dn[x])) </div><div class="line">				splay(ot[x]), ad(sn[rt][<span class="number">0</span>], in()), up(rt); </div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				splay(pre(dn[x])), splay(ot[x], rt);</div><div class="line">				ad(sn[sn[rt][<span class="number">1</span>]][<span class="number">0</span>], in());</div><div class="line">				up(sn[rt][<span class="number">1</span>]), up(rt); </div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (t == <span class="number">3</span>) &#123;</div><div class="line">			splay(pre(dn[x])), splay(ot[x], rt);</div><div class="line">			sn[sn[rt][<span class="number">1</span>]][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">			up(sn[rt][<span class="number">1</span>]), up(rt); </div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (t == <span class="number">4</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (!pre(dn[x]))</div><div class="line">				splay(ot[x]), <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans=sm[sn[rt][<span class="number">0</span>]]);</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				splay(pre(dn[x])), splay(ot[x], rt);</div><div class="line">				<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans=sm[sn[sn[rt][<span class="number">1</span>]][<span class="number">0</span>]]);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-matchexpected-maximum-matching">【CC MATCH】Expected Maximum Matching</h1>
<h2 id="题目大意-5">题目大意</h2>
<p>一个二分图， 点<span class="math inline">\(i\)</span>和点<span class="math inline">\(j\)</span>之间有边相连的概率为<span class="math inline">\(p[i][j]\)</span>, 求期望最大匹配数。</p>
<h2 id="解题报告-5">解题报告</h2>
<p>有一个叫做Hall定理的东西， 内容大概是， 二分图存在完美匹配的充分必要条件是一类点的任意一个大小为<span class="math inline">\(x\)</span>的点集都与另一类点中<span class="math inline">\(&gt;=x\)</span>个点相连。</p>
<p>可以注意到， 左边的点数量少到出奇， 这使得合法的状态非常的少， 使用<span class="math inline">\(2^{2^n}\)</span>表示子集是否满足Hall定理，因为子集满足Hall定理具有包含关系，也就是一个集合满足， 他的子集都需要满足， 所以通过打表， 发现状态数十分的有限。</p>
<p>然后预处理转移， 对于一个状态<span class="math inline">\(x\)</span>, 预处理出与一个右侧的点联通情况为<span class="math inline">\(S\)</span>时，得到的Hall定理状态为<span class="math inline">\(nxt\)</span> ，再预处理出与左侧每个点联通情况为<span class="math inline">\(S\)</span>的概率。</p>
<p>之后直接dp, <span class="math inline">\(f[i][j]\)</span>表示右侧前<span class="math inline">\(i\)</span>个点， Hall定理状态为<span class="math inline">\(j\)</span>的概率， 直接计算期望就好了。</p>
<h2 id="代码-5">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> B(x) (1u&lt;&lt;(x))</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5010</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">105</span>; </div><div class="line"></div><div class="line"><span class="keyword">int</span> trans[N][<span class="number">40</span>],ful[<span class="number">6</span>],as[N],n,m,w,tot; </div><div class="line">ff f[M][N],g[M][<span class="number">40</span>],p[M][<span class="number">6</span>]; ui q[N]; <span class="built_in">map</span>&lt;ui,<span class="keyword">int</span>&gt; hsh; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(ui S)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (hsh.count(S) == <span class="number">0</span>) q[hsh[S] = tot++]=S; </div><div class="line">	<span class="keyword">return</span> hsh[S]; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m); w = <span class="number">1</span>&lt;&lt;n; </div><div class="line">	rep(i, n) rep(j, m) <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;p[j][i]); </div><div class="line">	rep(i,w) &#123;<span class="keyword">int</span> cnt=<span class="number">0</span>; rep(j,n) <span class="keyword">if</span>(i&amp;B(j)) ++cnt; ful[cnt]|=B(i);&#125;</div><div class="line">	<span class="keyword">int</span> k = <span class="number">0</span>; </div><div class="line">	<span class="keyword">for</span> (find(<span class="number">1</span>); k&lt;tot; ++k) &#123; </div><div class="line">		ui x = q[k]; </div><div class="line">		<span class="keyword">static</span> ui nxt[<span class="number">6</span>];</div><div class="line">		rep(i, n) nxt[i] = <span class="number">0</span>; </div><div class="line">		rep(i, w) <span class="keyword">if</span> (x &amp; B(i)) rep(j, n) nxt[j]|=B(i|B(j)); </div><div class="line">		rep(i, w) &#123; ui S = x ; </div><div class="line">			rep(j, n) <span class="keyword">if</span> (i&amp;B(j)) S|=nxt[j]; </div><div class="line">			trans[k][i] = find(S); </div><div class="line">		&#125; </div><div class="line">		VEP(i, n, <span class="number">0</span>) <span class="keyword">if</span> (x&amp;ful[i]) &#123;as[k]=i; <span class="keyword">break</span>;&#125;</div><div class="line">	&#125;</div><div class="line">	rep(i, m) rep(x, w) &#123; g[i][x]=<span class="number">1</span>;rep(j,n) </div><div class="line">		<span class="keyword">if</span>(x&amp;B(j))g[i][x]*=p[i][j];<span class="keyword">else</span> g[i][x]*=(<span class="number">1</span>-p[i][j]);&#125; </div><div class="line">	</div><div class="line">	</div><div class="line">	f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>; rep(i, m) rep(k, tot) rep(x, w) </div><div class="line">		f[i+<span class="number">1</span>][trans[k][x]] += f[i][k] * g[i][x]; </div><div class="line"></div><div class="line">	ff ans = <span class="number">0</span>; </div><div class="line">	rep(i, tot) ans += f[m][i] * (ff)as[i]; </div><div class="line">	</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>, ans); </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-cot5count-on-a-treap">【CC COT5】Count on a Treap</h1>
<h2 id="题目大意-6">题目大意</h2>
<p>维护一颗Treap, 支持: 1. 插入一个key和weight分别为k, w的点； 2. 删除一个key是k的点； 3. 返回key是ku和kv的两个点在树上的距离；</p>
<h2 id="解题报告-6">解题报告</h2>
<p>主要就是挖掘Treap的性质， 也就是Treap上的点<span class="math inline">\(x\)</span>是点<span class="math inline">\(y\)</span>的祖先， 当且仅当key在<span class="math inline">\(x\)</span>，<span class="math inline">\(y\)</span>之间的数重量都小于<span class="math inline">\(w_x\)</span>;</p>
<p>treap上两个点的LCA就是key在两点之间的重量最大数， 这个使用区间最大值的 位置就可以确定；</p>
<p>那么关键就是确定一个点在treap中的深度， 这个利用点<span class="math inline">\(x\)</span>是点<span class="math inline">\(y\)</span>的祖先的条件， 分别寻找点左右两侧的祖先数量， 求和就可以得到深度。</p>
<p>点<span class="math inline">\(x\)</span>左、右祖先的个数， 实际是维护一个向左、右单调递增的序列，这个通过记录区间max和区间向左向右单增序列长度， 可以单次<span class="math inline">\(\log n\)</span>(分入左右子树)进行合并， 从而<span class="math inline">\(O(n\log^2 n)\)</span>修改+查询；</p>
<h2 id="代码-6">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i)</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ask</span>  &#123;</span></div><div class="line">	<span class="keyword">int</span> tp; ui x, y;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tp);</div><div class="line">		<span class="keyword">if</span> (tp==<span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">"%u"</span>,&amp;x); </div><div class="line">		<span class="keyword">else</span> <span class="built_in">scanf</span>(<span class="string">"%u%u"</span>, &amp;x, &amp;y);</div><div class="line">	&#125;</div><div class="line">&#125; as[N];</div><div class="line"> </div><div class="line">ui x[N],y[N];</div><div class="line"> </div><div class="line"><span class="keyword">int</span> n, m, now, ans;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(ui *a, ui x)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> l=<span class="number">1</span>, r=m+<span class="number">1</span>, ans=<span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (l &lt; r) &#123;</div><div class="line">		<span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span> (a[mid] &gt;= x)</div><div class="line">			ans = mid, r = mid;</div><div class="line">		<span class="keyword">else</span> l = mid+<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> l[N&lt;&lt;<span class="number">2</span>], r[N&lt;&lt;<span class="number">2</span>], we[N&lt;&lt;<span class="number">2</span>], mx[N&lt;&lt;<span class="number">2</span>];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findl</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (v==<span class="number">0</span>) <span class="keyword">return</span> l[x];</div><div class="line">	<span class="keyword">if</span> (v &gt; mx[x]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (l[x] == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span> (v &lt;= mx[x&lt;&lt;<span class="number">1</span>]) </div><div class="line">		<span class="keyword">return</span> l[x]-l[x&lt;&lt;<span class="number">1</span>]+findl(x&lt;&lt;<span class="number">1</span>, v);</div><div class="line">	<span class="keyword">return</span> findl(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, v);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findr</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (v==<span class="number">0</span>) <span class="keyword">return</span> r[x];</div><div class="line">	<span class="keyword">if</span> (v &gt; mx[x]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (r[x] == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span> (v &lt;= mx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]) </div><div class="line">		<span class="keyword">return</span> r[x]-r[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+findr(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,v);</div><div class="line">	<span class="keyword">return</span> findr(x&lt;&lt;<span class="number">1</span>,v);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (mx[x&lt;&lt;<span class="number">1</span>]&gt;mx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]) &#123;</div><div class="line">		mx[x]=mx[x&lt;&lt;<span class="number">1</span>]; we[x]=we[x&lt;&lt;<span class="number">1</span>];</div><div class="line">	&#125; <span class="keyword">else</span>  &#123;</div><div class="line">		mx[x]=mx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]; we[x]=we[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</div><div class="line">	&#125;</div><div class="line">	l[x]=l[x&lt;&lt;<span class="number">1</span>]+findl(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mx[x&lt;&lt;<span class="number">1</span>]);</div><div class="line">	r[x]=r[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+findr(x&lt;&lt;<span class="number">1</span>,mx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ll,<span class="keyword">int</span> rr,<span class="keyword">int</span> _l,<span class="keyword">int</span> _r)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (ll == rr) &#123;</div><div class="line">		l[x]=<span class="number">1</span>, r[x]=<span class="number">1</span>, we[x]=ll, mx[x]=_r;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">int</span> mid=ll+rr&gt;&gt;<span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span> (_l&lt;=mid) insert(x&lt;&lt;<span class="number">1</span>,ll,mid,_l,_r); </div><div class="line">		<span class="keyword">else</span> insert(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,rr,_l,_r);</div><div class="line">		push_up(x);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ll,<span class="keyword">int</span> rr,<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (ll==rr) &#123;</div><div class="line">		l[x]=<span class="number">0</span>, r[x]=<span class="number">0</span>, we[x]=<span class="number">0</span>, mx[x]=<span class="number">0</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">int</span> mid=ll+rr&gt;&gt;<span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span> (mid&gt;=p) del(x&lt;&lt;<span class="number">1</span>,ll,mid,p); </div><div class="line">		<span class="keyword">else</span> del(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,rr,p);</div><div class="line">		push_up(x);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findl</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ll,<span class="keyword">int</span> rr,<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (ll==rr) &#123;</div><div class="line">		now=mx[x]; <span class="keyword">return</span> <span class="number">1</span>; </div><div class="line">	&#125; <span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">int</span> mid=ll+rr&gt;&gt;<span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span> (mid&gt;=p) &#123;</div><div class="line">			<span class="keyword">int</span> ans=findl(x&lt;&lt;<span class="number">1</span>,ll,mid,p);</div><div class="line">			ans+=findl(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,now);</div><div class="line">			now=max(now,mx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]); <span class="keyword">return</span> ans;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">return</span> findl(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,rr,p);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findr</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ll,<span class="keyword">int</span> rr,<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (ll==rr) &#123;</div><div class="line">		now=mx[x]; <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">int</span> mid=ll+rr&gt;&gt;<span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span> (mid&gt;=p) <span class="keyword">return</span> findr(x&lt;&lt;<span class="number">1</span>,ll,mid,p);</div><div class="line">		<span class="keyword">else</span>  &#123;</div><div class="line">			<span class="keyword">int</span> ans=findr(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,rr,p);</div><div class="line">			ans+=findr(x&lt;&lt;<span class="number">1</span>,now);</div><div class="line">			now=max(now,mx[x&lt;&lt;<span class="number">1</span>]); <span class="keyword">return</span> ans;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findd</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> findl(<span class="number">1</span>,<span class="number">1</span>,m,x)+findr(<span class="number">1</span>,<span class="number">1</span>,m,x);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">findmax</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ll,<span class="keyword">int</span> rr,<span class="keyword">int</span> _l,<span class="keyword">int</span> _r)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (ll&gt;_r||rr&lt;_l) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">if</span> (ll&gt;=_l&amp;&amp;rr&lt;=_r) &#123;</div><div class="line">		<span class="keyword">if</span> (mx[x]&gt;now) </div><div class="line">			now=mx[x], ans=we[x];</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> mid=ll+rr&gt;&gt;<span class="number">1</span>;</div><div class="line">	findmax(x&lt;&lt;<span class="number">1</span>,ll,mid,_l,_r);</div><div class="line">	findmax(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,rr,_l,_r);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) as[i].read();</div><div class="line">	m=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span> (as[i].tp==<span class="number">0</span>) &#123;</div><div class="line">		x[++m]=as[i].x; y[m]=as[i].y;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	sort(x+<span class="number">1</span>,x+m+<span class="number">1</span>);</div><div class="line">	sort(y+<span class="number">1</span>,y+m+<span class="number">1</span>);</div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">		<span class="keyword">if</span> (as[i].tp==<span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">int</span> l=find(x,as[i].x),r=find(y,as[i].y);</div><div class="line">			insert(<span class="number">1</span>,<span class="number">1</span>,m,l,r);</div><div class="line">		&#125; </div><div class="line">		<span class="keyword">if</span> (as[i].tp==<span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">int</span> l=find(x,as[i].x); del(<span class="number">1</span>,<span class="number">1</span>,m,l);</div><div class="line">		&#125; </div><div class="line">		<span class="keyword">if</span> (as[i].tp==<span class="number">2</span>) &#123;</div><div class="line">			<span class="keyword">int</span> l=find(x,as[i].x),r=find(x,as[i].y); now=<span class="number">0</span>; ans=<span class="number">0</span>;</div><div class="line">			<span class="keyword">if</span> (l&gt;r) swap(l,r);</div><div class="line">			findmax(<span class="number">1</span>,<span class="number">1</span>,m,l,r);</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,findd(l)+findd(r)-findd(ans)*<span class="number">2</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-fnfibonacci-number">【CC FN】Fibonacci Number</h1>
<h2 id="题目大意-7">题目大意</h2>
<p>在<span class="math inline">\(\mod \ p\)</span>意义下, 斐波那契数列第<span class="math inline">\(n\)</span>项<span class="math inline">\(f_n=C\)</span>的最小的<span class="math inline">\(n\)</span>.</p>
<h2 id="解题报告-7">解题报告</h2>
<p>题目中说<span class="math inline">\(p \mod 10=1/9\)</span>, 这个性质就保证了<span class="math inline">\(\sqrt{5}\)</span>在<span class="math inline">\(\mod p\)</span>意义下存在对应整数（<span class="math inline">\(5^{(p-1)/2}=1(\mod p)\)</span>）；</p>
<p>现在令<span class="math inline">\(x=\frac{\sqrt{5}+1}{2}\)</span>, 则<span class="math inline">\(x^n-(-x)^{-n}=\sqrt{5}C\)</span></p>
<p>从而， 对<span class="math inline">\(n\)</span>分奇偶情况讨论， 得到：</p>
<ol style="list-style-type: decimal">
<li><span class="math inline">\(n\)</span>为偶数， 且<span class="math inline">\((x^n)^2-\sqrt{5}C \times (x^n)-1=0\)</span>;</li>
<li><span class="math inline">\(n\)</span>为奇数， 且<span class="math inline">\((x^n)^2-\sqrt{5}C \times (x^n)+1=0\)</span>;</li>
</ol>
<p>利用求根公式+二次剩余+BSGS可以得到最小的<span class="math inline">\(n\)</span> ;</p>
<p>关于二次剩余， 求<span class="math inline">\(x^2=n(\mod p)\)</span> , 先随机找到一个<span class="math inline">\(w=a^2-n\)</span>, 且<span class="math inline">\(w^{(p-1)/2}=-1(\mod p)\)</span>, 那么<span class="math inline">\(x=(a+ \sqrt{w})^{(p+1)/2}\)</span>就是一个合法的<span class="math inline">\(x\)</span>;</p>
<p>因为<span class="math inline">\(x^2 = (a+\sqrt{w})^{p+1}=a^2-w=n\)</span></p>
<h2 id="代码-7">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> Hm = <span class="number">4705219</span>;</div><div class="line"> </div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> seed;</div><div class="line"><span class="keyword">int</span> C,p,w,r2,s5,L,A;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hmap</span> &#123;</span></div><div class="line"> </div><div class="line">	<span class="keyword">int</span> info[Hm][<span class="number">2</span>],nxt[Hm],head[Hm],use[Hm],cnt,tot; </div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= cnt;i ++) head[use[i]] = <span class="number">0</span>;</div><div class="line">		cnt = <span class="number">0</span>, tot = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> mi,<span class="keyword">int</span> va)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> p = va % Hm;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = head[p];i;i = nxt[i])</div><div class="line">			<span class="keyword">if</span> (info[i][<span class="number">0</span>] == va) <span class="keyword">return</span>;</div><div class="line">		info[++ tot][<span class="number">0</span>] = va,info[tot][<span class="number">1</span>] = mi;</div><div class="line">		<span class="keyword">if</span> (!head[p]) use[++ cnt] = p;</div><div class="line">		nxt[tot] = head[p],head[p] = tot;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> va)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> p = va % Hm;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = head[p];i;i = nxt[i])</div><div class="line">			<span class="keyword">if</span> (info[i][<span class="number">0</span>] == va) <span class="keyword">return</span> info[i][<span class="number">1</span>];</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">&#125; hsh[<span class="number">2</span>];</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Z</span> &#123;</span></div><div class="line">	LL a,b; Z(<span class="keyword">void</span>)&#123;&#125;</div><div class="line">	Z(LL a,LL b) : a(a),b(b)&#123;&#125;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">Z <span class="keyword">operator</span> *(<span class="keyword">const</span> Z &amp;a,<span class="keyword">const</span> Z &amp;b) &#123;</div><div class="line">	<span class="keyword">return</span> Z((a.a * b.a % p + a.b * b.b % p * w % p) % p,(a.a * b.b % p + a.b * b.a % p) % p);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">updt</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (b == <span class="number">-1</span>) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">if</span> (a == <span class="number">-1</span>) a = b; <span class="keyword">else</span></div><div class="line">		a = min(a,b);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">RAND</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> (seed = (seed * <span class="number">31</span> + <span class="number">998244353</span>));</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fast</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">	LL as = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(;b;b &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) as = as * a % p;</div><div class="line">		a = a * <span class="number">1l</span>l * a % p;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> as;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function">Z <span class="title">fast</span><span class="params">(Z a,<span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">	Z as = Z(<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">	<span class="keyword">for</span>(;b;b &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) as = as * a;</div><div class="line">		a = a * a;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> as;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lerend</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (fast(n,(p - <span class="number">1</span>) / <span class="number">2</span>) == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> _sqrt(<span class="keyword">int</span> n) &#123;</div><div class="line">	<span class="keyword">if</span> (!n) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (lerend(n) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	<span class="keyword">int</span> a;</div><div class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">		a = RAND() % p;</div><div class="line">		w = (a * <span class="number">1l</span>l * a - n + p) % p;</div><div class="line">		<span class="keyword">if</span> (lerend(w) == <span class="number">-1</span>) <span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	Z cur = Z(a,<span class="number">1</span>);</div><div class="line">	cur = fast(cur,(p + <span class="number">1</span>) / <span class="number">2</span>);</div><div class="line">	<span class="keyword">return</span> cur.a;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> _solve(<span class="keyword">int</span> sig,<span class="keyword">int</span> tar) &#123;</div><div class="line">	<span class="keyword">int</span> mi = <span class="number">-1</span>,least = fast(fast(A,L),p - <span class="number">2</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,tmp = tar;i &lt;= p / L;i ++,tmp = <span class="number">1l</span>l * tmp * least % p) &#123;</div><div class="line">		<span class="keyword">int</span> fr = i * L,v = hsh[(sig - (fr &amp; <span class="number">1</span>) + <span class="number">2</span>) % <span class="number">2</span>].find(tmp);</div><div class="line">		<span class="keyword">if</span> (v == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">		updt(mi,v + fr);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> mi;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;C, &amp;p);</div><div class="line">	r2 = fast(<span class="number">2</span>,p - <span class="number">2</span>),s5 = _sqrt(<span class="number">5</span>);</div><div class="line">	L = <span class="built_in">sqrt</span>(p);</div><div class="line">	A = (<span class="number">1</span> + s5) % p * <span class="number">1l</span>l * r2 % p;</div><div class="line">	hsh[<span class="number">0</span>].clear();</div><div class="line">	hsh[<span class="number">1</span>].clear();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,tmp = <span class="number">1</span>;i &lt; L;i ++,tmp = tmp * <span class="number">1l</span>l * A % p)</div><div class="line">		hsh[i &amp; <span class="number">1</span>].push(i,tmp);</div><div class="line">	C = C * <span class="number">1l</span>l * s5 % p;</div><div class="line">	<span class="keyword">int</span> Ans = <span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> od = <span class="number">0</span>,sig = <span class="number">1</span>;od &lt; <span class="number">2</span>;od ++,sig *= <span class="number">-1</span>) &#123;</div><div class="line">		<span class="keyword">int</span> delta = (C * <span class="number">1l</span>l * C % p + <span class="number">4</span> * sig % p + p) % p;</div><div class="line">		delta = _sqrt(delta);</div><div class="line">		<span class="keyword">if</span> (delta == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">		updt(Ans,_solve(od,(C + delta) % p * <span class="number">1l</span>l * r2 % p));</div><div class="line">		updt(Ans,_solve(od,(C - delta + p) % p * <span class="number">1l</span>l * r2 % p));</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Ans);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	seed = <span class="number">17</span>;</div><div class="line">	<span class="keyword">int</span> T;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">	<span class="keyword">for</span>(;T;T --) work();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125; </div><div class="line">```	</div><div class="line"></div><div class="line"># 【CC SEALCM】Sereja <span class="keyword">and</span> LCM</div><div class="line">## 题目大意</div><div class="line"></div><div class="line">对于$k \in [l,r]$, 其中满足$k|LCM(a_1,a_2...a_n)$且$max(a_i)&lt;=m$的数列个数。 </div><div class="line"></div><div class="line">## 解题报告</div><div class="line"></div><div class="line">这是一个千载难逢的水题呀！</div><div class="line"></div><div class="line">因为$m$和$k$的范围都很小， 所以质因子的个数最多只有$<span class="number">5</span>$个； </div><div class="line"></div><div class="line">用一个$<span class="number">2</span>^<span class="number">5</span>$表示$k$的每个质因子是否满足的状态， 然后压到矩阵里， 大力转移就可以了。</div><div class="line"></div><div class="line">## 代码</div><div class="line"></div><div class="line">```c++</div><div class="line">#include &lt;bits/stdc++.h&gt; </div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> B(x) (1&lt;&lt;(x))</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p = <span class="number">1000000007</span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> n, test, m, l, r, t, a[<span class="number">5</span>]; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line"> 	t = <span class="number">0</span>; <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a)); </div><div class="line"> 	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i*i&lt;=d; ++i) </div><div class="line"> 		<span class="keyword">if</span> (d % i==<span class="number">0</span>) &#123; </div><div class="line"> 			a[t++]=<span class="number">1</span>; <span class="keyword">while</span>(d%i==<span class="number">0</span>)a[t<span class="number">-1</span>]*=i,d/=i;  </div><div class="line"> 		&#125; </div><div class="line">  	<span class="keyword">if</span> (d &gt; <span class="number">1</span>) a[t++]=d, d=<span class="number">1</span>; </div><div class="line">&#125; </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> x, y; ll a[<span class="number">20</span>][<span class="number">20</span>]; </div><div class="line">	matrix()&#123;x=y=<span class="number">0</span>; <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));&#125;</div><div class="line">	matrix(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> t=<span class="number">0</span>):x(x),y(y) &#123;</div><div class="line">		<span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a)); </div><div class="line">		<span class="keyword">if</span>(t) rep(i, x) a[i][i]=<span class="number">1</span>; </div><div class="line">	&#125; </div><div class="line">	matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> matrix b) <span class="keyword">const</span> &#123; </div><div class="line">		<span class="function">matrix <span class="title">c</span><span class="params">(x, b.y)</span> </span>;</div><div class="line">		rep(i, c.x) rep(j, c.y) rep(k, y)</div><div class="line">			c.a[i][j]=(c.a[i][j]+a[i][k]*b.a[k][j]%p)%p; </div><div class="line">		<span class="keyword">return</span> c; </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; </div><div class="line">		<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">", "</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">		rep(i, x) rep(j, y) <span class="built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;((j+<span class="number">1</span>==y)?<span class="string">'\n'</span>:<span class="string">' '</span>); </div><div class="line">	&#125; </div><div class="line">	</div><div class="line">&#125; ;</div><div class="line"> </div><div class="line">matrix _fast(matrix x, <span class="keyword">int</span> k) &#123;</div><div class="line">	<span class="function">matrix <span class="title">as</span><span class="params">(x.x, x.y, <span class="number">1</span>)</span></span>; </div><div class="line">	<span class="keyword">for</span> (;k; k&gt;&gt;=<span class="number">1</span>, x=x*x)<span class="keyword">if</span>(k&amp;<span class="number">1</span>)as=as*x;</div><div class="line">	<span class="keyword">return</span> as; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;test); </div><div class="line">	<span class="keyword">while</span> (test --) &#123; </div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;l, &amp;r); </div><div class="line">		<span class="keyword">int</span> as = <span class="number">0</span>; </div><div class="line">		REP(d, l, r) &#123; </div><div class="line">			divide(d); <span class="keyword">int</span> w=B(t); <span class="function">matrix <span class="title">trs</span><span class="params">(w, w)</span></span>;  </div><div class="line">			rep(i, w) REP(x,<span class="number">1</span>,m) &#123; <span class="keyword">int</span> S=i; </div><div class="line">				rep(j, t) <span class="keyword">if</span> (x%a[j]==<span class="number">0</span>) S|=B(j); </div><div class="line">				trs.a[S][i]++;</div><div class="line">			&#125;</div><div class="line"><span class="comment">//			trs.print(); </span></div><div class="line">			trs=_fast(trs, n); </div><div class="line">			<span class="function">matrix <span class="title">ini</span><span class="params">(w, <span class="number">1</span>)</span></span>; ini.a[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>; </div><div class="line">			ini = trs*ini; </div><div class="line">			as += ini.a[w<span class="number">-1</span>][<span class="number">0</span>]; <span class="keyword">if</span>(as&gt;=p)as-=p; </div><div class="line">		&#125; </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, as); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-qtreequeries-on-tree-again">【CC QTREE】Queries on tree again!</h1>
<h2 id="题目大意-8">题目大意</h2>
<p>环套树上两点的最短路径的最大连续字段和；</p>
<h2 id="解题报告-8">解题报告</h2>
<p>强行树-&gt;环套树 。。。</p>
<p>首先把环拆开， 变成一棵树+一条边， 对于每个操作<span class="math inline">\(x,y\)</span>进行特判， 判断是否走零散的那一条边。</p>
<p>然后用线段树，树链剖分后，对于每一个区间维护最大连续子段和，最小连续子段和，前缀最大子段和， 后缀最大子段和，前缀最小子段和， 后缀最小子段和， 区间变号标记。</p>
<p>修改的话非常的normal，就是直接树链剖分+线段树区间修改，查询的话比较麻烦， 因为需要完成从深到浅+由浅入深两个过程， 对应线段树的两种区间查询， 写的时候就比较冗长。</p>
<h2 id="代码-8">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for (int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100001</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> S=<span class="number">400001</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> <span class="keyword">int</span> nxt,to,c; </div><div class="line">	edge(<span class="keyword">int</span> nxt=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>,<span class="keyword">int</span> c=<span class="number">0</span>):nxt(nxt),to(to),c(c)&#123;&#125;</div><div class="line">&#125; e[N&lt;&lt;<span class="number">1</span>]; </div><div class="line"><span class="keyword">int</span> n,hed[N],tot,va[N],sn[N],sz[N],de[N],tp[N],f[N],dn[N],bd[N],cnt,u,v,w; </div><div class="line"><span class="keyword">int</span> mnl[S],mnr[S],mn[S],mxl[S],mxr[S],mx[S],sm[S],rv[S],as,asr,m; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> c)</span> </span>&#123;e[++tot]=edge(hed[x],y,c),hed[x]=tot;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>; </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar())x=x*<span class="number">10</span>+ch<span class="number">-48</span>; x*=f; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	de[x]=de[f[x]]+<span class="number">1</span>,sz[x]=<span class="number">1</span>,sn[x]=<span class="number">0</span>; <span class="keyword">int</span> y;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt) <span class="keyword">if</span>(y=e[i].to,!sz[y]) </div><div class="line">		va[y]=e[i].c,f[y]=x,dfs(y),sz[x]+=sz[y],sn[x]=((sz[y]&gt;sz[sn[x]])?y:sn[x]); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">odr</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> top)</span> </span>&#123;</div><div class="line">	tp[x]=top,dn[x]=++cnt,bd[cnt]=x; </div><div class="line">	<span class="keyword">if</span> (sn[x]) &#123; odr(sn[x],top); <span class="keyword">int</span> y;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt) </div><div class="line">			<span class="keyword">if</span>(y=e[i].to,de[y]==de[x]+<span class="number">1</span>&amp;&amp;y!=sn[x]) odr(y,y); </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _lca(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123; </div><div class="line">	<span class="keyword">int</span> fx=tp[x], fy=tp[y]; </div><div class="line">	<span class="keyword">while</span> (fx!=fy) &#123; <span class="keyword">if</span> (de[fx]&lt;de[fy]) swap(fx,fy),swap(x,y); </div><div class="line">		x=f[fx], fx=tp[x];</div><div class="line">	&#125;  <span class="keyword">if</span> (de[x]&gt;de[y]) swap(x,y); <span class="keyword">return</span> x; </div><div class="line">&#125; </div><div class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _dis(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123; <span class="keyword">return</span> de[x]+de[y]-de[_lca(x,y)]*<span class="number">2</span>;&#125;</div><div class="line"> </div><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _rev(<span class="keyword">int</span> x) &#123; </div><div class="line">	sm[x]=-sm[x],rv[x]^=<span class="number">1</span>,swap(mn[x],mx[x]),swap(mnl[x],mxl[x]),swap(mnr[x],mxr[x]); </div><div class="line">	mn[x]=-mn[x],mx[x]=-mx[x],mnl[x]=-mnl[x],mnr[x]=-mnr[x],mxl[x]=-mxl[x],mxr[x]=-mxr[x]; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	sm[x]=sm[x&lt;&lt;<span class="number">1</span>]+sm[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>], mx[x]=max(mxr[x&lt;&lt;<span class="number">1</span>]+mxl[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],max(mx[x&lt;&lt;<span class="number">1</span>],mx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])); </div><div class="line">	mxl[x]=max(mxl[x&lt;&lt;<span class="number">1</span>],sm[x&lt;&lt;<span class="number">1</span>]+mxl[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]); </div><div class="line">	mxr[x]=max(mxr[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],sm[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+mxr[x&lt;&lt;<span class="number">1</span>]); </div><div class="line">	mn[x]=min(mnr[x&lt;&lt;<span class="number">1</span>]+mnl[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],min(mn[x&lt;&lt;<span class="number">1</span>],mn[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])); </div><div class="line">	mnl[x]=min(mnl[x&lt;&lt;<span class="number">1</span>],sm[x&lt;&lt;<span class="number">1</span>]+mnl[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]); </div><div class="line">	mnr[x]=min(mnr[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],sm[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+mnr[x&lt;&lt;<span class="number">1</span>]); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">if</span> (rv[x]) _rev(x&lt;&lt;<span class="number">1</span>),_rev(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>),rv[x]=<span class="number">0</span>;&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (l==r) &#123;  mn[x]=mnl[x]=mnr[x]=mx[x]=mxl[x]=mxr[x]=sm[x]=va[bd[l]];&#125; </div><div class="line">	<span class="keyword">else</span> &#123; <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; build(x&lt;&lt;<span class="number">1</span>,l,mid),build(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r); up(x);&#125; </div><div class="line">&#125; </div><div class="line"><span class="keyword">void</span> _rivers(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> _l,<span class="keyword">int</span> _r) &#123; </div><div class="line">	<span class="keyword">if</span> (_l&lt;=l&amp;&amp;r&lt;=_r) _rev(x);</div><div class="line">	<span class="keyword">else</span> &#123; <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;  down(x); </div><div class="line">		<span class="keyword">if</span> (_l&lt;=mid)_rivers(x&lt;&lt;<span class="number">1</span>,l,mid,_l,_r); </div><div class="line">		<span class="keyword">if</span> (_r&gt;mid)_rivers(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,_l,_r); up(x); </div><div class="line">	&#125; </div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> _qry_r(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> _l,<span class="keyword">int</span> _r) &#123; </div><div class="line">	<span class="keyword">if</span> (_l&lt;=l&amp;&amp;r&lt;=_r) &#123; <span class="keyword">if</span>(mx[x]&gt;as)as=mx[x]; <span class="keyword">if</span>(asr+mxr[x]&gt;as)as=asr+mxr[x];</div><div class="line">		asr+=sm[x]; <span class="keyword">if</span> (mxl[x]&gt;asr) asr=mxl[x]; </div><div class="line">	&#125; <span class="keyword">else</span> &#123; <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; down(x); </div><div class="line">		<span class="keyword">if</span> (_r&gt;mid) _qry_r(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,_l,_r); </div><div class="line">		<span class="keyword">if</span> (_l&lt;=mid) _qry_r(x&lt;&lt;<span class="number">1</span>,l,mid,_l,_r); </div><div class="line">	&#125; </div><div class="line">&#125; </div><div class="line"><span class="keyword">void</span> _qry_l(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> _l,<span class="keyword">int</span> _r) &#123; </div><div class="line">	<span class="keyword">if</span> (_l&lt;=l&amp;&amp;r&lt;=_r) &#123; <span class="keyword">if</span>(mx[x]&gt;as)as=mx[x]; <span class="keyword">if</span>(asr+mxl[x]&gt;as)as=asr+mxl[x]; </div><div class="line">		asr+=sm[x]; <span class="keyword">if</span> (mxr[x]&gt;asr) asr=mxr[x]; </div><div class="line">	&#125; <span class="keyword">else</span> &#123; <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; down(x); </div><div class="line">		<span class="keyword">if</span> (_l&lt;=mid) _qry_l(x&lt;&lt;<span class="number">1</span>,l,mid,_l,_r); </div><div class="line">		<span class="keyword">if</span> (_r&gt;mid) _qry_l(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,_l,_r); </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> fx=tp[x], fy=tp[y]; <span class="keyword">while</span> (fx!=fy) &#123; </div><div class="line">		<span class="keyword">if</span> (de[fx]&lt;de[fy]) swap(fx,fy),swap(x,y); </div><div class="line">		_rivers(<span class="number">1</span>,<span class="number">1</span>,n,dn[fx],dn[x]),x=f[fx],fx=tp[x]; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">if</span> (de[x]&gt;de[y]) swap(x,y); </div><div class="line">	<span class="keyword">if</span> (x!=y) _rivers(<span class="number">1</span>,<span class="number">1</span>,n,dn[x]+<span class="number">1</span>,dn[y]); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">int</span> lca=_lca(x,y); </div><div class="line">	<span class="keyword">while</span> (tp[x]!=tp[lca]) _qry_r(<span class="number">1</span>,<span class="number">1</span>,n,dn[tp[x]],dn[x]),x=f[tp[x]]; </div><div class="line">	<span class="keyword">if</span> (x!=lca) _qry_r(<span class="number">1</span>,<span class="number">1</span>,n,dn[lca]+<span class="number">1</span>,dn[x]); </div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> _l[N],_r[N],top; top=<span class="number">0</span>; </div><div class="line">	<span class="keyword">while</span> (tp[y]!=tp[lca]) _l[++top]=dn[tp[y]],_r[top]=dn[y],y=f[tp[y]]; </div><div class="line">	<span class="keyword">if</span> (y!=lca) _l[++top]=dn[lca]+<span class="number">1</span>,_r[top]=dn[y]; </div><div class="line">	<span class="keyword">while</span> (top) _qry_l(<span class="number">1</span>,<span class="number">1</span>,n,_l[top],_r[top]),--top;</div><div class="line">&#125; 	</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	in(n); <span class="keyword">int</span> x,y,c;<span class="keyword">char</span> type; rep(i,n) in(x),in(y),in(c),add(x,y,c),add(y,x,c); </div><div class="line">	dfs(<span class="number">1</span>), odr(<span class="number">1</span>,<span class="number">1</span>); REP(x,<span class="number">1</span>,n) <span class="keyword">for</span>(<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt)</div><div class="line">		<span class="keyword">if</span> (y=e[i].to, f[x]!=y&amp;&amp;f[y]!=x) u=x,v=y,w=e[i].c; </div><div class="line"><span class="comment">//	cout &lt;&lt; u&lt;&lt;"-&gt;"&lt;&lt;v&lt;&lt;": "&lt;&lt;w&lt;&lt;endl; </span></div><div class="line"><span class="comment">//	REP(i,1,n) cout &lt;&lt; f[i] &lt;&lt;"-&gt;" &lt;&lt;i&lt;&lt;": "&lt;&lt;tp[i]&lt;&lt;", "&lt;&lt;va[i]&lt;&lt;endl;</span></div><div class="line">	<span class="keyword">for</span>(build(<span class="number">1</span>,<span class="number">1</span>,n),in(m); m; --m) &#123; </div><div class="line">		type=getchar(); <span class="keyword">while</span>(type!=<span class="string">'?'</span>&amp;&amp;type!=<span class="string">'f'</span>)type=getchar(); </div><div class="line">		in(x),in(y);  <span class="keyword">if</span> (type==<span class="string">'f'</span>) &#123; </div><div class="line">			<span class="keyword">if</span> (_dis(x,u)+_dis(y,v)&gt;_dis(x,v)+_dis(y,u))swap(x,y); </div><div class="line">			<span class="keyword">if</span> (_dis(x,y)&lt;_dis(x,u)+_dis(y,v)+<span class="number">1</span>) reverse(x,y); </div><div class="line">			<span class="keyword">else</span> reverse(x,u), w=-w, reverse(v,y); </div><div class="line">		&#125; <span class="keyword">else</span> &#123; </div><div class="line">			as=<span class="number">0</span>, asr=<span class="number">0</span>; <span class="keyword">if</span> (_dis(x,u)+_dis(y,v)&gt;_dis(x,v)+_dis(y,u)) swap(x,y); </div><div class="line">			<span class="keyword">if</span> (_dis(x,y)&lt;_dis(x,u)+_dis(y,v)+<span class="number">1</span>) query(x,y); </div><div class="line">			<span class="keyword">else</span> &#123; query(x,u);<span class="keyword">if</span>(w&gt;as)as=w;<span class="keyword">if</span>(asr+w&gt;as)as=asr+w; </div><div class="line">				asr+=w; <span class="keyword">if</span>(w&gt;asr) asr=w; query(v,y);</div><div class="line">			&#125; </div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, as); </div><div class="line">		&#125; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-permutejust-some-permutations-3">【CC PERMUTE】Just Some Permutations 3</h1>
<h2 id="题目大意-9">题目大意</h2>
<p>长度为<span class="math inline">\(n\)</span>的，相邻两个数的和不超过的<span class="math inline">\(m\)</span>的合法排列个数。</p>
<h2 id="解题报告-9">解题报告</h2>
<p>考虑从大到小插入<span class="math inline">\(n\)</span>个数， 每次插入一个数<span class="math inline">\(n\)</span>， 需要用<span class="math inline">\(\leqslant m-n\)</span>的数将他包裹起来， 也就是形如<span class="math inline">\(XnY\)</span>, 或者<span class="math inline">\(|nX\)</span>,或者<span class="math inline">\(Xn|\)</span>的形式。</p>
<p>现在考虑有几个可以选择来包裹<span class="math inline">\(n\)</span>的数，开始显然是<span class="math inline">\(m-n\)</span>个， 如果使用形如<span class="math inline">\(|nX\)</span>、<span class="math inline">\(Xn|\)</span>的形式进行包裹， 那么<span class="math inline">\(X\)</span>将不能再被使用， 成为左右边界<span class="math inline">\(|\)</span>的一部分，如果使用形如<span class="math inline">\(XnY\)</span>的形式包裹， 那么<span class="math inline">\(XnY\)</span>可以看成<span class="math inline">\(X&#39;\)</span>, 一个新的用来包裹的“数”；</p>
<p>可以发现， 随着插入<span class="math inline">\(n\)</span>,<span class="math inline">\(n-1\)</span>…<span class="math inline">\(\frac{m+1}{2}+1\)</span> , 用来包裹的数的个数是不变的。</p>
<ol style="list-style-type: decimal">
<li>如果<span class="math inline">\(m\)</span>为奇数， 那么<span class="math inline">\((m+1)/2\)</span>插入时， 剩余的数的个数是<span class="math inline">\(m-n+1\)</span>， 方案数是<span class="math inline">\((m-n+1)!\)</span>,总的方案数是<span class="math inline">\((2k+k(k-1))^{n-\frac{m+1}{2}}*(m-n+1)!\)</span></li>
<li>如果<span class="math inline">\(m\)</span>为偶数， 那么<span class="math inline">\((m+1)/2\)</span>插入时， 剩余的数的个数是<span class="math inline">\(m-n\)</span>, 方案数是<span class="math inline">\((2k+k(k-1))^{n-\frac{m+1}{2}}*(m-n)!\)</span></li>
</ol>
<p>其中<span class="math inline">\(k=m-n\)</span>, 表示可以用来包裹的数的个数。</p>
<h2 id="代码-9">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p =<span class="number">1000000007</span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> n,m,T,k,fac[<span class="number">1000001</span>]; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">fast</span><span class="params">(ll x,<span class="keyword">int</span> k)</span> </span>&#123;ll as=<span class="number">1</span>;<span class="keyword">for</span>(;k;k&gt;&gt;=<span class="number">1</span>,x=x*x%p)<span class="keyword">if</span>(k&amp;<span class="number">1</span>)as=as*x%p;<span class="keyword">return</span> as;&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T); </div><div class="line">	fac[<span class="number">0</span>]=<span class="number">1</span>; REP(i,<span class="number">1</span>,<span class="number">1000000</span>)fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%p;</div><div class="line">	<span class="keyword">while</span> (T--) &#123; </div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m); k=m-n; </div><div class="line">		<span class="keyword">if</span> (m &amp; <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, fast(<span class="number">1l</span>l*k*(k+<span class="number">1</span>)%p,n-(m+<span class="number">1</span>)/<span class="number">2</span>)*fac[k+<span class="number">1</span>]%p); </div><div class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, fast(<span class="number">1l</span>l*k*(k+<span class="number">1</span>)%p,n-m/<span class="number">2</span>)*fac[k]%p); </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;继续做CC中难度比较低的题目&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="题目集锦" scheme="http://shallwe.ga/categories/%E9%A2%98%E7%9B%AE%E9%9B%86%E9%94%A6/"/>
    
    
      <category term="线段树" scheme="http://shallwe.ga/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="倍增" scheme="http://shallwe.ga/tags/%E5%80%8D%E5%A2%9E/"/>
    
      <category term="树链剖分" scheme="http://shallwe.ga/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
      <category term="组合数学" scheme="http://shallwe.ga/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="DP" scheme="http://shallwe.ga/tags/DP/"/>
    
      <category term="数论" scheme="http://shallwe.ga/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="分块" scheme="http://shallwe.ga/tags/%E5%88%86%E5%9D%97/"/>
    
      <category term="矩阵乘法" scheme="http://shallwe.ga/tags/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/"/>
    
      <category term="匹配" scheme="http://shallwe.ga/tags/%E5%8C%B9%E9%85%8D/"/>
    
      <category term="BSGS" scheme="http://shallwe.ga/tags/BSGS/"/>
    
  </entry>
  
  <entry>
    <title>codechef-选做</title>
    <link href="http://shallwe.ga/cc1/"/>
    <id>http://shallwe.ga/cc1/</id>
    <published>2017-03-14T02:59:26.000Z</published>
    <updated>2017-04-25T03:24:46.255Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>选做CC hard 题中最简单，通过人数最多的做…</p>
</blockquote>
<a id="more"></a>
<h1 id="cc-mgchgymmisha-and-gym">【CC MGCHGYM】Misha and Gym</h1>
<h2 id="题目大意">题目大意</h2>
<p><span class="math inline">\([1,n]\)</span> 每个位置有一个重量<span class="math inline">\(w_i\)</span> , 支持三个操作：</p>
<ol style="list-style-type: decimal">
<li>修改一个位置的重量</li>
<li>翻转一个区间</li>
<li>查询一个区间内的重量能否拼出重量<span class="math inline">\(w\)</span> .</li>
</ol>
<p>保证出现的重量不超过10种， 3操作只有<span class="math inline">\(1000\)</span>个。</p>
<h2 id="解题报告">解题报告</h2>
<p>很trivial的一个题呀…</p>
<p>因为出现的重量很少， 所以每个区间维护每个重量出现的次数， 因为存在翻转操作， 所以需要大力的写一个平衡树, 手选FHQTreap.</p>
<p>现在就差操作三了， 因为次数只有1000， 所以试着大力的背包一下， 咦 -_- 复杂度是<span class="math inline">\(O(wn)\)</span>的， 好像不行呀…</p>
<p>优化背包的办法好多呀， 因为维护0信息， 所以强上bitset呀， 复杂度就是<span class="math inline">\(O(wn/64)\)</span>了 . 有理想的交了好几发.都T了…</p>
<p>所以继续优化背包， 因为种类很少， 所以每一种用二进制优化一下， 复杂度就是<span class="math inline">\(O(10w*log(n)/64)\)</span>了， 好像还是不科学， 但是竟然A了 。 WLGC。。。</p>
<h2 id="代码">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> -</div><div class="line">		&#125; <span class="keyword">else</span> &#123; </div><div class="line">			go[b][<span class="number">0</span>] = merge(a, go[b][<span class="number">0</span>]); </div><div class="line">			push_up(b); </div><div class="line">			<span class="keyword">return</span> b; </div><div class="line">		&#125; </div><div class="line">	&#125; </div><div class="line">		</div><div class="line">			</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">for</span> (; *cp &lt; <span class="string">'0'</span> || *cp &gt; <span class="string">'9'</span>; cp++) ; </div><div class="line">	<span class="keyword">for</span> (x = <span class="number">0</span>; *cp &gt;= <span class="string">'0'</span> &amp;&amp; *cp &lt;= <span class="string">'9'</span>; cp++) </div><div class="line">		x = x * <span class="number">10</span> + *cp - <span class="number">48</span>; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">enter</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (id[x]==<span class="number">-1</span>) &#123;</div><div class="line">		id[x] = tot ++; </div><div class="line">		v.push_back(x); </div><div class="line">	&#125; </div><div class="line">	</div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">chang</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> FHQ; </div><div class="line">	<span class="keyword">int</span> l, w; in(l), in(w); 	</div><div class="line">	droot le = split(root, l<span class="number">-1</span>); </div><div class="line">	droot ri = split(le.se, <span class="number">1</span>); </div><div class="line">	<span class="keyword">int</span> x = ri.fi; </div><div class="line">	enter(w); </div><div class="line">	va[x] = id[w], info[x] = data(va[x]);</div><div class="line">	ra[x] = RAND;</div><div class="line">	le.se = merge(x, ri.se); </div><div class="line">	root = merge(le.fi, le.se); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">revers</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> FHQ;  </div><div class="line">	<span class="keyword">int</span> l, r; in(l), in(r); </div><div class="line">	droot le = split(root, l - <span class="number">1</span>); </div><div class="line">	droot ri = split(le.se, r - l + <span class="number">1</span>); </div><div class="line">	_rev(ri.fi) ; </div><div class="line">	le.se = merge(ri.fi, ri.se); </div><div class="line">	root = merge(le.fi, le.se); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> FHQ; </div><div class="line">	<span class="keyword">int</span> l, r, w; in(l), in(r), in(w); </div><div class="line">	droot le = split(root, l - <span class="number">1</span>); </div><div class="line">	droot ri = split(le.se, r-l+<span class="number">1</span>); </div><div class="line">	<span class="keyword">int</span> x= ri.fi; <span class="keyword">bool</span> check=<span class="number">0</span>; </div><div class="line">	dp.reset(); dp.<span class="built_in">set</span>(<span class="number">0</span>); </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i) &#123;</div><div class="line">		<span class="keyword">int</span> lef = info[x].sts[i]; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lef; j &lt;&lt;= <span class="number">1</span>) &#123;</div><div class="line">			dp |= dp &lt;&lt; (j * v[i]); </div><div class="line">			lef -= j, check |= dp.test(w); </div><div class="line">			<span class="keyword">if</span> (check) <span class="keyword">break</span>; </div><div class="line">		&#125; </div><div class="line">		<span class="keyword">if</span> (lef) dp |= dp &lt;&lt; (lef * v[i]); </div><div class="line">		check |= dp.test(w); </div><div class="line">		<span class="keyword">if</span> (check) <span class="keyword">break</span>; </div><div class="line">	&#125; </div><div class="line">	</div><div class="line">		</div><div class="line"><span class="comment">//	cout &lt;&lt; ", " &lt;&lt; w &lt;&lt; ": "; </span></div><div class="line">	<span class="built_in">puts</span>((check) ? <span class="string">"Yes"</span> : <span class="string">"No"</span>); </div><div class="line">	le.se = merge(ri.fi, ri.se); </div><div class="line">	root = merge(le.fi, le.se); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="comment">//--- line to be a line ---- </span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	fread(cp, <span class="number">1</span>, <span class="number">2000000</span>, <span class="built_in">stdin</span>); </div><div class="line">	in(n), in(q);</div><div class="line">	<span class="built_in">memset</span>(id, <span class="number">-1</span>, <span class="keyword">sizeof</span>(id));  </div><div class="line">	FORU(i, <span class="number">1</span>, n)  </div><div class="line">		in(_w[i]), enter(_w[i]); </div><div class="line">	srand( time(<span class="number">0</span>) + <span class="number">217</span>);   </div><div class="line">	FHQ :: build() ; </div><div class="line">	</div><div class="line">	<span class="keyword">int</span> type; </div><div class="line">	<span class="keyword">while</span> (q --) &#123;</div><div class="line">		in(type); </div><div class="line">		<span class="keyword">switch</span> (type) &#123; </div><div class="line">		<span class="keyword">case</span> <span class="number">1</span> : chang(); <span class="keyword">break</span>; </div><div class="line">		<span class="keyword">case</span> <span class="number">2</span> : revers();<span class="keyword">break</span>; </div><div class="line">		<span class="keyword">case</span> <span class="number">3</span> : query(); <span class="keyword">break</span>; </div><div class="line">		&#125; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-bwgameblack-white-board-game">【CC BWGAME】Black-white Board Game</h1>
<h2 id="题目大意-1">题目大意</h2>
<p>一个棋盘， 第<span class="math inline">\(i\)</span>行的<span class="math inline">\([l_i, r_i]\)</span>被染成黑色， 两个人Alex和Fedor， 每个人选择排列<span class="math inline">\(P_i\)</span>, 要求<span class="math inline">\([i,P_i]\)</span>为黑色， 且对Alex, <span class="math inline">\(P_i\)</span>的逆序对个数为偶数， 对Fedor， 逆序对个数为奇数， 问谁能选的排列多.</p>
<h2 id="解题报告-1">解题报告</h2>
<p>逆序对个数的奇偶？ 可以联想到行列式的一个求法 <span class="math inline">\(\sum (-1)^{\iota(P_i)} \prod_{j=1}^{n} a[j][P_i[j]]\)</span> ;</p>
<p>所以就是把棋盘看成一个O矩阵， 对其行列式求值。</p>
<p>简单的方法是高斯消元， 但是<span class="math inline">\(O(n^3)\)</span>显然过不了， 考虑矩阵中<span class="math inline">\(1\)</span>的分布的特殊性，就是每一行， <span class="math inline">\(1\)</span>的分布是一个连续的区间。</p>
<p>可以将<span class="math inline">\([l_i,r_i]\)</span>放入第<span class="math inline">\(l_i\)</span>棵左偏树， 根据<span class="math inline">\(r_i\)</span>建小根堆， 枚举到第<span class="math inline">\(i\)</span>列， 拿出第<span class="math inline">\(i\)</span>棵左偏树中<span class="math inline">\(r_i\)</span>最小的区间， 使用这个区间消元这棵树中剩余的区间， 并加入<span class="math inline">\(r_i+1\)</span>这个树 ， 并根据是否交换两行改变行列式的值。</p>
<p>这样消元， 对角线一定全是<span class="math inline">\(1\)</span>(或者有<span class="math inline">\(0\)</span>, 也就是平手的情况), 只需要判断行列式的值的正负就好。</p>
<h2 id="代码-1">代码</h2>
<p>不知道为什么CC这道题不能提交， 所以只能当过样例选手了。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = int(a), nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = int(a), nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; b; ++i) </span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>; </div><div class="line"><span class="keyword">int</span> test, n, rt[N], ans, tot, a[N]; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LTREE</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> de, ls, rs, v, id; </div><div class="line">	LTREE() &#123;de=ls=rs=v=<span class="number">0</span>;&#125;</div><div class="line">	LTREE(<span class="keyword">int</span> v, <span class="keyword">int</span> id) :v(v),id(id) &#123;</div><div class="line">		de = ls = rs = <span class="number">0</span>; </div><div class="line">	&#125; </div><div class="line">&#125; no[N]; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</div><div class="line"> 	<span class="keyword">char</span> ch = getchar(); </div><div class="line"> 	<span class="keyword">for</span> (;ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch=getchar()); </div><div class="line"> 	<span class="keyword">for</span> (x=<span class="number">0</span>; ch&gt;=<span class="string">'0'</span> &amp;&amp; ch&lt;=<span class="string">'9'</span>; ch=getchar())</div><div class="line"> 		x = x * <span class="number">10</span> + ch - <span class="number">48</span>; </div><div class="line"> &#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">birth</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line"> 	++ tot; no[tot] = LTREE(v, x); </div><div class="line"> 	<span class="keyword">return</span> tot; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line"> 	<span class="keyword">if</span> (!(a * b)) <span class="keyword">return</span> a + b; </div><div class="line"> 	<span class="keyword">if</span> (no[a].v &gt; no[b].v) swap(a, b); </div><div class="line"> 	no[a].rs = merge(no[a].rs, b); </div><div class="line"> 	<span class="keyword">if</span> (no[no[a].rs].de &gt; no[no[a].ls].de) </div><div class="line"> 		swap(no[a].ls, no[a].rs); </div><div class="line"> 	no[a].de = no[no[a].rs].de + <span class="number">1</span>; </div><div class="line"> 	<span class="keyword">return</span> a; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> &amp;rt, <span class="keyword">int</span> v, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line"> 	rt = merge(rt, birth(v, x)); </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">(<span class="keyword">int</span> &amp;rt)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (!rt) <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">	<span class="keyword">int</span> tmp = rt; </div><div class="line">	rt = merge(no[tmp].ls, no[tmp].rs); </div><div class="line">	<span class="keyword">return</span> tmp; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//	freopen("A.in", "r", stdin); </span></div><div class="line">	in(test);</div><div class="line">	<span class="keyword">while</span> (test --) &#123;</div><div class="line">	 	in(n); <span class="keyword">int</span> l, r; ans = <span class="number">1</span>; </div><div class="line">	 	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n; ++i) </div><div class="line">	 		in(l), in(r), ins(rt[l], r, i), a[i] = i; </div><div class="line">	 		</div><div class="line">	 	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n; ++i) </div><div class="line">	 		<span class="keyword">if</span> (!rt[i]) &#123; ans = <span class="number">0</span>; <span class="keyword">break</span>;&#125; </div><div class="line">	 		<span class="keyword">else</span> &#123; </div><div class="line">	 			<span class="keyword">int</span> x = top(rt[i]), y = top(rt[i]); </div><div class="line"><span class="comment">//	 			cout &lt;&lt; i &lt;&lt; ", " &lt;&lt; no[x].v &lt;&lt; ": " &lt;&lt; no[x].id &lt;&lt; endl;</span></div><div class="line">	 			<span class="keyword">if</span> (no[x].v == no[y].v) &#123; </div><div class="line">	 				ans = <span class="number">0</span>; <span class="keyword">break</span>; </div><div class="line">	 			&#125; <span class="keyword">else</span> rt[i] = merge(rt[i], y); </div><div class="line">	 			<span class="keyword">if</span> (no[x].id != a[i]) </div><div class="line">	 				ans *= <span class="number">-1</span>, a[no[x].id]=a[i];</div><div class="line">	 			rt[no[x].v+<span class="number">1</span>] = merge(rt[no[x].v+<span class="number">1</span>], rt[i]); </div><div class="line">	 		&#125; </div><div class="line">	 	(ans == <span class="number">0</span>) ? <span class="built_in">puts</span>(<span class="string">"Draw"</span>)</div><div class="line">	 	: (ans == <span class="number">1</span>) ? <span class="built_in">puts</span>(<span class="string">"Alex"</span>)</div><div class="line">	 		: <span class="built_in">puts</span>(<span class="string">"Fedor"</span>); </div><div class="line">	 &#125;</div><div class="line">	 <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-cbalchef-and-balanced-strings">【CC CBAL】Chef and Balanced Strings</h1>
<h2 id="题目大意-2">题目大意</h2>
<p>区间内， 每个字符出现偶数次的子区间的个数 。</p>
<h2 id="解题报告-2">解题报告</h2>
<p>这个破玩意显然只能分块乱搞呀 …</p>
<p>首先， 字符集很小， 可以把每个字符出现的前缀奇偶性压成一个int, 离散后搞成一个状态信息.</p>
<p>大力预处理， 从第<span class="math inline">\(i\)</span>个块开始，向后到第<span class="math inline">\(j\)</span>个位置的三类答案<span class="math inline">\(fans_{1|2|3}\)</span> , 从第<span class="math inline">\(i\)</span>个块开始， 向前到第<span class="math inline">\(j\)</span>个位置的三类答案<span class="math inline">\(bans_{1|2|3}\)</span> , 这个可以通过扫的同时记录每个奇偶状态信息的出现次数， 出现位置<span class="math inline">\(i\)</span>的和， 出现次数<span class="math inline">\(i^2\)</span>的和 得到。</p>
<p>然后， 对于每个查询， 设<span class="math inline">\(l\)</span>所在的块为<span class="math inline">\(Li\)</span>, 从<span class="math inline">\(Lm\)</span>开始， <span class="math inline">\(r\)</span>所在的块为<span class="math inline">\(Ri\)</span>, 到<span class="math inline">\(Rm\)</span>结束， 可以先得到左右的零散位置和中间若干整块的答案加上整块中的答案， 就差左右零散位置之间的答案， 这部分暴力扫一遍就好.</p>
<p>时空复杂度<span class="math inline">\(O(n\sqrt{n})\)</span> .</p>
<h2 id="代码-2">代码</h2>
<p>写得真·TM爽 。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = int(a), nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = int(a), nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; b; ++i) </span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> SN = <span class="number">250</span>; </div><div class="line"></div><div class="line"><span class="keyword">char</span> s[N];</div><div class="line"></div><div class="line"><span class="comment">// forward ans</span></div><div class="line">ll fans0[SN][N], fans1[SN][N], fans2[SN][N];</div><div class="line"></div><div class="line"><span class="comment">// backward ans</span></div><div class="line">ll bans0[SN][N], bans1[SN][N], bans2[SN][N];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, Q, S, idx[<span class="number">1</span>&lt;&lt;<span class="number">26</span>], values[N];</div><div class="line"></div><div class="line">ll sums0[N], sums1[N], sums2[N];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_idx</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!~idx[x]) idx[x] = cnt++;</div><div class="line">    <span class="keyword">return</span> idx[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line">ll ans0, ans1, ans2;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">initalize</span><span class="params">()</span> </span>&#123;</div><div class="line">    S = max(n/<span class="number">200</span>, <span class="keyword">int</span>(n/<span class="built_in">sqrt</span>(Q)));</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    idx[x = <span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        idx[x ^= <span class="number">1</span> &lt;&lt; s[i] - <span class="string">'a'</span>] = <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    cnt = <span class="number">0</span>;</div><div class="line">    values[<span class="number">0</span>] = get_idx(x = <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        values[i+<span class="number">1</span>] = get_idx(x^=(<span class="number">1</span>&lt;&lt;s[i]-<span class="string">'a'</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i*S &lt;= n; i++) &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i*S; j &lt;= n; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">            sums1[v] = <span class="number">0</span>;</div><div class="line">            sums2[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        ans0 = ans1 = ans2 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i*S; j &lt;= n; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            fans0[i][j] = ans0 += sums0[v];</div><div class="line">            fans1[i][j] = ans1 += sums0[v]*j - sums1[v];</div><div class="line">            fans2[i][j] = ans2 += sums0[v]*j*j - sums1[v]*<span class="number">2</span>*j + sums2[v];</div><div class="line">            sums0[v]++;</div><div class="line">            sums1[v] += j;</div><div class="line">            sums2[v] += j*(ll)j;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> end = min(n, i*S + S - <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = end; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">            sums1[v] = <span class="number">0</span>;</div><div class="line">            sums2[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        ans0 = ans1 = ans2 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = end; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            bans0[i][j] = ans0 += sums0[v];</div><div class="line">            bans1[i][j] = ans1 += sums1[v] - sums0[v]*j;</div><div class="line">            bans2[i][j] = ans2 += sums0[v]*j*j - sums1[v]*<span class="number">2</span>*j + sums2[v];</div><div class="line">            sums0[v]++;</div><div class="line">            sums1[v] += j;</div><div class="line">            sums2[v] += j*(ll)j;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function">ll <span class="title">solve0</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line">    L--;</div><div class="line">    <span class="keyword">int</span> Li = (L+<span class="number">1</span>)/S, Ri = (R<span class="number">-1</span>)/S;</div><div class="line">    <span class="keyword">if</span> (Ri - Li &lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="comment">// normal</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        ans0 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            ans0 += sums0[v];</div><div class="line">            sums0[v]++;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> Lm = Li*S+S<span class="number">-1</span>, Rm = Ri*S;</div><div class="line">        ans0 = fans0[Li+<span class="number">1</span>][R] + bans0[Ri<span class="number">-1</span>][L] - fans0[Li+<span class="number">1</span>][Rm<span class="number">-1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= Lm; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = Rm; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= Lm; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = Rm; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            ans0 += sums0[v];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">solve1</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line">    L--;</div><div class="line">    <span class="keyword">int</span> Li = (L+<span class="number">1</span>)/S, Ri = (R<span class="number">-1</span>)/S;</div><div class="line">    <span class="keyword">if</span> (Ri - Li &lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="comment">// normal</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">            sums1[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        ans1 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            ans1 += sums0[v]*j - sums1[v];</div><div class="line">            sums0[v]++;</div><div class="line">            sums1[v] += j;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> Lm = Li*S+S<span class="number">-1</span>, Rm = Ri*S;</div><div class="line">        ans1 = fans1[Li+<span class="number">1</span>][R] + bans1[Ri<span class="number">-1</span>][L] - fans1[Li+<span class="number">1</span>][Rm<span class="number">-1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= Lm; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">            sums1[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = Rm; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">            sums1[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= Lm; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v]++;</div><div class="line">            sums1[v] += j;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = Rm; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            ans1 += sums0[v]*j - sums1[v];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans1;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">solve2</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line">    L--;</div><div class="line">    <span class="keyword">int</span> Li = (L+<span class="number">1</span>)/S, Ri = (R<span class="number">-1</span>)/S;</div><div class="line">    <span class="keyword">if</span> (Ri - Li &lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="comment">// normal</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">            sums1[v] = <span class="number">0</span>;</div><div class="line">            sums2[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        ans2 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            ans2 += sums0[v]*j*j - sums1[v]*<span class="number">2</span>*j + sums2[v];</div><div class="line">            sums0[v]++;</div><div class="line">            sums1[v] += j;</div><div class="line">            sums2[v] += j*(ll)j;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> Lm = Li*S+S<span class="number">-1</span>, Rm = Ri*S;</div><div class="line">        ans2 = fans2[Li+<span class="number">1</span>][R] + bans2[Ri<span class="number">-1</span>][L] - fans2[Li+<span class="number">1</span>][Rm<span class="number">-1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= Lm; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">            sums1[v] = <span class="number">0</span>;</div><div class="line">            sums2[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = Rm; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">            sums1[v] = <span class="number">0</span>;</div><div class="line">            sums2[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= Lm; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v]++;</div><div class="line">            sums1[v] += j;</div><div class="line">            sums2[v] += j*(ll)j;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = Rm; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            ans2 += sums0[v]*j*j - sums1[v]*<span class="number">2</span>*j + sums2[v];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">()</span></span>&#123;</div><div class="line">    ll A = <span class="number">0</span>, B = <span class="number">0</span>, ans=<span class="number">0</span> ;</div><div class="line">    <span class="keyword">while</span>( Q -- ) &#123;</div><div class="line">        <span class="keyword">int</span> X, Y, type;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;X, &amp;Y, &amp;type);</div><div class="line">        <span class="keyword">int</span> L = ( X + A ) % n + <span class="number">1</span>; </div><div class="line">        <span class="keyword">int</span> R = ( Y + B ) % n + <span class="number">1</span>; </div><div class="line">        <span class="keyword">if</span> (L &gt; R) swap(L, R);</div><div class="line">        <span class="keyword">if</span> (type == <span class="number">0</span>) ans = solve0(L, R); </div><div class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>) ans = solve1(L, R); </div><div class="line">        <span class="keyword">if</span> (type == <span class="number">2</span>) ans = solve2(L, R); </div><div class="line">        </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">        A = B, B = ans;   </div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> test;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;test);</div><div class="line">    <span class="keyword">while</span>(test--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, s, &amp;Q);</div><div class="line">        n = <span class="built_in">strlen</span>(s);</div><div class="line">        initalize();</div><div class="line">        decode();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-streettathe-street">【CC STREETTA】The Street</h1>
<h2 id="题目大意-3">题目大意</h2>
<p>两个序列<span class="math inline">\(a\)</span> , <span class="math inline">\(b\)</span> ， 三个操作： 1. 对序列<span class="math inline">\(a\)</span>的区间加等差数列； 2. 对序列<span class="math inline">\(b\)</span>的区间进行等差数列取<span class="math inline">\(max\)</span> ; 3. 查询<span class="math inline">\(a_i+b_i\)</span> .</p>
<h2 id="解题报告-3">解题报告</h2>
<p>区间加等差数列是很简单的， 因为<span class="math inline">\(ax+b\)</span>中的<span class="math inline">\(a,b\)</span>分别作为一个标记， 很容易合并（我是直接把两个标记永久化了，听说常数很好？）</p>
<p>区间等差数列求<span class="math inline">\(max\)</span>?是李超线段树的裸题， 其实就是加入一个线段， 线段树的每个节点保留优势<span class="math inline">\(a,b\)</span>(就是对<span class="math inline">\(mid\)</span>位置占优的<span class="math inline">\(a,b\)</span>)，其他的下传， 同样标记永久化。</p>
<h2 id="代码-3">代码</h2>
<p>win 切 linux 的时候忘同步git了，所以暂时找不到了…</p>
<h1 id="cc-lyrcmusic-lyrics">【CC LYRC】Music &amp; Lyrics</h1>
<h2 id="题目大意-4">题目大意</h2>
<p>对于每个询问串， 查询匹配串中一共出现了多少次。</p>
<h2 id="解题报告-4">解题报告</h2>
<p>这个是裸题， 对于询问串形成的trie建立一个AC自动机， 然后每个匹配串在AC自动机上匹配， 对于每个前缀匹配的位置打一个<span class="math inline">\(+1\)</span>的标记。</p>
<p>在fail树上将标记进行子树和，每个询问串出现的次数就是对应节点的子树和。</p>
<p>时间复杂度<span class="math inline">\(O(52*length)\)</span></p>
<h2 id="代码-4">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;b;++i)</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"> </div><div class="line"><span class="keyword">char</span> s[<span class="number">50010</span>]; </div><div class="line"><span class="keyword">int</span> w, n, cnt=<span class="number">1</span>, son[<span class="number">3000000</span>][<span class="number">52</span>], las[<span class="number">510</span>], fal[<span class="number">3000000</span>]; </div><div class="line">ll v[<span class="number">3000000</span>];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> x = <span class="number">1</span>, tp; </div><div class="line">	rep(i, <span class="built_in">strlen</span>(s)) &#123; </div><div class="line">		<span class="keyword">if</span> (s[i] &gt;= <span class="string">'a'</span>) tp=s[i]-<span class="string">'a'</span>; </div><div class="line">		<span class="keyword">else</span> tp = s[i]-<span class="string">'A'</span>+<span class="number">26</span>; </div><div class="line">		<span class="keyword">if</span> (!son[x][tp]) son[x][tp]=++cnt; </div><div class="line">		x = son[x][tp]; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> x; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AC_auto</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; q.push(<span class="number">1</span>); </div><div class="line">	<span class="keyword">int</span> x, y; </div><div class="line">	<span class="keyword">while</span> (!q.empty()) &#123; </div><div class="line">		x = q.front(); q.pop(); </div><div class="line">		rep(i, <span class="number">52</span>) &#123; </div><div class="line">			<span class="keyword">int</span> fa = fal[x]; </div><div class="line">			<span class="keyword">while</span> (fa &amp;&amp; !son[fa][i]) fa = fal[fa]; </div><div class="line">			<span class="keyword">if</span> (y=son[x][i]) </div><div class="line">				fal[y] = (son[fa][i]?son[fa][i]:<span class="number">1</span>), q.push(y);</div><div class="line">			<span class="keyword">else</span> son[x][i] = (son[fa][i]?son[fa][i]:<span class="number">1</span>); </div><div class="line">		&#125; </div><div class="line">	&#125;</div><div class="line">&#125; </div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mark</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> x = <span class="number">1</span>, tp, y; </div><div class="line">	rep(i, <span class="built_in">strlen</span>(s)) </div><div class="line">		<span class="keyword">if</span> (s[i] == <span class="string">'-'</span>) x = <span class="number">1</span>; </div><div class="line">		<span class="keyword">else</span> &#123; </div><div class="line">			<span class="keyword">if</span> (s[i] &gt;= <span class="string">'a'</span>) y=s[i]-<span class="string">'a'</span>; </div><div class="line">			<span class="keyword">else</span> y = s[i]-<span class="string">'A'</span>+<span class="number">26</span>; </div><div class="line">			<span class="keyword">while</span> (x&amp;&amp;!son[x][y]) x=fal[x]; </div><div class="line">			x = son[x][y]; </div><div class="line">			<span class="keyword">if</span> (!x) x = <span class="number">1</span>;</div><div class="line">			v[x] ++; </div><div class="line">		&#125; </div><div class="line">&#125;</div><div class="line">		</div><div class="line">main() &#123; </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w); </div><div class="line">	rep(i, w) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s), las[i]=insert(s); </div><div class="line">	AC_auto(); </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n); </div><div class="line">	rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s), mark(s); </div><div class="line">	VEP(i, cnt, <span class="number">2</span>) v[fal[i]] += v[i]; </div><div class="line">	rep(i, w) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, v[las[i]]); </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-qtree6query-on-a-tree-vi">【CC QTREE6】Query on a tree VI</h1>
<h2 id="题目大意-5">题目大意</h2>
<p>开始一棵树全都是黑色的， 每次两个操作： 1. 将一个点变色； 2. 询问和一个点颜色相同的联通块大小；</p>
<h2 id="解题报告-5">解题报告</h2>
<p>这个题是Qtree系列比较简单的?</p>
<p>对黑色和白色分别维护子树中与他单色联通的点的数量， 这个使用树链剖分+树状数组就好了， 每次修改相当于修改到根路径， 区间修改单点查询。</p>
<p>还需要得到与某个点单色联通的深度最前的祖先， 这个需要使用树链剖分+维护区间黑色数（树状数组就足够），</p>
<p>每次如果一条重链单色联通就像上跳， 否则二分单色联通的最靠上的位置。</p>
<p>时间复杂度？ <span class="math inline">\(O(n \log^2n)\)</span></p>
<h2 id="代码-5">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100100</span>; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> nxt, to; </div><div class="line">	edge(<span class="keyword">int</span> nxt=<span class="number">0</span>, <span class="keyword">int</span> to=<span class="number">0</span>):nxt(nxt), to(to)&#123;&#125;</div><div class="line">&#125; e[N &lt;&lt; <span class="number">1</span>]; </div><div class="line"><span class="keyword">int</span> s0[N], s1[N], oo[N], n, m, head[N], tot, a[N]; </div><div class="line"><span class="keyword">int</span> f[N], de[N], dn[N], tp[N], sn[N], bd[N], sz[N], cnt; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">char</span> ch = getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar())</div><div class="line">		<span class="keyword">if</span> (ch==<span class="string">'-'</span>) f = <span class="number">-1</span>; </div><div class="line">	<span class="keyword">for</span>(x=<span class="number">0</span>; ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar())</div><div class="line">		x = x*<span class="number">10</span> + ch - <span class="number">48</span>; </div><div class="line">	x *= f; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">	e[++tot]=edge(head[x], y), head[x]=tot; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y=<span class="number">0</span>)</span> </span>&#123; </div><div class="line">	de[x] = de[f[x]]+<span class="number">1</span>, sz[x]=<span class="number">1</span>, sn[x]=<span class="number">0</span>;  </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=head[x];i;i=e[i].nxt) </div><div class="line">		<span class="keyword">if</span> (y=e[i].to, y!=f[x]) &#123;</div><div class="line">			f[y]=x, dfs(y), sz[x] += sz[y]; </div><div class="line">			<span class="keyword">if</span> (sz[y]&gt;sz[sn[x]]) sn[x]=y; </div><div class="line">		&#125; </div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">odr</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> top)</span> </span>&#123; </div><div class="line">	tp[x]=top, dn[x]=++cnt, bd[cnt]=x; <span class="keyword">int</span> y; </div><div class="line">	<span class="keyword">if</span> (sn[x]) &#123;</div><div class="line">		odr(sn[x], top); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=head[x];i;i=e[i].nxt) </div><div class="line">			<span class="keyword">if</span> (y=e[i].to, y!=sn[x]&amp;&amp;y!=f[x])</div><div class="line">				odr(y, y); </div><div class="line">	&#125; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ad0</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (; x &lt;= n; x += x&amp;-x) s0[x]+=v; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ad1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123; </div><div class="line">	<span class="keyword">for</span> (; x &lt;= n; x += x&amp;-x) s1[x]+=v; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123; </div><div class="line">	<span class="keyword">for</span> (; x &lt;= n; x += x&amp;-x) oo[x]+=v;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ak1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> sm=<span class="number">0</span>)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (; x; x-=x&amp;-x) sm+=s1[x]; <span class="keyword">return</span> sm; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ak0</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> sm=<span class="number">0</span>)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (; x; x-=x&amp;-x) sm+=s0[x]; <span class="keyword">return</span> sm; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> sm=<span class="number">0</span>)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (; x; x-=x&amp;-x) sm+=oo[x]; <span class="keyword">return</span> sm; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">chng</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> v, <span class="keyword">int</span> t)</span> </span>&#123; </div><div class="line"><span class="comment">//	cout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt;  ' ' &lt;&lt; v &lt;&lt; ' ' &lt;&lt; t &lt;&lt; endl;</span></div><div class="line">	<span class="keyword">if</span> (de[x] &lt; de[y]) <span class="keyword">return</span>; </div><div class="line">	<span class="keyword">for</span> (; tp[x]!=tp[y]; x=f[tp[x]])</div><div class="line">		(t) ? (ad1(dn[tp[x]],v), ad1(dn[x]+<span class="number">1</span>,-v))</div><div class="line">		  : (ad0(dn[tp[x]],v), ad0(dn[x]+<span class="number">1</span>,-v));</div><div class="line">	t ? (ad1(dn[y], v), ad1(dn[x]+<span class="number">1</span>,-v))</div><div class="line">	  : (ad0(dn[y], v), ad0(dn[x]+<span class="number">1</span>,-v)); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dd</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> ans=r, md;</div><div class="line">	<span class="keyword">while</span> (l&lt;=r) &#123; md = (l+r) &gt;&gt; <span class="number">1</span>; </div><div class="line">		<span class="keyword">if</span> (t) &#123;</div><div class="line">			<span class="keyword">if</span> (ask(r) - ask(md<span class="number">-1</span>) == r-md+<span class="number">1</span>) </div><div class="line">			 	ans = md, r = md<span class="number">-1</span>; </div><div class="line">			<span class="keyword">else</span> l = md + <span class="number">1</span>; </div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> (ask(r) - ask(md<span class="number">-1</span>)) l = md+<span class="number">1</span>; </div><div class="line">			<span class="keyword">else</span> ans =md, r = md<span class="number">-1</span>;  </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> bd[ans]; </div><div class="line">&#125;</div><div class="line">			</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> t)</span> </span>&#123; </div><div class="line">	<span class="keyword">while</span> (tp[x] != <span class="number">1</span>) <span class="keyword">if</span> (t) </div><div class="line">		<span class="keyword">if</span> (dn[x]-dn[tp[x]]+<span class="number">1</span>==ask(dn[x])-ask(dn[tp[x]]<span class="number">-1</span>))</div><div class="line">			<span class="keyword">if</span> (a[f[tp[x]]]) x=f[tp[x]]; <span class="keyword">else</span> <span class="keyword">return</span> tp[x]; </div><div class="line">		<span class="keyword">else</span> <span class="keyword">return</span> dd(dn[tp[x]], dn[x], t); </div><div class="line">	<span class="keyword">else</span> </div><div class="line">		<span class="keyword">if</span> (ask(dn[x])-ask(dn[tp[x]]<span class="number">-1</span>)) <span class="keyword">return</span> dd(dn[tp[x]],dn[x],t); </div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a[f[tp[x]]]) <span class="keyword">return</span> tp[x]; <span class="keyword">else</span> x=f[tp[x]]; </div><div class="line">	<span class="keyword">return</span> dd(<span class="number">1</span>, dn[x], t); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line"><span class="comment">//	freopen("A.in", "r", stdin); </span></div><div class="line"><span class="comment">//	freopen("A.out", "w", stdout); </span></div><div class="line">	in(n); <span class="keyword">int</span> x, y; </div><div class="line">	rep(i, n<span class="number">-1</span>) in(x), in(y),link(x,y),link(y,x); </div><div class="line">	dfs(<span class="number">1</span>); odr(<span class="number">1</span>, <span class="number">1</span>); </div><div class="line">	REP(i, <span class="number">1</span>, n) &#123;</div><div class="line">		ad1(dn[i], sz[i]), ad1(dn[i]+<span class="number">1</span>,-sz[i]);</div><div class="line">		add(dn[i], <span class="number">1</span>), a[i] = <span class="number">1</span>; </div><div class="line">	&#125; </div><div class="line">	ad0(<span class="number">1</span>, <span class="number">1</span>), in(m); <span class="keyword">int</span> t; </div><div class="line">	<span class="keyword">while</span> (m--) &#123; </div><div class="line">		in(t), in(x); </div><div class="line">		<span class="keyword">if</span> (t) &#123;</div><div class="line">			a[x] ? (chng(f[x], max(<span class="number">1</span>, f[up(x,a[x])]), -ak1(dn[x]), <span class="number">1</span>),</div><div class="line">			add(dn[x], <span class="number">-1</span>), chng(f[x], max(<span class="number">1</span>, f[up(x,a[x]=<span class="number">0</span>)]),ak0(dn[x]), <span class="number">0</span>))</div><div class="line">		:	(chng(f[x], max(<span class="number">1</span>, f[up(x,a[x])]),-ak0(dn[x]), <span class="number">0</span>),</div><div class="line">			add(dn[x], <span class="number">1</span>), chng(f[x], max(<span class="number">1</span>, f[up(x,a[x]=<span class="number">1</span>)]),ak1(dn[x]),<span class="number">1</span>)); </div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (a[x]?ak1(dn[up(x,a[x])]):ak0(dn[up(x,a[x])])));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">puts</span>(<span class="string">""</span>); </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-rincourse-selection">【CC RIN】Course Selection</h1>
<h2 id="题目大意-6">题目大意</h2>
<p>每个学期学一个课程会有一个收益， 每个课程有若干个前置课程， 问获得的最大收益。</p>
<h2 id="解题报告-6">解题报告</h2>
<p>这个是鸟哥(<span class="citation">@faebdc</span>)论文里的题目。</p>
<p>把每个课程在不同的学期拆点， 然后相邻的两个学期连边， <span class="math inline">\(S\)</span>连到第一个学期， 最后一个学期连到<span class="math inline">\(T\)</span>, 流量限制是与最大收益的差值；</p>
<p>如何对选课的顺序进行限制? 通过连inf边强制前置课程在前选择。</p>
<h2 id="代码-6">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = int(a), nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = int(a), nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; b; ++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1000000000</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> nxt, to, f; </div><div class="line">	edge(<span class="keyword">int</span> nxt=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>,<span class="keyword">int</span> f=<span class="number">0</span>) </div><div class="line">		:nxt(nxt), to(to), f(f) &#123;&#125;</div><div class="line">&#125; e[<span class="number">100000</span>]; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> head[<span class="number">100000</span>], X[N][N], n, m, k, S, T, tot=<span class="number">1</span>; </div><div class="line"> </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmax</span><span class="params">(T &amp;x, T a)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (a &gt; x) x = a; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">	<span class="keyword">return</span> (x<span class="number">-1</span>) * m + y; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> f)</span> </span>&#123;</div><div class="line">	e[++tot]=edge(head[x], y, f), head[x]=tot; </div><div class="line">	e[++tot]=edge(head[y], x, <span class="number">0</span>), head[y]=tot; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> de[<span class="number">100000</span>]; </div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</div><div class="line">	q.push(S); <span class="built_in">memset</span>(de, <span class="number">0</span>, <span class="keyword">sizeof</span>(de)); </div><div class="line">	de[S] = <span class="number">1</span>; </div><div class="line">	<span class="keyword">int</span> x, y; </div><div class="line">	<span class="keyword">while</span> (!q.empty()) &#123; </div><div class="line">		x = q.front(), q.pop(); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=head[x]; i; i=e[i].nxt) </div><div class="line">			<span class="keyword">if</span> (y = e[i].to, e[i].f&amp;&amp;!de[y])</div><div class="line">				de[y] = de[x] + <span class="number">1</span>, q.push(y); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> de[T]; </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> mx)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (x == T) <span class="keyword">return</span> mx; </div><div class="line">	<span class="keyword">int</span> hv = <span class="number">0</span>, y, f;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</div><div class="line">		<span class="keyword">if</span> (y=e[i].to, e[i].f&amp;&amp;de[y]==de[x]+<span class="number">1</span>) &#123; </div><div class="line">			f = dfs(y, min(mx, e[i].f)); </div><div class="line">			e[i].f -= f, e[i^<span class="number">1</span>].f += f, hv += f; </div><div class="line">			mx -= f; <span class="keyword">if</span> (!mx) <span class="keyword">return</span> hv; </div><div class="line">		&#125; </div><div class="line">	de[x] = <span class="number">-1</span>; <span class="keyword">return</span> hv; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">MINCOST</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> rec = <span class="number">0</span>; </div><div class="line">	<span class="keyword">while</span> (bfs()) rec += dfs(S, inf); </div><div class="line">	<span class="keyword">return</span> rec; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k); </div><div class="line">	S = <span class="number">0</span>, T = n*m + <span class="number">1</span>; <span class="keyword">int</span> ans = <span class="number">0</span>;  </div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">		<span class="keyword">int</span> mx = <span class="number">0</span>; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; ++j) 			</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;X[i][j]), cmax(mx, X[i][j]); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;m; ++j) </div><div class="line">			add(id(i, j), id(i, j+<span class="number">1</span>), (X[i][j]==<span class="number">-1</span>)?inf:mx-X[i][j]); </div><div class="line">		add(id(i, m), T, (X[i][m]==<span class="number">-1</span>)?inf:mx-X[i][m]); </div><div class="line">		add(S, id(i, <span class="number">1</span>), inf), ans += mx; </div><div class="line">	&#125; </div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=k; ++i) &#123; </div><div class="line">		<span class="keyword">int</span> A, B; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;A, &amp;B); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m<span class="number">-1</span>; ++j) </div><div class="line">			add(id(A, j), id(B, j+<span class="number">1</span>), inf); </div><div class="line">		add(id(A, m), T, inf); </div><div class="line">	&#125; </div><div class="line">	</div><div class="line">	ans -= MINCOST(); </div><div class="line">	</div><div class="line">	<span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, (ff)ans/(ff)n), <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-gnumgame-of-numbers">【CC GNUM】Game of Numbers</h1>
<h2 id="题目链接"><a href="https://www.codechef.com/problems/GNUM" target="_blank" rel="external">题目链接</a></h2>
<h2 id="解题报告-7">解题报告</h2>
<p>（这个人怎么懒到不想写题目大意呀）</p>
<p>把<span class="math inline">\(gcd(i,j)!=1\)</span>的点分为<span class="math inline">\(b_j &gt; a_i\)</span> 和 <span class="math inline">\(b_j &lt; a_i\)</span> 两类， 建成连<span class="math inline">\(S\)</span>  <span class="math inline">\(T\)</span> 的两排点， 把出现过的质因数建成中间的一排点。</p>
<p><span class="math inline">\((i,j)\)</span> 连 <span class="math inline">\(gcd(i,j)\)</span> 包含的质数的点， 流量是<span class="math inline">\(1\)</span>, 直接最大流。</p>
<h2 id="代码-7">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = int(a), nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = int(a), nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; b; ++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1000000000</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">410</span>; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> nxt, to, f; </div><div class="line">	edge(<span class="keyword">int</span> nxt=<span class="number">0</span>, <span class="keyword">int</span> to=<span class="number">0</span>, <span class="keyword">int</span> f=<span class="number">0</span>) </div><div class="line">		:nxt(nxt), to(to), f(f) &#123;&#125;</div><div class="line">&#125; e[N*N*<span class="number">10</span>]; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> test, S, T, n, totA, totB, totp, tot;</div><div class="line"><span class="keyword">int</span> a[N], b[N], c[N], head[N*N*<span class="number">10</span>];</div><div class="line"> </div><div class="line"><span class="keyword">int</span> A[N*N], Ap[N*N][<span class="number">12</span>];</div><div class="line"><span class="keyword">int</span> B[N*N], Bp[N*N][<span class="number">12</span>];</div><div class="line"> </div><div class="line"><span class="built_in">map</span> &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; HA, HB, Hp;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> f)</span> </span>&#123;</div><div class="line">	e[++tot]=edge(head[x], y, f), head[x]=tot; </div><div class="line">	e[++tot]=edge(head[y], x, <span class="number">0</span>), head[y]=tot; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> de[<span class="number">100000</span>]; </div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</div><div class="line">	q.push(S); <span class="built_in">memset</span>(de, <span class="number">0</span>, <span class="keyword">sizeof</span>(de)); </div><div class="line">	de[S] = <span class="number">1</span>; </div><div class="line">	<span class="keyword">int</span> x, y; </div><div class="line">	<span class="keyword">while</span> (!q.empty()) &#123; </div><div class="line">		x = q.front(), q.pop(); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=head[x]; i; i=e[i].nxt) </div><div class="line">			<span class="keyword">if</span> (y = e[i].to, e[i].f&amp;&amp;!de[y])</div><div class="line">				de[y] = de[x] + <span class="number">1</span>, q.push(y); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> de[T]; </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> mx)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (x == T) <span class="keyword">return</span> mx; </div><div class="line">	<span class="keyword">int</span> hv = <span class="number">0</span>, y, f;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</div><div class="line">		<span class="keyword">if</span> (y=e[i].to, e[i].f&amp;&amp;de[y]==de[x]+<span class="number">1</span>) &#123; </div><div class="line">			f = dfs(y, min(mx, e[i].f)); </div><div class="line">			e[i].f -= f, e[i^<span class="number">1</span>].f += f, hv += f; </div><div class="line">			mx -= f; <span class="keyword">if</span> (!mx) <span class="keyword">return</span> hv; </div><div class="line">		&#125; </div><div class="line">	de[x] = <span class="number">-1</span>; <span class="keyword">return</span> hv; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> rc = <span class="number">0</span>; </div><div class="line">	<span class="keyword">while</span> (bfs()) rc += dfs(S, inf);</div><div class="line">	<span class="keyword">return</span> rc; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;test);</div><div class="line">	</div><div class="line">	<span class="keyword">while</span> (test --) &#123; </div><div class="line">	</div><div class="line">		HA.clear(), HB.clear(), Hp.clear();</div><div class="line">		totA = totB = totp = <span class="number">0</span>;</div><div class="line">		</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> u, v, k, i, j; </div><div class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n ; ++i) <span class="keyword">for</span>(j=<span class="number">1</span> ; j&lt;=n ; ++j)</div><div class="line">			<span class="keyword">if</span>(a[i] != b[j]) &#123;</div><div class="line">				u = __gcd(a[i],b[j]);</div><div class="line">				v = <span class="number">1</span>, c[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">				<span class="keyword">for</span>(k=<span class="number">2</span>; k*k &lt;= u; ++k)</div><div class="line">					<span class="keyword">if</span>(u%k == <span class="number">0</span>) &#123;</div><div class="line">						v *= k, c[++c[<span class="number">0</span>]] = k;</div><div class="line">						<span class="keyword">while</span> (u % k==<span class="number">0</span>) u/=k; </div><div class="line">					&#125;</div><div class="line">				<span class="keyword">if</span>(u!=<span class="number">1</span>) v *= u, c[++c[<span class="number">0</span>]]=u;</div><div class="line">				</div><div class="line">				<span class="keyword">if</span>(a[i] &gt; b[j]) &#123;</div><div class="line">				</div><div class="line">					<span class="keyword">if</span>(!HA[v]) &#123;</div><div class="line">						HA[v] = ++totA;</div><div class="line">						A[totA]=<span class="number">1</span>, Ap[totA][<span class="number">0</span>] = c[<span class="number">0</span>];</div><div class="line">						<span class="keyword">for</span>(k=<span class="number">1</span>; k&lt;=c[<span class="number">0</span>]; ++k) &#123;</div><div class="line">							<span class="keyword">if</span> (!Hp[c[k]]) Hp[c[k]] = ++totp;</div><div class="line">							Ap[totA][k] = Hp[c[k]];</div><div class="line">						&#125;</div><div class="line">					&#125; <span class="keyword">else</span> ++A[HA[v]];</div><div class="line">					</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">				</div><div class="line">					<span class="keyword">if</span>(!HB[v]) &#123;</div><div class="line">						HB[v] = ++totB;</div><div class="line">						B[totB] = <span class="number">1</span>, Bp[totB][<span class="number">0</span>] = c[<span class="number">0</span>];</div><div class="line">						<span class="keyword">for</span>(k=<span class="number">1</span>; k &lt;= c[<span class="number">0</span>]; ++k) &#123;</div><div class="line">							<span class="keyword">if</span>(!Hp[c[k]]) Hp[c[k]] = ++totp;</div><div class="line">							Bp[totB][k] = Hp[c[k]];</div><div class="line">						&#125;</div><div class="line">					&#125; <span class="keyword">else</span> ++B[HB[v]];</div><div class="line">					</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		S=<span class="number">0</span>, T=totA + totp + totB + <span class="number">1</span>;</div><div class="line">		</div><div class="line">		<span class="built_in">memset</span>(e, <span class="number">0</span>, <span class="keyword">sizeof</span>(e)); </div><div class="line">		<span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span>(head)); </div><div class="line">		tot = <span class="number">1</span>; </div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>; i &lt;= totA; ++i) &#123;</div><div class="line">			add(S, i, A[i]);</div><div class="line">			<span class="keyword">for</span>(j=<span class="number">1</span>; j &lt;= Ap[i][<span class="number">0</span>]; ++j)</div><div class="line">				add(i, totA+Ap[i][j], inf);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= totB; ++i) &#123;</div><div class="line">			<span class="keyword">for</span>(j=<span class="number">1</span>; j &lt;= Bp[i][<span class="number">0</span>]; ++j)</div><div class="line">				add(totA+Bp[i][j], totA+totp+i, inf);</div><div class="line">			add(totA+totp+i, T, B[i]);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dinic());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-qtree2counting-on-a-tree">【CC QTREE2】Counting on a Tree</h1>
<h2 id="题目大意-7">题目大意</h2>
<p>每次修改一个点的权值， 求路径<span class="math inline">\(gcd\)</span>为<span class="math inline">\(1\)</span>的路径条数。</p>
<h2 id="解题报告-8">解题报告</h2>
<p>设<span class="math inline">\(f(i)\)</span>表示路径<span class="math inline">\(gcd\)</span>是<span class="math inline">\(i\)</span>的倍数的路径条数， 答案是$_i (i)f(i) $ .</p>
<p>如果没有修改， 那么每条边会被作为<span class="math inline">\(2^t\)</span>个数的倍数， 其中<span class="math inline">\(t\)</span>是边权的质因子个数（因为如果幂指数不是<span class="math inline">\(1\)</span>，<span class="math inline">\(\mu\)</span>就是<span class="math inline">\(0\)</span>), 通过并查集得到<span class="math inline">\(f(i)\)</span>是十分容易的。</p>
<p>因为修改的次数很少， 所以可以把从来没有修改的边先加入并查集中， 然后对于每一个询问， 把有修改的边修改好加入并查集， 统计好答案后还原。</p>
<p>因为需要还原， 所以并查集需要用启发式合并。</p>
<p>复杂度<span class="math inline">\(O(2^t(n+Q^2)\log n)\)</span></p>
<h2 id="代码-8">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>, P = <span class="number">1000005</span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> n, Q, f[N], size[N], a[N], c[N];</div><div class="line">ll res, ans[N];</div><div class="line"><span class="keyword">int</span> mu[P], p[P], vis[P], t;</div><div class="line"><span class="keyword">bool</span> lock[N];</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> <span class="keyword">int</span> u, v, w; &#125; s[N];</div><div class="line"> </div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; del;</div><div class="line"><span class="built_in">vector</span>&lt; pii &gt; q[P];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> prime[P], tot = <span class="number">0</span>;</div><div class="line">	mu[<span class="number">1</span>] = <span class="number">1</span>; ++t;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; P; ++i) &#123;</div><div class="line">		<span class="keyword">if</span>(vis[i] != t) mu[prime[++tot] = p[i] = i] = <span class="number">-1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; prime[j] * i &lt; P; ++j) &#123;</div><div class="line">			vis[prime[j] * i] = t;</div><div class="line">			p[prime[j] * i] = prime[j];</div><div class="line">			<span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">			mu[i * prime[j]] = -mu[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">divide</span><span class="params">(pii op, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ds; ds.pb(<span class="number">1</span>);</div><div class="line">	<span class="keyword">while</span>(val != <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">int</span> x = p[val];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = ds.size(); i--; ) ds.pb(x * ds[i]);</div><div class="line">		<span class="keyword">while</span>(val % x == <span class="number">0</span>) val /= x;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = ds.size(); i--; ) q[ds[i]].pb(op);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">ask</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; </div><div class="line">	<span class="keyword">return</span> <span class="number">1L</span>L * i * (i - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>; </div><div class="line">&#125;</div><div class="line">	 </div><div class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _find(<span class="keyword">int</span> x) &#123; </div><div class="line">	<span class="keyword">return</span> f[x] == x ? x : _find(f[x]); </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="built_in">stack</span>&lt; pii &gt; S;</div><div class="line"> </div><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _union(<span class="keyword">int</span> u, <span class="keyword">int</span> v) &#123;</div><div class="line">	u = _find(u); v = _find(v);</div><div class="line">	<span class="keyword">if</span>(u == v) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">if</span>(size[u] &lt; size[v]) swap(u, v);</div><div class="line">	res -= ask(size[u]) + ask(size[v]);</div><div class="line">	size[f[v] = u] += size[v];</div><div class="line">	res += ask(size[u]);</div><div class="line">	S.push(make_pair(u, v));</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _restore() &#123;</div><div class="line">	<span class="keyword">int</span> u = S.top().fi, v = S.top().se; S.pop();</div><div class="line">	res -= ask(size[u]);</div><div class="line">	size[u] -= size[f[v] = v];</div><div class="line">	res += ask(size[u]) + ask(size[v]);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">	<span class="built_in">vector</span>&lt; pii &gt;&amp; op = q[p];</div><div class="line">	<span class="keyword">if</span>(op.empty()) <span class="keyword">return</span>;</div><div class="line">	</div><div class="line">	<span class="built_in">stack</span>&lt; pii &gt;().swap(S);</div><div class="line">	res = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> x : op) &#123;</div><div class="line">		<span class="keyword">int</span> u = s[x.fi].u, v = s[x.fi].v;</div><div class="line">		size[f[u] = u] = size[f[v] = v] = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>; l &lt; op.size(); l = r) &#123;</div><div class="line">		<span class="keyword">for</span>(; r &lt; op.size() &amp;&amp; op[r].se == op[l].se; ++r)</div><div class="line">			_union(s[op[r].fi].u, s[op[r].fi].v);</div><div class="line">		<span class="keyword">if</span>(op[l].se &lt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="built_in">stack</span>&lt; pii &gt;().swap(S);</div><div class="line">			++t;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = r; i &lt; op.size(); ++i) vis[op[i].se] = t;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Q; ++i) <span class="keyword">if</span>(vis[i] != t) ans[i] += res * mu[p];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			ans[op[l].se] += res * mu[p];</div><div class="line">			<span class="keyword">while</span>(!S.empty()) _restore();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	init();</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) </div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;s[i].u, &amp;s[i].v, &amp;s[i].w);</div><div class="line"> </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Q);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i) &#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, a + i, c + i);</div><div class="line">		<span class="keyword">if</span>(!lock[a[i]]) &#123;</div><div class="line">			del.pb(a[i]);</div><div class="line">			lock[a[i]] = <span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</div><div class="line">		<span class="keyword">if</span>(!lock[i]) divide(make_pair(i, <span class="number">-1</span>), s[i].w);</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</div><div class="line">		<span class="keyword">if</span>(lock[i]) divide(make_pair(i, <span class="number">0</span>), s[i].w);</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i) &#123;</div><div class="line">		s[a[i]].w = c[i];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j : del) divide(make_pair(j, i), s[j].w);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; P; ++i)</div><div class="line">		<span class="keyword">if</span>(mu[i] != <span class="number">0</span>) solve(i);</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Q; ++i) </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans[i] + ask(n));</div><div class="line">		</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;选做CC hard 题中最简单，通过人数最多的做…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="题目集锦" scheme="http://shallwe.ga/categories/%E9%A2%98%E7%9B%AE%E9%9B%86%E9%94%A6/"/>
    
    
      <category term="并查集" scheme="http://shallwe.ga/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="平衡树" scheme="http://shallwe.ga/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="树链剖分" scheme="http://shallwe.ga/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
      <category term="树状数组" scheme="http://shallwe.ga/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="DP" scheme="http://shallwe.ga/tags/DP/"/>
    
      <category term="数论" scheme="http://shallwe.ga/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="矩阵/行列式" scheme="http://shallwe.ga/tags/%E7%9F%A9%E9%98%B5-%E8%A1%8C%E5%88%97%E5%BC%8F/"/>
    
      <category term="bitset" scheme="http://shallwe.ga/tags/bitset/"/>
    
      <category term="网络流" scheme="http://shallwe.ga/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="分块" scheme="http://shallwe.ga/tags/%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
</feed>
